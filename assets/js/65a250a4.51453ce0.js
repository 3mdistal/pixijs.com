"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[9516],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},40941:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={id:"PIXI.FormatDetectionParser.pixi_assets",title:"Interface: PIXI.FormatDetectionParser",sidebar_label:"PIXI.FormatDetectionParser",custom_edit_url:null},o=void 0,l={unversionedId:"api/interfaces/PIXI.FormatDetectionParser.pixi_assets",id:"api/interfaces/PIXI.FormatDetectionParser.pixi_assets",title:"Interface: PIXI.FormatDetectionParser",description:"@pixi/assets.FormatDetectionParser",source:"@site/docs/api/interfaces/PIXI.FormatDetectionParser.pixi_assets.mdx",sourceDirName:"api/interfaces",slug:"/api/interfaces/PIXI.FormatDetectionParser.pixi_assets",permalink:"/api/interfaces/PIXI.FormatDetectionParser.pixi_assets",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.FormatDetectionParser.pixi_assets",title:"Interface: PIXI.FormatDetectionParser",sidebar_label:"PIXI.FormatDetectionParser",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.FederatedEventTarget",permalink:"/api/interfaces/PIXI.FederatedEventTarget.pixi_events"},next:{title:"PIXI.IAdapter",permalink:"/api/interfaces/PIXI.IAdapter.pixi_settings"}},s={},p=[{value:"Summary",id:"summary",level:2},{value:"Members",id:"members",level:2},{value:"add",id:"add",level:3},{value:"extension",id:"extension",level:3},{value:"remove",id:"remove",level:3},{value:"test",id:"test",level:3}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{class:"package-name"},(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"../modules/pixi_assets"},"@pixi/assets"),".FormatDetectionParser")),(0,a.kt)("p",null,"Format detection is useful for detecting feature support on the current platform."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Properties"),(0,a.kt)("p",null,(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"add"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"(formats",":"," string[]) =",">"," Promise","<","string[]",">")),(0,a.kt)("td",{parentName:"tr",align:null},"Add formats (file extensions) to the existing list of formats. Return an new array with added formats, do not mutate the formats argument.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"extension"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"ExtensionMetadata")),(0,a.kt)("td",{parentName:"tr",align:null},"Should be ExtensionType.DetectionParser")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"remove"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"(formats",":"," string[]) =",">"," Promise","<","string[]",">")),(0,a.kt)("td",{parentName:"tr",align:null},"Remove formats (file extensions) from the list of supported formats. This is used when uninstalling this DetectionParser. Return an new array with filtered formats, do not mutate the formats argument.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"test"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"() =",">"," Promise","<","boolean",">")),(0,a.kt)("td",{parentName:"tr",align:null},"Browser/platform feature detection supported if return true")))))),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"add"},"add"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(formats",":"," string[]) =",">"," Promise","<","string[]",">")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Add formats (file extensions) to the existing list of formats. Return an new array with added formats, do not mutate the formats argument.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"extension"},"extension"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"ExtensionMetadata")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Should be ExtensionType.DetectionParser")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"remove"},"remove"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(formats",":"," string[]) =",">"," Promise","<","string[]",">")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Remove formats (file extensions) from the list of supported formats. This is used when uninstalling this DetectionParser. Return an new array with filtered formats, do not mutate the formats argument.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"test"},"test"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"() =",">"," Promise","<","boolean",">")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Browser/platform feature detection supported if return true")),(0,a.kt)("hr",null))}m.isMDXComponent=!0}}]);