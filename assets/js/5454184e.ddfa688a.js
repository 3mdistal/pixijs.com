"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[6863],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,s=function(e,t){if(null==e)return{};var r,a,s={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,s=e.mdxType,n=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(r),m=s,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||n;return r?a.createElement(d,i(i({ref:t},c),{},{components:r})):a.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var n=r.length,i=new Array(n);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var p=2;p<n;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},88205:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var a=r(87462),s=(r(67294),r(3905));const n={},i="Spritesheets",o={unversionedId:"guides/basics/sprite-sheets",id:"guides/basics/sprite-sheets",title:"Spritesheets",description:"Now that you understand basic sprites, it's time to talk about a better way to create them - the Spritesheet class.",source:"@site/docs/guides/basics/sprite-sheets.md",sourceDirName:"guides/basics",slug:"/guides/basics/sprite-sheets",permalink:"/guides/basics/sprite-sheets",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/basics/sprite-sheets.md",tags:[],version:"current",frontMatter:{},sidebar:"guidesSidebar",previous:{title:"Sprites",permalink:"/guides/basics/sprites"},next:{title:"Text",permalink:"/guides/basics/text"}},l={},p=[{value:"Anatomy of a Spritesheet",id:"anatomy-of-a-spritesheet",level:2},{value:"Doubly Efficient",id:"doubly-efficient",level:2},{value:"Creating SpriteSheets",id:"creating-spritesheets",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"spritesheets"},"Spritesheets"),(0,s.kt)("p",null,"Now that you understand basic sprites, it's time to talk about a better way to create them - the ",(0,s.kt)("a",{parentName:"p",href:"/api/classes/PIXI.Spritesheet.pixi_spritesheet"},"Spritesheet")," class."),(0,s.kt)("p",null,"A Spritesheet is a media format for more efficiently downloading and rendering Sprites.  While somewhat more complex to create and use, they are a key tool in optimizing your project."),(0,s.kt)("h2",{id:"anatomy-of-a-spritesheet"},"Anatomy of a Spritesheet"),(0,s.kt)("p",null,"The basic idea of a spritesheet is to pack a series of images together into a single image, track where each source image ends up, and use that combined image as a shared BaseTexture for the resulting Sprites.  "),(0,s.kt)("p",null,"The first step is to collect the images you want to combine.  The sprite packer then collects the images, and creates a new combined image."),(0,s.kt)("p",null,"As this image is being created, the tool building it keeps track of the location of the rectangle where each source image is stored.  It then writes out a JSON file with that information."),(0,s.kt)("p",null,"These two files, in combination, can be passed into a SpriteSheet constructor.  The SpriteSheet object then parses the JSON, and creates a series of Texture objects, one for each source image, setting the source rectangle for each based on the JSON data.  Each texture uses the same shared BaseTexture as its source."),(0,s.kt)("h2",{id:"doubly-efficient"},"Doubly Efficient"),(0,s.kt)("p",null,"SpriteSheets help your project in two ways."),(0,s.kt)("p",null,"First, by ",(0,s.kt)("strong",{parentName:"p"},"speeding up the loading process"),".  While downloading a SpriteSheet's texture requires moving the same (or even slightly more!) number of bytes, they're grouped into a single file.  This means that the user's browser can request and download far fewer files for the same number of Sprites.  The number of files ",(0,s.kt)("em",{parentName:"p"},"itself")," is a key driver of download speed, because each request requires a round-trip to the webserver, and browsers are limited to how many files they can download simultaneously.  Converting a project from individual source images to shared sprite sheets can cut your download time in half, at no cost in quality."),(0,s.kt)("p",null,"Second, by ",(0,s.kt)("strong",{parentName:"p"},"improving batch rendering"),".  WebGL rendering speed scales roughly with the number of draw calls made.  Batching multiple Sprites, etc. into a single draw call is the main secret to how PixiJS can run so blazingly fast.  Maximizing batching is a complex topic, but when multiple Sprites all share a common BaseTexture, it makes it more likely that they can be batched together and rendered in a single call."),(0,s.kt)("h2",{id:"creating-spritesheets"},"Creating SpriteSheets"),(0,s.kt)("p",null,"You can use a 3rd party tool to assemble your sprite sheet files.  Here are two that may fit your needs:"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"http://renderhjs.net/shoebox/"},"ShoeBox"),": ShoeBox is a free, Adobe AIR-based sprite packing utility that is great for small projects or learning how SpriteSheets work."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.codeandweb.com/texturepacker"},"TexturePacker"),": TexturePacker is a more polished tool that supports advanced features and workflows. A free version is available which has all the necessary features for packing spritesheets for PixiJS. It's a good fit for larger projects and professional game development, or projects that need more complex tile mapping features."),(0,s.kt)("p",null,"Spritesheet data can also be created manually or programatically, and supplied to a new AnimatedSprite. This may be an easier option if your sprites are already contained in a single image."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create object to store sprite sheet data\nconst atlasData = {\n    frames: {\n        enemy1: {\n            frame: { x: 0, y:0, w:32, h:32 },\n            sourceSize: { w: 32, h: 32 },\n            spriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n        },\n        enemy2: {\n            frame: { x: 32, y:0, w:32, h:32 },\n            sourceSize: { w: 32, h: 32 },\n            spriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n        },\n    },\n    meta: {\n        image: 'images/spritesheet.png',\n        format: 'RGBA8888',\n        size: { w: 128, h: 32 },\n        scale: 1\n    },\n    animations: {\n        enemy: ['enemy1','enemy2'] //array of frames by name\n    }\n}\n\n\n// Create the SpriteSheet from data and image\nconst spritesheet = new PIXI.Spritesheet(\n    PIXI.BaseTexture.from(atlasData.meta.image),\n    atlasData\n);\n\n// Generate all the Textures asynchronously\nawait spritesheet.parse();\n\n// spritesheet is ready to use!\nconst anim = new PIXI.AnimatedSprite(spritesheet.animations.enemy);\n")))}u.isMDXComponent=!0}}]);