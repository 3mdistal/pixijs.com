"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[2331],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>c});var l=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,l)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function u(t,e){if(null==t)return{};var a,l,n=function(t,e){if(null==t)return{};var a,l,n={},r=Object.keys(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var d=l.createContext({}),o=function(t){var e=l.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=o(t.components);return l.createElement(d.Provider,{value:e},t.children)},p="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},m=l.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,d=t.parentName,s=u(t,["components","mdxType","originalType","parentName"]),p=o(a),m=n,c=p["".concat(d,".").concat(m)]||p[m]||k[m]||r;return a?l.createElement(c,i(i({ref:e},s),{},{components:a})):l.createElement(c,i({ref:e},s))}));function c(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,i=new Array(r);i[0]=m;var u={};for(var d in e)hasOwnProperty.call(e,d)&&(u[d]=e[d]);u.originalType=t,u[p]="string"==typeof t?t:n,i[1]=u;for(var o=2;o<r;o++)i[o]=a[o];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}m.displayName="MDXCreateElement"},22741:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var l=a(87462),n=(a(67294),a(3905));const r={id:"PIXI.GraphicsGeometry.pixi_graphics",title:"Class: PIXI.GraphicsGeometry",sidebar_label:"PIXI.GraphicsGeometry",custom_edit_url:null},i=void 0,u={unversionedId:"api/classes/PIXI.GraphicsGeometry.pixi_graphics",id:"api/classes/PIXI.GraphicsGeometry.pixi_graphics",title:"Class: PIXI.GraphicsGeometry",description:"@pixi/graphics.GraphicsGeometry",source:"@site/docs/api/classes/PIXI.GraphicsGeometry.pixi_graphics.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.GraphicsGeometry.pixi_graphics",permalink:"/api/classes/PIXI.GraphicsGeometry.pixi_graphics",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.GraphicsGeometry.pixi_graphics",title:"Class: PIXI.GraphicsGeometry",sidebar_label:"PIXI.GraphicsGeometry",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.GraphicsData",permalink:"/api/classes/PIXI.GraphicsData.pixi_graphics"},next:{title:"PIXI.HTMLText",permalink:"/api/classes/PIXI.HTMLText.pixi_text_html"}},d={},o=[{value:"new PIXI()",id:"new-pixi",level:3},{value:"Extends",id:"extends",level:2},{value:"Members",id:"members",level:2},{value:"BATCHABLE_SIZE: <span><code>number</code></span>",id:"batchable_size-number",level:3},{value:"batchDirty: <span><code>number</code></span>",id:"batchdirty-number",level:3},{value:"batches: <span><code>Array&lt;PIXI.graphicsUtils.BatchPart&gt;</code></span>",id:"batches-arraypixigraphicsutilsbatchpart",level:3},{value:"bounds: <span><code>Bounds</code></span>",id:"bounds-bounds",level:3},{value:"boundsPadding: <span><code>number</code></span>",id:"boundspadding-number",level:3},{value:"closePointEps: <span><code>number</code></span>",id:"closepointeps-number",level:3},{value:"colors: <span><code>number[]</code></span>",id:"colors-number",level:3},{value:"drawCalls: <span><code>Array&lt;PIXI.BatchDrawCall&gt;</code></span>",id:"drawcalls-arraypixibatchdrawcall",level:3},{value:"glVertexArrayObjects: <span><code>object</code></span>",id:"glvertexarrayobjects-object",level:3},{value:"graphicsData: <span><code>Array&lt;PIXI.GraphicsData&gt;</code></span>",id:"graphicsdata-arraypixigraphicsdata",level:3},{value:"indices: <span><code>number[]</code></span>",id:"indices-number",level:3},{value:"instanceCount: <span><code>number</code></span>",id:"instancecount-number",level:3},{value:"instanced: <span><code>boolean</code></span>",id:"instanced-boolean",level:3},{value:"points: <span><code>number[]</code></span>",id:"points-number",level:3},{value:"refCount: <span><code>number</code></span>",id:"refcount-number",level:3},{value:"textureIds: <span><code>number[]</code></span>",id:"textureids-number",level:3},{value:"uvs: <span><code>number[]</code></span>",id:"uvs-number",level:3},{value:"_bounds: <span><code>Bounds</code></span>",id:"_bounds-bounds",level:3},{value:"_buffer: <span><code>Buffer</code></span>",id:"_buffer-buffer",level:3},{value:"_indexBuffer: <span><code>Buffer</code></span>",id:"_indexbuffer-buffer",level:3},{value:"boundsDirty: <span><code>number</code></span>",id:"boundsdirty-number",level:3},{value:"cacheDirty: <span><code>number</code></span>",id:"cachedirty-number",level:3},{value:"clearDirty: <span><code>number</code></span>",id:"cleardirty-number",level:3},{value:"dirty: <span><code>number</code></span>",id:"dirty-number",level:3},{value:"shapeIndex: <span><code>number</code></span>",id:"shapeindex-number",level:3},{value:"Methods",id:"methods",level:2},{value:"addAttribute: <span><code>(id: string, buffer: PIXI.Buffer | Array&lt;number&gt;, size: number, normalized: boolean, type: TYPES, stride: number, start: number, instance: boolean) -&gt; this</code></span>",id:"addattribute-id-string-buffer-pixibuffer--arraynumber-size-number-normalized-boolean-type-types-stride-number-start-number-instance-boolean---this",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"addIndex: <span><code>(buffer: PIXI.Buffer | Array&lt;number&gt;) -&gt; Geometry</code></span>",id:"addindex-buffer-pixibuffer--arraynumber---geometry",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"clear: <span><code>() -&gt; GraphicsGeometry</code></span>",id:"clear----graphicsgeometry",level:3},{value:"Returns:",id:"returns-2",level:4},{value:"clone: <span><code>() -&gt; Geometry</code></span>",id:"clone----geometry",level:3},{value:"Returns:",id:"returns-3",level:4},{value:"containsPoint: <span><code>(point: IPointData) -&gt; boolean</code></span>",id:"containspoint-point-ipointdata---boolean",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"destroy: <span><code>() -&gt; void</code></span>",id:"destroy----void",level:3},{value:"dispose: <span><code>() -&gt; void</code></span>",id:"dispose----void",level:3},{value:"drawHole: <span><code>(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, matrix: Matrix) -&gt; GraphicsGeometry</code></span>",id:"drawhole-shape-pixicircle--pixiellipse--pixipolygon--pixirectangle--pixiroundedrectangle-matrix-matrix---graphicsgeometry",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Returns:",id:"returns-5",level:4},{value:"drawShape: <span><code>(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, fillStyle: FillStyle, lineStyle: LineStyle, matrix: Matrix) -&gt; GraphicsGeometry</code></span>",id:"drawshape-shape-pixicircle--pixiellipse--pixipolygon--pixirectangle--pixiroundedrectangle-fillstyle-fillstyle-linestyle-linestyle-matrix-matrix---graphicsgeometry",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Returns:",id:"returns-6",level:4},{value:"getAttribute: <span><code>(id: string) -&gt; Attribute</code></span>",id:"getattribute-id-string---attribute",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Returns:",id:"returns-7",level:4},{value:"getBuffer: <span><code>(id: string) -&gt; Buffer</code></span>",id:"getbuffer-id-string---buffer",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"Returns:",id:"returns-8",level:4},{value:"getIndex: <span><code>() -&gt; Buffer</code></span>",id:"getindex----buffer",level:3},{value:"Returns:",id:"returns-9",level:4},{value:"getSize: <span><code>() -&gt; number</code></span>",id:"getsize----number",level:3},{value:"Returns:",id:"returns-10",level:4},{value:"interleave: <span><code>() -&gt; Geometry</code></span>",id:"interleave----geometry",level:3},{value:"Returns:",id:"returns-11",level:4},{value:"updateBatches: <span><code>() -&gt; void</code></span>",id:"updatebatches----void",level:3},{value:"_compareStyles: <span><code>(styleA: FillStyle | LineStyle, styleB: FillStyle | LineStyle) -&gt; boolean</code></span>",id:"_comparestyles-stylea-fillstyle--linestyle-styleb-fillstyle--linestyle---boolean",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"Returns:",id:"returns-12",level:4},{value:"addColors: <span><code>(colors: Array&lt;number&gt;, color: number, alpha: number, size: number, offset: number) -&gt; void</code></span>",id:"addcolors-colors-arraynumber-color-number-alpha-number-size-number-offset-number---void",level:3},{value:"Parameters:",id:"parameters-8",level:4},{value:"addTextureIds: <span><code>(textureIds: Array&lt;number&gt;, id: number, size: number, offset: number) -&gt; void</code></span>",id:"addtextureids-textureids-arraynumber-id-number-size-number-offset-number---void",level:3},{value:"Parameters:",id:"parameters-9",level:4},{value:"addUvs: <span><code>(verts: Array&lt;number&gt;, uvs: Array&lt;number&gt;, texture: Texture, start: number, size: number, matrix: Matrix) -&gt; void</code></span>",id:"adduvs-verts-arraynumber-uvs-arraynumber-texture-texture-start-number-size-number-matrix-matrix---void",level:3},{value:"Parameters:",id:"parameters-10",level:4},{value:"adjustUvs: <span><code>(uvs: Array&lt;number&gt;, texture: Texture, start: number, size: number) -&gt; void</code></span>",id:"adjustuvs-uvs-arraynumber-texture-texture-start-number-size-number---void",level:3},{value:"Parameters:",id:"parameters-11",level:4},{value:"buildDrawCalls: <span><code>() -&gt; void</code></span>",id:"builddrawcalls----void",level:3},{value:"calculateBounds: <span><code>() -&gt; void</code></span>",id:"calculatebounds----void",level:3},{value:"invalidate: <span><code>() -&gt; void</code></span>",id:"invalidate----void",level:3},{value:"isBatchable: <span><code>() -&gt; boolean</code></span>",id:"isbatchable----boolean",level:3},{value:"Returns:",id:"returns-13",level:4},{value:"packAttributes: <span><code>() -&gt; void</code></span>",id:"packattributes----void",level:3},{value:"packBatches: <span><code>() -&gt; void</code></span>",id:"packbatches----void",level:3},{value:"processFill: <span><code>(data: GraphicsData) -&gt; void</code></span>",id:"processfill-data-graphicsdata---void",level:3},{value:"Parameters:",id:"parameters-12",level:4},{value:"processHoles: <span><code>(holes: Array&lt;GraphicsData&gt;) -&gt; void</code></span>",id:"processholes-holes-arraygraphicsdata---void",level:3},{value:"Parameters:",id:"parameters-13",level:4},{value:"processLine: <span><code>(data: GraphicsData) -&gt; void</code></span>",id:"processline-data-graphicsdata---void",level:3},{value:"Parameters:",id:"parameters-14",level:4},{value:"transformPoints: <span><code>(points: Array&lt;number&gt;, matrix: Matrix) -&gt; void</code></span>",id:"transformpoints-points-arraynumber-matrix-matrix---void",level:3},{value:"Parameters:",id:"parameters-15",level:4},{value:"validateBatching: <span><code>() -&gt; boolean</code></span>",id:"validatebatching----boolean",level:3},{value:"Returns:",id:"returns-14",level:4}],s={toc:o};function p(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,l.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../modules/pixi_graphics"},"@pixi/graphics"),".GraphicsGeometry"),(0,n.kt)("p",null,"The Graphics class contains methods used to draw primitive shapes such as lines, circles and rectangles to the display, and to color and fill them."),(0,n.kt)("p",null,"GraphicsGeometry is designed to not be continually updating the geometry since it's expensive to re-tesselate using ",(0,n.kt)("strong",{parentName:"p"},"earcut"),". Consider using ",(0,n.kt)("a",{parentName:"p",href:"../classes/PIXI.Mesh.pixi_mesh"},"PIXI.Mesh")," for this use-case, it's much faster."),(0,n.kt)("p",null,"// TODO: @see"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"new-pixi"},"new PIXI()")),(0,n.kt)("h2",{id:"extends"},"Extends"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../classes/PIXI.BatchGeometry.pixi_core"},"PIXI.BatchGeometry"))),(0,n.kt)("h2",{id:"members"},"Members"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"batchable_size-number"},"BATCHABLE_SIZE: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"100"))),(0,n.kt)("p",null,'The maximum number of points to consider an object "batchable", able to be batched by the renderer\'s batch system.')),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"batchdirty-number"},"batchDirty: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"-1"))),(0,n.kt)("p",null,"Batches need to regenerated if the geometry is updated.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"batches-arraypixigraphicsutilsbatchpart"},"batches: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Array","<","PIXI.graphicsUtils.BatchPart",">"))),(0,n.kt)("p",null,"Intermediate abstract format sent to batch system. Can be converted to drawCalls or to batchable objects.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"bounds-bounds"},"bounds: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Bounds"))),(0,n.kt)("p",null,"Get the current bounds of the graphic geometry.\nSince 6.5.0, bounds of the graphics geometry are calculated based on the vertices of generated geometry. Since shapes or strokes with full transparency (",(0,n.kt)("inlineCode",{parentName:"p"},"alpha: 0"),") will not generate geometry, they are not considered when calculating bounds for the graphics geometry. See PR ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/pull/8343"},"#8343")," and issue ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/pull/8623"},"#8623"),".")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"boundspadding-number"},"boundsPadding: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"0"))),(0,n.kt)("p",null,"Padding to add to the bounds.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"closepointeps-number"},"closePointEps: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"0.0001"))),(0,n.kt)("p",null,"Minimal distance between points that are considered different. Affects line tesselation.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"colors-number"},"colors: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number[]"))),(0,n.kt)("p",null,"The collection of colors")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"drawcalls-arraypixibatchdrawcall"},"drawCalls: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Array","<","PIXI.BatchDrawCall",">"))),(0,n.kt)("p",null,"List of current draw calls drived from the batches.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"glvertexarrayobjects-object"},"glVertexArrayObjects: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"object"))),(0,n.kt)("p",null,"A map of renderer IDs to webgl VAOs")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"graphicsdata-arraypixigraphicsdata"},"graphicsData: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Array","<","PIXI.GraphicsData",">"))),(0,n.kt)("p",null,"The collection of drawn shapes.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"indices-number"},"indices: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number[]"))),(0,n.kt)("p",null,"The indices of the vertices")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"instancecount-number"},"instanceCount: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"1"))),(0,n.kt)("p",null,"Number of instances in this geometry, pass it to ",(0,n.kt)("inlineCode",{parentName:"p"},"GeometrySystem.draw()"),".")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"instanced-boolean"},"instanced: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"boolean"))),(0,n.kt)("p",null,"Whether the geometry is instanced.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"points-number"},"points: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number[]"))),(0,n.kt)("p",null,"An array of points to draw, 2 numbers per point")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"refcount-number"},"refCount: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"Count of existing (not destroyed) meshes that reference this geometry.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"textureids-number"},"textureIds: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number[]"))),(0,n.kt)("p",null,"Reference to the texture IDs.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"uvs-number"},"uvs: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number[]"))),(0,n.kt)("p",null,"The UVs collection")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_bounds-bounds"},"_bounds: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Bounds"))),(0,n.kt)("p",null,"Cached bounds.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_buffer-buffer"},"_buffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Buffer"))),(0,n.kt)("p",null,"Buffer used for position, color, texture IDs")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_indexbuffer-buffer"},"_indexBuffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Buffer"))),(0,n.kt)("p",null,"Index buffer data")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"boundsdirty-number"},"boundsDirty: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"-1"))),(0,n.kt)("p",null,"The bounds dirty flag.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"cachedirty-number"},"cacheDirty: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"-1"))),(0,n.kt)("p",null,"Used to check if the cache is dirty.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"cleardirty-number"},"clearDirty: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"0"))),(0,n.kt)("p",null,"Used to detect if we cleared the graphicsData.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"dirty-number"},"dirty: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"0"))),(0,n.kt)("p",null,"Used to detect if the graphics object has changed.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"shapeindex-number"},"shapeIndex: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"0"))),(0,n.kt)("p",null,"Index of the last batched shape in the stack of calls.")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"addattribute-id-string-buffer-pixibuffer--arraynumber-size-number-normalized-boolean-type-types-stride-number-start-number-instance-boolean---this"},"addAttribute: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(id",":"," string, buffer",":"," PIXI.Buffer ","|"," Array","<","number",">",", size",":"," number, normalized",":"," boolean, type",":"," TYPES, stride",":"," number, start",":"," number, instance",":"," boolean) -",">"," this"))),(0,n.kt)("p",null,"Adds an attribute to the geometry Note",":"," ",(0,n.kt)("inlineCode",{parentName:"p"},"stride")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," should be ",(0,n.kt)("inlineCode",{parentName:"p"},"undefined")," if you dont know them, not 0!"),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"string")),(0,n.kt)("td",{parentName:"tr",align:null},"the name of the attribute (matching up to a shader)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"buffer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.Buffer ","|"," Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"size"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"normalized"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"should the data be normalized.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"type"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"TYPES")),(0,n.kt)("td",{parentName:"tr",align:null},"what type of number is the attribute. Check ",(0,n.kt)("a",{parentName:"td",href:"../enums/PIXI.TYPES.pixi_constants"},"PIXI.TYPES")," to see the ones available")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"stride"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"How far apart, in bytes, the start of each value is. (used for interleaving data)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"start"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"How far into the array to start reading values (used for interleaving data)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"instance"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Instancing flag")))),(0,n.kt)("h4",{id:"returns"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"this")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns self, useful for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"addindex-buffer-pixibuffer--arraynumber---geometry"},"addIndex: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(buffer",":"," PIXI.Buffer ","|"," Array","<","number",">",") -",">"," Geometry"))),(0,n.kt)("p",null,"Adds an index buffer to the geometry The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, \u2026). There is only ONE index buffer."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"buffer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.Buffer ","|"," Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.")))),(0,n.kt)("h4",{id:"returns-1"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Geometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns self, useful for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"clear----graphicsgeometry"},"clear: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," GraphicsGeometry"))),(0,n.kt)("p",null,"Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings."),(0,n.kt)("h4",{id:"returns-2"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"GraphicsGeometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* This GraphicsGeometry object. Good for chaining method calls"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"clone----geometry"},"clone: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Geometry"))),(0,n.kt)("p",null,"Returns a clone of the geometry."),(0,n.kt)("h4",{id:"returns-3"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Geometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* A new clone of this geometry."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"containspoint-point-ipointdata---boolean"},"containsPoint: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(point",":"," IPointData) -",">"," boolean"))),(0,n.kt)("p",null,"Check to see if a point is contained within this geometry."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"point"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"IPointData")),(0,n.kt)("td",{parentName:"tr",align:null},"Point to check if it's contained.")))),(0,n.kt)("h4",{id:"returns-4"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"true")," if the point is contained within geometry."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"destroy----void"},"destroy: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Destroys the GraphicsGeometry object.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"dispose----void"},"dispose: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Disposes WebGL resources that are connected to this geometry.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"drawhole-shape-pixicircle--pixiellipse--pixipolygon--pixirectangle--pixiroundedrectangle-matrix-matrix---graphicsgeometry"},"drawHole: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(shape",":"," PIXI.Circle ","|"," PIXI.Ellipse ","|"," PIXI.Polygon ","|"," PIXI.Rectangle ","|"," PIXI.RoundedRectangle, matrix",":"," Matrix) -",">"," GraphicsGeometry"))),(0,n.kt)("p",null,"Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"shape"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.Circle ","|"," PIXI.Ellipse ","|"," PIXI.Polygon ","|"," PIXI.Rectangle ","|"," PIXI.RoundedRectangle")),(0,n.kt)("td",{parentName:"tr",align:null},"The shape object to draw.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"matrix"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Matrix")),(0,n.kt)("td",{parentName:"tr",align:null},"Transform applied to the points of the shape.")))),(0,n.kt)("h4",{id:"returns-5"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"GraphicsGeometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns geometry for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"drawshape-shape-pixicircle--pixiellipse--pixipolygon--pixirectangle--pixiroundedrectangle-fillstyle-fillstyle-linestyle-linestyle-matrix-matrix---graphicsgeometry"},"drawShape: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(shape",":"," PIXI.Circle ","|"," PIXI.Ellipse ","|"," PIXI.Polygon ","|"," PIXI.Rectangle ","|"," PIXI.RoundedRectangle, fillStyle",":"," FillStyle, lineStyle",":"," LineStyle, matrix",":"," Matrix) -",">"," GraphicsGeometry"))),(0,n.kt)("p",null,"Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon."),(0,n.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"shape"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.Circle ","|"," PIXI.Ellipse ","|"," PIXI.Polygon ","|"," PIXI.Rectangle ","|"," PIXI.RoundedRectangle")),(0,n.kt)("td",{parentName:"tr",align:null},"The shape object to draw.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"fillStyle"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"FillStyle")),(0,n.kt)("td",{parentName:"tr",align:null},"Defines style of the fill.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"lineStyle"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"LineStyle")),(0,n.kt)("td",{parentName:"tr",align:null},"Defines style of the lines.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"matrix"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Matrix")),(0,n.kt)("td",{parentName:"tr",align:null},"Transform applied to the points of the shape.")))),(0,n.kt)("h4",{id:"returns-6"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"GraphicsGeometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns geometry for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getattribute-id-string---attribute"},"getAttribute: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(id",":"," string) -",">"," Attribute"))),(0,n.kt)("p",null,"Returns the requested attribute."),(0,n.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"string")),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the attribute required")))),(0,n.kt)("h4",{id:"returns-7"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Attribute")),(0,n.kt)("td",{parentName:"tr",align:null},"* The attribute requested."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getbuffer-id-string---buffer"},"getBuffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(id",":"," string) -",">"," Buffer"))),(0,n.kt)("p",null,"Returns the requested buffer."),(0,n.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"string")),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the buffer required.")))),(0,n.kt)("h4",{id:"returns-8"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Buffer")),(0,n.kt)("td",{parentName:"tr",align:null},"* The buffer requested."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getindex----buffer"},"getIndex: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Buffer"))),(0,n.kt)("p",null,"Returns the index buffer"),(0,n.kt)("h4",{id:"returns-9"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Buffer")),(0,n.kt)("td",{parentName:"tr",align:null},"* The index buffer."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getsize----number"},"getSize: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," number"))),(0,n.kt)("p",null,"Get the size of the geometries, in vertices."),(0,n.kt)("h4",{id:"returns-10"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"interleave----geometry"},"interleave: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Geometry"))),(0,n.kt)("p",null,"This function modifies the structure so that all current attributes become interleaved into a single buffer This can be useful if your model remains static as it offers a little performance boost"),(0,n.kt)("h4",{id:"returns-11"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Geometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns self, useful for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"updatebatches----void"},"updateBatches: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Generates intermediate batch data. Either gets converted to drawCalls or used to convert to batch objects directly by the Graphics object.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_comparestyles-stylea-fillstyle--linestyle-styleb-fillstyle--linestyle---boolean"},"_compareStyles: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(styleA",":"," FillStyle ","|"," LineStyle, styleB",":"," FillStyle ","|"," LineStyle) -",">"," boolean"))),(0,n.kt)("p",null,"Affinity check"),(0,n.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"styleA"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"FillStyle ","|"," LineStyle")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"styleB"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"FillStyle ","|"," LineStyle")),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"returns-12"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"addcolors-colors-arraynumber-color-number-alpha-number-size-number-offset-number---void"},"addColors: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(colors",":"," Array","<","number",">",", color",":"," number, alpha",":"," number, size",":"," number, offset",":"," number) -",">"," void"))),(0,n.kt)("p",null,"Add colors."),(0,n.kt)("h4",{id:"parameters-8"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"colors"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"List of colors to add to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"color"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"Color to add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"alpha"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"Alpha to use")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"size"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"Number of colors to add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"offset"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"addtextureids-textureids-arraynumber-id-number-size-number-offset-number---void"},"addTextureIds: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(textureIds",":"," Array","<","number",">",", id",":"," number, size",":"," number, offset",":"," number) -",">"," void"))),(0,n.kt)("p",null,"Add texture id that the shader/fragment wants to use."),(0,n.kt)("h4",{id:"parameters-9"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"textureIds"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"size"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"offset"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"adduvs-verts-arraynumber-uvs-arraynumber-texture-texture-start-number-size-number-matrix-matrix---void"},"addUvs: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(verts",":"," Array","<","number",">",", uvs",":"," Array","<","number",">",", texture",":"," Texture, start",":"," number, size",":"," number, matrix",":"," Matrix) -",">"," void"))),(0,n.kt)("p",null,"Generates the UVs for a shape."),(0,n.kt)("h4",{id:"parameters-10"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"verts"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"Vertices")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uvs"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"UVs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"texture"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Texture")),(0,n.kt)("td",{parentName:"tr",align:null},"Reference to Texture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"start"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"Index buffer start index.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"size"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The size/length for index buffer.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"matrix"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Matrix")),(0,n.kt)("td",{parentName:"tr",align:null},"Optional transform for all points."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"adjustuvs-uvs-arraynumber-texture-texture-start-number-size-number---void"},"adjustUvs: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(uvs",":"," Array","<","number",">",", texture",":"," Texture, start",":"," number, size",":"," number) -",">"," void"))),(0,n.kt)("p",null,"Modify uvs array according to position of texture region Does not work with rotated or trimmed textures"),(0,n.kt)("h4",{id:"parameters-11"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uvs"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"array")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"texture"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Texture")),(0,n.kt)("td",{parentName:"tr",align:null},"region")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"start"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"starting index for uvs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"size"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"how many points to adjust"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"builddrawcalls----void"},"buildDrawCalls: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Converts intermediate batches data to drawCalls.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"calculatebounds----void"},"calculateBounds: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Update the local bounds of the object. Expensive to use performance-wise.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"invalidate----void"},"invalidate: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Call if you changed graphicsData manually. Empties all batch buffers.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"isbatchable----boolean"},"isBatchable: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," boolean"))),(0,n.kt)("p",null,"Checks to see if this graphics geometry can be batched. Currently it needs to be small enough and not contain any native lines."),(0,n.kt)("h4",{id:"returns-13"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"packattributes----void"},"packAttributes: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Packs attributes to single buffer.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"packbatches----void"},"packBatches: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Offset the indices so that it works with the batcher.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"processfill-data-graphicsdata---void"},"processFill: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(data",":"," GraphicsData) -",">"," void"))),(0,n.kt)("p",null,"Process fill part of Graphics."),(0,n.kt)("h4",{id:"parameters-12"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"data"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"GraphicsData")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"processholes-holes-arraygraphicsdata---void"},"processHoles: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(holes",":"," Array","<","GraphicsData",">",") -",">"," void"))),(0,n.kt)("p",null,"Process the holes data."),(0,n.kt)("h4",{id:"parameters-13"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"holes"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","GraphicsData",">")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"processline-data-graphicsdata---void"},"processLine: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(data",":"," GraphicsData) -",">"," void"))),(0,n.kt)("p",null,"Process line part of Graphics."),(0,n.kt)("h4",{id:"parameters-14"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"data"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"GraphicsData")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"transformpoints-points-arraynumber-matrix-matrix---void"},"transformPoints: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(points",":"," Array","<","number",">",", matrix",":"," Matrix) -",">"," void"))),(0,n.kt)("p",null,"Transform points using matrix."),(0,n.kt)("h4",{id:"parameters-15"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"points"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"Points to transform")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"matrix"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Matrix")),(0,n.kt)("td",{parentName:"tr",align:null},"Transform matrix"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"validatebatching----boolean"},"validateBatching: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," boolean"))),(0,n.kt)("p",null,"Test geometry for batching process."),(0,n.kt)("h4",{id:"returns-14"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null))}p.isMDXComponent=!0}}]);