"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[1810],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=l,k=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),l=(n(67294),n(3905));const a={id:"PIXI.Filter.pixi_core",title:"Class: PIXI.Filter",sidebar_label:"PIXI.Filter",custom_edit_url:null},i=void 0,o={unversionedId:"api/classes/PIXI.Filter.pixi_core",id:"api/classes/PIXI.Filter.pixi_core",title:"Class: PIXI.Filter",description:"@pixi/core.Filter",source:"@site/docs/api/classes/PIXI.Filter.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.Filter.pixi_core",permalink:"/api/classes/PIXI.Filter.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.Filter.pixi_core",title:"Class: PIXI.Filter",sidebar_label:"PIXI.Filter",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.FillStyle",permalink:"/api/classes/PIXI.FillStyle.pixi_graphics"},next:{title:"PIXI.FilterSystem",permalink:"/api/classes/PIXI.FilterSystem.pixi_core"}},u={},p=[{value:"Usage",id:"usage",level:3},{value:"Previous Version Differences",id:"previous-version-differences",level:3},{value:"Frames",id:"frames",level:3},{value:"Built-in Uniforms",id:"built-in-uniforms",level:3},{value:"Additional Information",id:"additional-information",level:3},{value:"new PIXI.Filter: <span><code>(vertexSrc: string, fragmentSrc: string, uniforms: Dict&lt;any&gt;) </code></span>",id:"new-pixifilter-vertexsrc-string-fragmentsrc-string-uniforms-dictany-",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Extends",id:"extends",level:2},{value:"Members",id:"members",level:2},{value:"defaultFragmentSrc: <span><code>string</code></span>",id:"defaultfragmentsrc-string",level:3},{value:"defaultMultisample: <span><code>PIXI.MSAA_QUALITY</code></span>",id:"defaultmultisample-piximsaa_quality",level:3},{value:"defaultResolution: <span><code>number</code></span>",id:"defaultresolution-number",level:3},{value:"defaultVertexSrc: <span><code>string</code></span>",id:"defaultvertexsrc-string",level:3},{value:"SOURCE_KEY_MAP: <span><code>Dict&lt;string&gt;</code></span>",id:"source_key_map-dictstring",level:3},{value:"autoFit: <span><code>boolean</code></span>",id:"autofit-boolean",level:3},{value:"blendMode: <span><code>BLEND_MODES</code></span>",id:"blendmode-blend_modes",level:3},{value:"enabled: <span><code>boolean</code></span>",id:"enabled-boolean",level:3},{value:"legacy: <span><code>boolean</code></span>",id:"legacy-boolean",level:3},{value:"multisample: <span><code>MSAA_QUALITY</code></span>",id:"multisample-msaa_quality",level:3},{value:"padding: <span><code>number</code></span>",id:"padding-number",level:3},{value:"program: <span><code>Program</code></span>",id:"program-program",level:3},{value:"resolution: <span><code>number</code></span>",id:"resolution-number",level:3},{value:"state: <span><code>State</code></span>",id:"state-state",level:3},{value:"uniforms: <span><code>Dict&lt;any&gt;</code></span>",id:"uniforms-dictany",level:3},{value:"Methods",id:"methods",level:2},{value:"apply: <span><code>(filterManager: PIXI.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, _currentState: object) -&gt; void</code></span>",id:"apply-filtermanager-pixifiltersystem-input-pixirendertexture-output-pixirendertexture-clearmode-pixiclear_modes-_currentstate-object---void",level:3},{value:"Parameters:",id:"parameters-1",level:4}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".Filter"),(0,l.kt)("p",null,"A filter is a special shader that applies post-processing effects to an input texture and writes into an output render-target."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"http://pixijs.io/examples/#/filters/blur-filter.js"},"Example")," of the ",(0,l.kt)("a",{parentName:"p",href:"../classes/PIXI.BlurFilter.pixi_filter_blur"},"BlurFilter"),"."),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Filters can be applied to any DisplayObject or Container. PixiJS' ",(0,l.kt)("inlineCode",{parentName:"p"},"FilterSystem")," renders the container into temporary Framebuffer, then filter renders it to the screen. Multiple filters can be added to the ",(0,l.kt)("inlineCode",{parentName:"p"},"filters")," array property and stacked on each other."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { Container, Filter } from 'pixi.js';\nconst filter = new Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\nconst container = new Container();\ncontainer.filters = [filter];\n\n")),(0,l.kt)("h3",{id:"previous-version-differences"},"Previous Version Differences"),(0,l.kt)("p",null,"In PixiJS ",(0,l.kt)("strong",{parentName:"p"},"v3"),", a filter was always applied to ",(0,l.kt)("em",{parentName:"p"},"whole screen"),"."),(0,l.kt)("p",null,"In PixiJS ",(0,l.kt)("strong",{parentName:"p"},"v4"),", a filter can be applied ",(0,l.kt)("em",{parentName:"p"},"only part of the screen"),". Developers had to create a set of uniforms to deal with coordinates."),(0,l.kt)("p",null,"In PixiJS ",(0,l.kt)("strong",{parentName:"p"},"v5")," combines ",(0,l.kt)("em",{parentName:"p"},"both approaches"),". Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers, bringing those extra uniforms into account."),(0,l.kt)("p",null,"Also be aware that we have changed default vertex shader, please consult ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/wiki/v5-Creating-filters"},"Wiki"),"."),(0,l.kt)("h3",{id:"frames"},"Frames"),(0,l.kt)("p",null,"The following table summarizes the coordinate spaces used in the filtering pipeline",":"),(0,l.kt)("p",null,"|"," Coordinate Space    ","|"," Description                                                                                                                                                    ","|","\n","|"," ------------------- ","|"," -------------------------------------------------------------------------------------------------------------------------------------------------------------- ","|","\n","|"," Texture Coordinates ","|"," The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along both axes.                                  ","|","\n","|"," World Space         ","|"," A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).                                                         ","|","\n","|"," Physical Pixels     ","|"," This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture coordinates by the dimensions of the texture. ","|"),(0,l.kt)("h3",{id:"built-in-uniforms"},"Built-in Uniforms"),(0,l.kt)("p",null,"PixiJS viewport uses screen (CSS) coordinates, ",(0,l.kt)("inlineCode",{parentName:"p"},"(0, 0, renderer.screen.width, renderer.screen.height)"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"projectionMatrix")," uniform maps it to the gl viewport."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"uSampler")),(0,l.kt)("p",null,"The most important uniform is the input texture that container was rendered into.",(0,l.kt)("em",{parentName:"p"},"Important note",":"," as with all Framebuffers in PixiJS, both input and output are premultiplied by alpha.")),(0,l.kt)("p",null,"By default, input normalized coordinates are passed to fragment shader with ",(0,l.kt)("inlineCode",{parentName:"p"},"vTextureCoord"),". Use it to sample the input."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { Filter } from 'pixi.js';\nconst fragment = `\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nvoid main(void)\n&#123;\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n&#125;\n`;\n\nconst myFilter = new Filter(null, fragment);\n\n")),(0,l.kt)("p",null,"This filter is just one uniform less than ",(0,l.kt)("a",{parentName:"p",href:"../classes/PIXI.AlphaFilter.pixi_filter_alpha"},"AlphaFilter"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"outputFrame")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"outputFrame")," holds the rectangle where filter is applied in screen (CSS) coordinates. It's the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"renderer.screen")," for a fullscreen filter. Only a part of ",(0,l.kt)("inlineCode",{parentName:"p"},"outputFrame.zw")," size of temporary Framebuffer is used,",(0,l.kt)("inlineCode",{parentName:"p"},"(0, 0, outputFrame.width, outputFrame.height)"),","),(0,l.kt)("p",null,"Filters uses this quad to normalized (0-1) space, its passed into ",(0,l.kt)("inlineCode",{parentName:"p"},"aVertexPosition")," attribute. To calculate vertex position in screen space using normalized (0-1) space",":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"inputSize")),(0,l.kt)("p",null,"Temporary framebuffer is different, it can be either the size of screen, either power-of-two. The ",(0,l.kt)("inlineCode",{parentName:"p"},"inputSize.xy")," are size of temporary framebuffer that holds input. The ",(0,l.kt)("inlineCode",{parentName:"p"},"inputSize.zw")," is inverted, it's a shortcut to evade division inside the shader."),(0,l.kt)("p",null,"Set ",(0,l.kt)("inlineCode",{parentName:"p"},"inputSize.xy = outputFrame.zw")," for a fullscreen filter."),(0,l.kt)("p",null,"To calculate input normalized coordinate, you have to map it to filter normalized space. Multiply by ",(0,l.kt)("inlineCode",{parentName:"p"},"outputFrame.zw")," to get input coordinate. Divide by ",(0,l.kt)("inlineCode",{parentName:"p"},"inputSize.xy")," to get input normalized coordinate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\n}\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"resolution")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"resolution")," is the ratio of screen (CSS) pixels to real pixels."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"inputPixel")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"inputPixel.xy")," is the size of framebuffer in real pixels, same as ",(0,l.kt)("inlineCode",{parentName:"p"},"inputSize.xy * resolution")," ",(0,l.kt)("inlineCode",{parentName:"p"},"inputPixel.zw")," is inverted ",(0,l.kt)("inlineCode",{parentName:"p"},"inputPixel.xy"),"."),(0,l.kt)("p",null,"It's handy for filters that use neighbour pixels, like ",(0,l.kt)("a",{parentName:"p",href:"../classes/PIXI.FXAAFilter.pixi_filter_fxaa"},"FXAAFilter"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"inputClamp")),(0,l.kt)("p",null,"If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour. For displacements, coordinates has to be clamped."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"inputClamp.xy")," is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer",(0,l.kt)("inlineCode",{parentName:"p"},"inputClamp.zw")," is bottom-right pixel center."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw));\n\n")),(0,l.kt)("p",null,"Or",":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw));\n\n")),(0,l.kt)("h3",{id:"additional-information"},"Additional Information"),(0,l.kt)("p",null,"Complete documentation on Filter usage is located in the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/wiki/v5-Creating-filters"},"Wiki"),"."),(0,l.kt)("p",null,"Since PixiJS only had a handful of built-in filters, additional filters can be downloaded ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixi-filters"},"here")," from the PixiJS Filters repository."),(0,l.kt)("p",null,"// TODO: @see"),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"new-pixifilter-vertexsrc-string-fragmentsrc-string-uniforms-dictany-"},"new PIXI.Filter: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"(vertexSrc",":"," string, fragmentSrc",":"," string, uniforms",":"," Dict","<","any",">",") "))),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"vertexSrc"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null)),(0,l.kt)("td",{parentName:"tr",align:null},"The source of the vertex shader.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fragmentSrc"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null)),(0,l.kt)("td",{parentName:"tr",align:null},"The source of the fragment shader.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uniforms"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Dict","<","any",">")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null)),(0,l.kt)("td",{parentName:"tr",align:null},"Custom uniforms to use to augment the built-in ones."))))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"extends"},"Extends"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../classes/PIXI.Shader.pixi_core"},"PIXI.Shader"))),(0,l.kt)("h2",{id:"members"},"Members"),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"defaultfragmentsrc-string"},"defaultFragmentSrc: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"string"))),(0,l.kt)("p",null,"The default fragment shader source")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"defaultmultisample-piximsaa_quality"},"defaultMultisample: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"PIXI.MSAA_QUALITY"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,l.kt)("code",null,"PIXI.MSAA_QUALITY.NONE"))),(0,l.kt)("p",null,"Default filter samples for any filter.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"defaultresolution-number"},"defaultResolution: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"number"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,l.kt)("code",null,"1"))),(0,l.kt)("p",null,"Default filter resolution for any filter.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"defaultvertexsrc-string"},"defaultVertexSrc: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"string"))),(0,l.kt)("p",null,"The default vertex shader source")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"source_key_map-dictstring"},"SOURCE_KEY_MAP: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"Dict","<","string",">"))),(0,l.kt)("p",null,"Used for caching shader IDs.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"autofit-boolean"},"autoFit: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"boolean"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,l.kt)("code",null,"true"))),(0,l.kt)("p",null,"If enabled, PixiJS will fit the filter area into boundaries for better performance. Switch it off if it does not work for specific shader.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"blendmode-blend_modes"},"blendMode: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"BLEND_MODES"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,l.kt)("code",null,"PIXI.BLEND_MODES.NORMAL"))),(0,l.kt)("p",null,"Sets the blend mode of the filter.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"enabled-boolean"},"enabled: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"boolean"))),(0,l.kt)("p",null,"If enabled is true the filter is applied, if false it will not.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"legacy-boolean"},"legacy: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"boolean"))),(0,l.kt)("p",null,"Legacy filters use position and uvs from attributes (set by filter system)")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"multisample-msaa_quality"},"multisample: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"MSAA_QUALITY"))),(0,l.kt)("p",null,"The samples override of the filter instance.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"padding-number"},"padding: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"number"))),(0,l.kt)("p",null,"The padding of the filter. Some filters require extra space to breath such as a blur. Increasing this will add extra width and height to the bounds of the object that the filter is applied to.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"program-program"},"program: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"Program"))),(0,l.kt)("p",null,"Program that the shader uses.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"resolution-number"},"resolution: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"number"))),(0,l.kt)("p",null,"The resolution of the filter. Setting this to be lower will lower the quality but increase the performance of the filter.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"state-state"},"state: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"State"))),(0,l.kt)("p",null,"The WebGL state the filter requires to render.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"uniforms-dictany"},"uniforms: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"Dict","<","any",">"))),(0,l.kt)("p",null,"Shader uniform values, shortcut for ",(0,l.kt)("inlineCode",{parentName:"p"},"uniformGroup.uniforms"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"apply-filtermanager-pixifiltersystem-input-pixirendertexture-output-pixirendertexture-clearmode-pixiclear_modes-_currentstate-object---void"},"apply: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"(filterManager",":"," PIXI.FilterSystem, input",":"," PIXI.RenderTexture, output",":"," PIXI.RenderTexture, clearMode",":"," PIXI.CLEAR_MODES, _currentState",":"," object) -",">"," void"))),(0,l.kt)("p",null,"Applies the filter"),(0,l.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"filterManager"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"PIXI.FilterSystem")),(0,l.kt)("td",{parentName:"tr",align:null},"The renderer to retrieve the filter from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"PIXI.RenderTexture")),(0,l.kt)("td",{parentName:"tr",align:null},"The input render target.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"output"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"PIXI.RenderTexture")),(0,l.kt)("td",{parentName:"tr",align:null},"The target to output to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"clearMode"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"PIXI.CLEAR_MODES")),(0,l.kt)("td",{parentName:"tr",align:null},"Should the output be cleared before rendering to it.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_currentState"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"object")),(0,l.kt)("td",{parentName:"tr",align:null},"It's current state of filter. There are some useful properties in the currentState ",":"," target, filters, sourceFrame, destinationFrame, renderTarget, resolution"))))),(0,l.kt)("hr",null))}d.isMDXComponent=!0}}]);