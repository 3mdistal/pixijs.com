"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[4009],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(n),k=l,c=p["".concat(s,".").concat(k)]||p[k]||m[k]||a;return n?r.createElement(c,i(i({ref:t},u),{},{components:n})):r.createElement(c,i({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},67833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(87462),l=(n(67294),n(3905));const a={id:"PIXI.IRenderer.pixi_core",title:"Interface: PIXI.IRenderer",sidebar_label:"PIXI.IRenderer",custom_edit_url:null},i=void 0,o={unversionedId:"api/interfaces/PIXI.IRenderer.pixi_core",id:"api/interfaces/PIXI.IRenderer.pixi_core",title:"Interface: PIXI.IRenderer",description:"@pixi/core.IRenderer",source:"@site/docs/api/interfaces/PIXI.IRenderer.pixi_core.mdx",sourceDirName:"api/interfaces",slug:"/api/interfaces/PIXI.IRenderer.pixi_core",permalink:"/api/interfaces/PIXI.IRenderer.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.IRenderer.pixi_core",title:"Interface: PIXI.IRenderer",sidebar_label:"PIXI.IRenderer",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.IRenderableObject",permalink:"/api/interfaces/PIXI.IRenderableObject.pixi_core"},next:{title:"PIXI.IRendererOptions",permalink:"/api/interfaces/PIXI.IRendererOptions.pixi_core"}},s={},d=[{value:"Summary",id:"summary",level:2},{value:"Extends",id:"extends",level:2},{value:"Members",id:"members",level:2},{value:"runners: <span><code>{ key: string: Runner }</code></span>",id:"runners--key-string-runner-",level:3},{value:"height: <span><code>number</code></span>",id:"height-number",level:3},{value:"lastObjectRendered: <span><code>IRenderableObject</code></span>",id:"lastobjectrendered-irenderableobject",level:3},{value:"options: <span><code>PIXI.IRendererOptions</code></span>",id:"options-pixiirendereroptions",level:3},{value:"plugins: <span><code>IRendererPlugins</code></span>",id:"plugins-irendererplugins",level:3},{value:"rendererLogId: <span><code>string</code></span>",id:"rendererlogid-string",level:3},{value:"renderingToScreen: <span><code>boolean</code></span>",id:"renderingtoscreen-boolean",level:3},{value:"resolution: <span><code>number</code></span>",id:"resolution-number",level:3},{value:"screen: <span><code>Rectangle</code></span>",id:"screen-rectangle",level:3},{value:"type: <span><code>RENDERER_TYPE</code></span>",id:"type-renderer_type",level:3},{value:"view: <span><code>VIEW</code></span>",id:"view-view",level:3},{value:"width: <span><code>number</code></span>",id:"width-number",level:3},{value:"Methods",id:"methods",level:2},{value:"addRunners: <span><code>(runnerIds: string[]) -&gt; void</code></span>",id:"addrunners-runnerids-string---void",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"addSystem: <span><code>(ClassRef: ISystemConstructor&lt;R&gt;, name: string) -&gt; this</code></span>",id:"addsystem-classref-isystemconstructorr-name-string---this",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns",level:4},{value:"destroy: <span><code>() -&gt; void</code></span>",id:"destroy----void",level:3},{value:"emitWithCustomOptions: <span><code>(runner: Runner, options: Record&lt;string, unknown&gt;) -&gt; void</code></span>",id:"emitwithcustomoptions-runner-runner-options-recordstring-unknown---void",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"setup: <span><code>(config: ISystemConfig&lt;R&gt;) -&gt; void</code></span>",id:"setup-config-isystemconfigr---void",level:3},{value:"Parameters:",id:"parameters-3",level:4}],u={toc:d};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".IRenderer"),(0,l.kt)("p",null,"Starard Interface for a Pixi renderer."),(0,l.kt)("p",null,"// TODO: @see"),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Properties"),(0,l.kt)("p",null,(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"runners"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"{"," ","[key",":"," string]",":"," Runner ","}")),(0,l.kt)("td",{parentName:"tr",align:null},"a collection of runners defined by the user")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"height"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"number")),(0,l.kt)("td",{parentName:"tr",align:null},"the height of the screen")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lastObjectRendered"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"IRenderableObject")),(0,l.kt)("td",{parentName:"tr",align:null},"the last object rendered by the renderer. Useful for other plugins like interaction managers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"PIXI.IRendererOptions")),(0,l.kt)("td",{parentName:"tr",align:null},"The options passed in to create a new instance of the renderer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"plugins"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"IRendererPlugins")),(0,l.kt)("td",{parentName:"tr",align:null},"Collection of plugins")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rendererLogId"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},"When logging Pixi to the console, this is the name we will show")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderingToScreen"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Flag if we are rendering to the screen vs renderTexture")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resolution"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"number")),(0,l.kt)("td",{parentName:"tr",align:null},"The resolution / device pixel ratio of the renderer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"screen"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Rectangle")),(0,l.kt)("td",{parentName:"tr",align:null},"Measurements of the screen. (0, 0, screenWidth, screenHeight). Its safe to use as filterArea or hitArea for the whole stage.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"RENDERER_TYPE")),(0,l.kt)("td",{parentName:"tr",align:null},"The type of the renderer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"view"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"VIEW")),(0,l.kt)("td",{parentName:"tr",align:null},"The canvas element that everything is drawn to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"width"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"number")),(0,l.kt)("td",{parentName:"tr",align:null},"the width of the screen")))))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Methods"),(0,l.kt)("p",null,(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Params"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addRunners"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"(runnerIds",":"," string[]) ")),(0,l.kt)("td",{parentName:"tr",align:null},"Create a bunch of runners based of a collection of ids")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addSystem"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"(ClassRef",":"," ISystemConstructor","<","R",">",", name",":"," string) ")),(0,l.kt)("td",{parentName:"tr",align:null},"Add a new system to the renderer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"destroy"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"() ")),(0,l.kt)("td",{parentName:"tr",align:null},"destroy the all runners and systems. Its apps job to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"emitWithCustomOptions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"(runner",":"," Runner, options",":"," Record","<","string, unknown",">",") ")),(0,l.kt)("td",{parentName:"tr",align:null},"A function that will run a runner and call the runners function but pass in different options to each system based on there name.","<","br /",">","<","br /",">","E.g. If you have two systems added called ",(0,l.kt)("inlineCode",{parentName:"td"},"systemA")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"systemB")," you could call do the following",":","<","br /",">","<","br /",">",(0,l.kt)("inlineCode",{parentName:"td"},"<br />system.emitWithCustomOptions(init, {<br />    systemA: {...optionsForA},<br />    systemB: {...optionsForB},<br />});<br /><br />"),"<","br /",">","<","br /",">",(0,l.kt)("inlineCode",{parentName:"td"},"init")," would be called on system A passing ",(0,l.kt)("inlineCode",{parentName:"td"},"optionsForA")," and on system B passing ",(0,l.kt)("inlineCode",{parentName:"td"},"optionsForB"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setup"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"(config",":"," ISystemConfig","<","R",">",") ")),(0,l.kt)("td",{parentName:"tr",align:null},"Set up a system with a collection of SystemClasses and runners. Systems are attached dynamically to this class when added.")))))),(0,l.kt)("h2",{id:"extends"},"Extends"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../classes/PIXI.SystemManager.pixi_core"},"PIXI.SystemManager")),(0,l.kt)("li",{parentName:"ul"},"GlobalMixins.IRenderer")),(0,l.kt)("h2",{id:"members"},"Members"),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"runners--key-string-runner-"},"runners: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"{"," ","[key",":"," string]",":"," Runner ","}"))),(0,l.kt)("p",null,"a collection of runners defined by the user")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"height-number"},"height: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"number"))),(0,l.kt)("p",null,"the height of the screen")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"lastobjectrendered-irenderableobject"},"lastObjectRendered: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"IRenderableObject"))),(0,l.kt)("p",null,"the last object rendered by the renderer. Useful for other plugins like interaction managers")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"options-pixiirendereroptions"},"options: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"PIXI.IRendererOptions"))),(0,l.kt)("p",null,"The options passed in to create a new instance of the renderer.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"plugins-irendererplugins"},"plugins: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"IRendererPlugins"))),(0,l.kt)("p",null,"Collection of plugins")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"rendererlogid-string"},"rendererLogId: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"string"))),(0,l.kt)("p",null,"When logging Pixi to the console, this is the name we will show")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"renderingtoscreen-boolean"},"renderingToScreen: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"boolean"))),(0,l.kt)("p",null,"Flag if we are rendering to the screen vs renderTexture")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"resolution-number"},"resolution: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"number"))),(0,l.kt)("p",null,"The resolution / device pixel ratio of the renderer.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"screen-rectangle"},"screen: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"Rectangle"))),(0,l.kt)("p",null,"Measurements of the screen. (0, 0, screenWidth, screenHeight). Its safe to use as filterArea or hitArea for the whole stage.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"type-renderer_type"},"type: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"RENDERER_TYPE"))),(0,l.kt)("p",null,"The type of the renderer.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"view-view"},"view: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"VIEW"))),(0,l.kt)("p",null,"The canvas element that everything is drawn to.")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"width-number"},"width: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"number"))),(0,l.kt)("p",null,"the width of the screen")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"addrunners-runnerids-string---void"},"addRunners: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"(runnerIds",":"," string[]) -",">"," void"))),(0,l.kt)("p",null,"Create a bunch of runners based of a collection of ids"),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"runnerIds"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string[]")),(0,l.kt)("td",{parentName:"tr",align:null},"the runner ids to add"))))),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"addsystem-classref-isystemconstructorr-name-string---this"},"addSystem: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"(ClassRef",":"," ISystemConstructor","<","R",">",", name",":"," string) -",">"," this"))),(0,l.kt)("p",null,"Add a new system to the renderer."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ClassRef"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"ISystemConstructor","<","R",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Class reference")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Property name for system, if not specified will use a static ",(0,l.kt)("inlineCode",{parentName:"td"},"name")," property on the class itself. This name will be assigned as s property on the Renderer so make sure it doesn't collide with properties on Renderer.")))),(0,l.kt)("h4",{id:"returns"},"Returns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"this")),(0,l.kt)("td",{parentName:"tr",align:null},"Return instance of renderer"))))),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"destroy----void"},"destroy: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"() -",">"," void"))),(0,l.kt)("p",null,"destroy the all runners and systems. Its apps job to")),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"emitwithcustomoptions-runner-runner-options-recordstring-unknown---void"},"emitWithCustomOptions: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"(runner",":"," Runner, options",":"," Record","<","string, unknown",">",") -",">"," void"))),(0,l.kt)("p",null,"A function that will run a runner and call the runners function but pass in different options to each system based on there name."),(0,l.kt)("p",null,"E.g. If you have two systems added called ",(0,l.kt)("inlineCode",{parentName:"p"},"systemA")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"systemB")," you could call do the following",":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"system.emitWithCustomOptions(init, {\n    systemA: {...optionsForA},\n    systemB: {...optionsForB},\n});\n\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"init")," would be called on system A passing ",(0,l.kt)("inlineCode",{parentName:"p"},"optionsForA")," and on system B passing ",(0,l.kt)("inlineCode",{parentName:"p"},"optionsForB"),"."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"runner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Runner")),(0,l.kt)("td",{parentName:"tr",align:null},"the runner to target")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"Record","<","string, unknown",">")),(0,l.kt)("td",{parentName:"tr",align:null},"key value options for each system"))))),(0,l.kt)("hr",null),(0,l.kt)("article",null,(0,l.kt)("h3",{id:"setup-config-isystemconfigr---void"},"setup: ",(0,l.kt)("span",null,(0,l.kt)("code",null,"(config",":"," ISystemConfig","<","R",">",") -",">"," void"))),(0,l.kt)("p",null,"Set up a system with a collection of SystemClasses and runners. Systems are attached dynamically to this class when added."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"config"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"ISystemConfig","<","R",">")),(0,l.kt)("td",{parentName:"tr",align:null},"the config for the system manager"))))),(0,l.kt)("hr",null))}p.isMDXComponent=!0}}]);