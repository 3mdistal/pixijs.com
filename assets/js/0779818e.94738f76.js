"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[6686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},l),{},{components:t})):r.createElement(f,o({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},18989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={hide_table_of_contents:!0},o="Mouse Blending",s={unversionedId:"examples/filters-advanced/mouse-blending",id:"examples/filters-advanced/mouse-blending",title:"Mouse Blending",description:"",source:"@site/docs/examples/filters-advanced/mouse-blending.md",sourceDirName:"examples/filters-advanced",slug:"/examples/filters-advanced/mouse-blending",permalink:"/examples/filters-advanced/mouse-blending",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/filters-advanced/mouse-blending.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Displacement Map - Flag",permalink:"/examples/filters-basic/displacement-map-flag"},next:{title:"Custom Filter",permalink:"/examples/filters-advanced/custom"}},c={},p=[],l={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mouse-blending"},"Mouse Blending"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n/**\n * https://github.com/pixijs/pixi.js/wiki/v5-Creating-Filters\n */\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\n// Create background image\nconst background = PIXI.Sprite.from('https://v2-pixijs.com/assets/bg_grass.jpg');\nbackground.width = app.screen.width;\nbackground.height = app.screen.height;\napp.stage.addChild(background);\n\n// NOTE: this shader wont work on old devices where mediump precision is forced in fragment shader\n// because v5 default vertex shader uses `inputSize` in it. Same uniform in fragment and vertex shader\n// cant have different precision :(\n\nconst shaderFrag = `\nprecision highp float;\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 mouse;\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\nuniform float time;\n\nvoid main() {\n  vec2 screenPos = vTextureCoord * inputSize.xy + outputFrame.xy;\n  if (length(mouse - screenPos) < 25.0) {\n      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0) * 0.7; //yellow circle, alpha=0.7\n  } else {\n      gl_FragColor = vec4( sin(time), (mouse.xy - outputFrame.xy) / outputFrame.zw, 1.0) * 0.5; // blend with underlying image, alpha=0.5\n  }\n}\n`;\n\nconst container = new PIXI.Container();\ncontainer.filterArea = new PIXI.Rectangle(100, 100, app.screen.width - 200, app.screen.height - 200);\napp.stage.addChild(container);\nconst filter = new PIXI.Filter(null, shaderFrag, {\n    mouse: new PIXI.Point(),\n});\ncontainer.filters = [filter];\n\napp.stage.hitArea = app.screen;\napp.stage.interactive = true;\napp.stage.on('pointermove', (event) => {\n    filter.uniforms.mouse.copyFrom(event.global);\n});\n")))}u.isMDXComponent=!0}}]);