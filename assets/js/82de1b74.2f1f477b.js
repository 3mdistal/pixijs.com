"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[74],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var l=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,l,r=function(e,t){if(null==e)return{};var a,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=l.createContext({}),i=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=i(e.components);return l.createElement(s.Provider,{value:t},e.children)},k="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),k=i(a),m=r,d=k["".concat(s,".").concat(m)]||k[m]||c[m]||n;return a?l.createElement(d,o(o({ref:t},u),{},{components:a})):l.createElement(d,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,o=new Array(n);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[k]="string"==typeof e?e:r,o[1]=p;for(var i=2;i<n;i++)o[i]=a[i];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}m.displayName="MDXCreateElement"},75163:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>n,metadata:()=>p,toc:()=>i});var l=a(87462),r=(a(67294),a(3905));const n={id:"PIXI.MaskData.pixi_core",title:"Class: PIXI.MaskData",sidebar_label:"PIXI.MaskData",custom_edit_url:null},o=void 0,p={unversionedId:"api/classes/PIXI.MaskData.pixi_core",id:"api/classes/PIXI.MaskData.pixi_core",title:"Class: PIXI.MaskData",description:"@pixi/core.MaskData",source:"@site/docs/api/classes/PIXI.MaskData.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.MaskData.pixi_core",permalink:"/api/classes/PIXI.MaskData.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.MaskData.pixi_core",title:"Class: PIXI.MaskData",sidebar_label:"PIXI.MaskData",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.LineStyle",permalink:"/api/classes/PIXI.LineStyle.pixi_graphics"},next:{title:"PIXI.MaskSystem",permalink:"/api/classes/PIXI.MaskSystem.pixi_core"}},s={},i=[{value:"Constructor:",id:"constructor",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Members",id:"members",level:2},{value:"autoDetect",id:"autodetect",level:3},{value:"colorMask",id:"colormask",level:3},{value:"enabled",id:"enabled",level:3},{value:"filter",id:"filter",level:3},{value:"isMaskData",id:"ismaskdata",level:3},{value:"maskObject",id:"maskobject",level:3},{value:"multisample",id:"multisample",level:3},{value:"pooled",id:"pooled",level:3},{value:"resolution",id:"resolution",level:3},{value:"type",id:"type",level:3},{value:"Methods",id:"methods",level:2},{value:"copyCountersOrReset",id:"copycountersorreset",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"reset",id:"reset",level:3}],u={toc:i};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{class:"package-name"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".MaskData")),(0,r.kt)("p",null,"Component for masked elements.\nHolds mask mode and temporary data about current mask."),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"constructor"},"Constructor:"),(0,r.kt)("h4",null,(0,r.kt)("code",null,"new PIXI.MaskData(maskObject: PIXI.DisplayObject) ")),"Create MaskData",(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maskObject"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"PIXI.DisplayObject")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"null")),(0,r.kt)("td",{parentName:"tr",align:null},"object that describes the mask"))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"members"},"Members"),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"autodetect"},"autoDetect"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"boolean")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,r.kt)("code",null,"true")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Whether we know the mask type beforehand")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"colormask"},"colorMask"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"COLOR_MASK_BITS")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Color mask.")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"enabled"},"enabled"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"boolean")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," If enabled is true the mask is applied, if false it will not.")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"filter"},"filter"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"ISpriteMaskFilter")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,r.kt)("code",null,"null")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," The sprite mask filter. If set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", the default sprite mask filter is used.")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"ismaskdata"},"isMaskData"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"boolean")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Indicator of the type (always true for ",(0,r.kt)("a",{parentName:"p",href:"../classes/PIXI.MaskData.pixi_core"},"PIXI.MaskData")," objects)")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"maskobject"},"maskObject"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"PIXI.DisplayObject")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Which element we use to mask")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"multisample"},"multisample"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"MSAA_QUALITY")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,r.kt)("code",null,"PIXI.Filter.defaultMultisample")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Number of samples of the sprite mask filter. If set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", the sample count of the current render target is used.")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"pooled"},"pooled"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"boolean")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Whether it belongs to MaskSystem pool")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"resolution"},"resolution"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"number")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,r.kt)("code",null,"null")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Resolution of the sprite mask filter. If set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", the resolution of the current render target is used.")),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"type"},"type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"MASK_TYPES")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Mask type")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"copycountersorreset"},"copyCountersOrReset"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"(maskAbove",":"," MaskData) -",">"," void")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Copies counters from maskData above, called from pushMask()."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maskAbove"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"MaskData")),(0,r.kt)("td",{parentName:"tr",align:null}))))),(0,r.kt)("hr",null),(0,r.kt)("article",null,(0,r.kt)("h3",{id:"reset"},"reset"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("code",null,"() -",">"," void")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")," Resets the mask data after popMask().")),(0,r.kt)("hr",null))}k.isMDXComponent=!0}}]);