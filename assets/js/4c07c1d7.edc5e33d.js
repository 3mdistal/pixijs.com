"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[3855],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,h=m["".concat(c,".").concat(u)]||m[u]||l[u]||s;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var d=2;d<s;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5896:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const s={hide_table_of_contents:!0,sidebar_position:11},i="Shader Toy Mesh",o={unversionedId:"examples/mesh-and-shaders/shader-toy-mesh",id:"examples/mesh-and-shaders/shader-toy-mesh",title:"Shader Toy Mesh",description:"",source:"@site/docs/examples/mesh-and-shaders/shader-toy-mesh.md",sourceDirName:"examples/mesh-and-shaders",slug:"/examples/mesh-and-shaders/shader-toy-mesh",permalink:"/examples/mesh-and-shaders/shader-toy-mesh",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/mesh-and-shaders/shader-toy-mesh.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{hide_table_of_contents:!0,sidebar_position:11},sidebar:"examplesSidebar",previous:{title:"Instanced Geometry",permalink:"/examples/mesh-and-shaders/instanced-geometry"},next:{title:"Multi Pass Shader Generated Mesh",permalink:"/examples/mesh-and-shaders/multi-pass-shader-generated-mesh"}},c={},d=[],p={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shader-toy-mesh"},"Shader Toy Mesh"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application({ resizeTo: window });\n\ndocument.body.appendChild(app.view);\n\n// Build geometry.\nconst geometry = new PIXI.Geometry()\n    .addAttribute('aVertexPosition', // the attribute name\n        [-100, -100, // x, y\n            100, -100, // x, y\n            100, 100,\n            -100, 100], // x, y\n        2) // the size of the attribute\n    .addAttribute('aUvs', // the attribute name\n        [0, 0, // u, v\n            1, 0, // u, v\n            1, 1,\n            0, 1], // u, v\n        2) // the size of the attribute\n    .addIndex([0, 1, 2, 0, 2, 3]);\n\nconst vertexSrc = `\n\n    precision mediump float;\n\n    attribute vec2 aVertexPosition;\n    attribute vec2 aUvs;\n\n    uniform mat3 translationMatrix;\n    uniform mat3 projectionMatrix;\n\n    varying vec2 vUvs;\n\n    void main() {\n\n        vUvs = aUvs;\n        gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    }`;\n\nconst fragmentSrc = `\n//Based on this: https://www.shadertoy.com/view/wtlSWX\nprecision mediump float;\n\nvarying vec2 vUvs;\n\nuniform sampler2D noise;\nuniform float time;\n\n// Distance function. Just calculates the height (z) from x,y plane with really simple length check.\n// Its not exact as there could be shorter distances.\nvec2 dist(vec3 p)\n{\n    float id = floor(p.x)+floor(p.y);\n    id = mod(id, 2.);\n    float h = texture2D(noise, vec2(p.x, p.y)*0.04).r*5.1;\n    return vec2(h-p.z,id);\n}\n\n//Light calculation.\nvec3 calclight(vec3 p, vec3 rd)\n{\n    vec2 eps = vec2( 0., 0.001);\n    vec3 n = normalize( vec3(\n    dist(p+eps.yxx).x - dist(p-eps.yxx).x,\n    dist(p+eps.xyx).x - dist(p-eps.xyx).x,\n    dist(p+eps.xxy).x - dist(p-eps.xxy).x\n    ));\n\n    vec3 d = vec3( max( 0., dot( -rd ,n)));\n\n    return d;\n}\n\nvoid main()\n{\n    vec2 uv = vec2(vUvs.x,1.-vUvs.y);\n    uv *=2.;\n    uv-=1.;\n\n    vec3 cam = vec3(0.,time -2., -3.);\n    vec3 target = vec3(sin(time)*0.1, time+cos(time)+2., 0. );\n    float fov = 2.2;\n    vec3 forward = normalize( target - cam);\n    vec3 up = normalize(cross( forward, vec3(0., 1.,0.)));\n    vec3 right = normalize( cross( up, forward));\n    vec3 raydir = normalize(vec3( uv.x *up + uv.y * right + fov*forward));\n\n    //Do the raymarch\n    vec3 col = vec3(0.);\n    float t = 0.;\n    for( int i = 0; i < 100; i++)\n    {\n    vec3 p = t * raydir + cam;\n    vec2 d = dist(p);\n    t+=d.x*0.5;//Jump only half of the distance as height function used is not really the best for heightmaps.\n    if(d.x < 0.001)\n    {\n        vec3 bc = d.y < 0.5 ? vec3(1.0, .8, 0.) :\n                vec3(0.8,0.0, 1.0);\n        col = vec3( 1.) * calclight(p, raydir) * (1. - t/150.) *bc;\n        break;\n    }\n    if(t > 1000.)\n    {\n        break;\n    }\n    }\n    gl_FragColor = vec4(col, 1.);\n}`;\n\nconst uniforms = {\n    noise: PIXI.Texture.from('https://pixijs.com/assets/perlin.jpg'),\n    time: 0,\n};\n// Make sure repeat wrap is used and no mipmapping.\n\nuniforms.noise.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT;\nuniforms.noise.baseTexture.mipmap = false;\n\n// Build the shader and the quad.\nconst shader = PIXI.Shader.from(vertexSrc, fragmentSrc, uniforms);\nconst quad = new PIXI.Mesh(geometry, shader);\n\nquad.position.set(400, 300);\nquad.scale.set(2);\n\napp.stage.addChild(quad);\n\n// start the animation..\nlet time = 0;\n\napp.ticker.add((delta) =>\n{\n    time += 1 / 60;\n    quad.shader.uniforms.time = time;\n    quad.scale.set(Number(Math.cos(time)) + 2, Number(Math.sin(time * 0.7)) + 2);\n});\n")))}m.isMDXComponent=!0}}]);