"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[24192],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},l=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},y=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,s=t.parentName,l=p(t,["components","mdxType","originalType","parentName"]),u=c(n),y=o,d=u["".concat(s,".").concat(y)]||u[y]||m[y]||i;return n?r.createElement(d,a(a({ref:e},l),{},{components:n})):r.createElement(d,a({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=y;var p={};for(var s in e)hasOwnProperty.call(e,s)&&(p[s]=e[s]);p.originalType=t,p[u]="string"==typeof t?t:o,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},87184:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={hide_table_of_contents:!0},a="GSAP 2 Trail",p={unversionedId:"examples/gsap2-interaction/gsap2-trail",id:"examples/gsap2-interaction/gsap2-trail",title:"GSAP 2 Trail",description:"",source:"@site/docs/examples/gsap2-interaction/gsap2-trail.md",sourceDirName:"examples/gsap2-interaction",slug:"/examples/gsap2-interaction/gsap2-trail",permalink:"/examples/gsap2-interaction/gsap2-trail",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/gsap2-interaction/gsap2-trail.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"GSAP 2 Filters",permalink:"/examples/gsap2-interaction/gsap2-filters"},next:{title:"GSAP 2 Tint",permalink:"/examples/gsap2-interaction/gsap2-tint"}},s={},c=[],l={toc:c};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gsap-2-trail"},"GSAP 2 Trail"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ background: '#1099bb', resizeTo: window });\ndocument.body.appendChild(app.view);\n\n// We stop Pixi ticker using stop() function because autoStart = false does NOT stop the shared ticker:\n// doc: http://pixijs.download/release/docs/PIXI.Application.html\napp.ticker.stop();\n\n// Now, we use 'tick' from TweenMax (You can use TweenLite too)\nTweenMax.ticker.addEventListener('tick', () => {\n    app.ticker.update();\n});\n\n// Get the texture for rope.\nconst trailTexture = PIXI.Texture.from('https://v2-pixijs.com/assets/trail.png');\nlet historyX;\nlet historyY;\n// historySize determines how long the trail will be.\nconst historySize = 50;\n// ropeSize determines how smooth the trail will be.\nconst ropeSize = 100;\nconst points = [];\n\nfunction createHistorySize() {\n    historyX = [];\n    historyY = [];\n    for (let i = 0; i < historySize; i++) {\n        historyX.push(0);\n        historyY.push(0);\n    }\n}\n\n// Create rope points.\nfor (let i = 0; i < ropeSize; i++) {\n    points.push(new PIXI.Point(0, 0));\n}\n\n// Create the rope\nconst rope = new PIXI.SimpleRope(trailTexture, points);\n\n// Set the blendmode\nrope.blendmode = PIXI.BLEND_MODES.ADD;\n\napp.stage.addChild(rope);\n\nconst counter = { x: 0, y: 0 };\nconst time = 5;\n\nplayTrail();\n\nfunction playTrail() {\n    // Create history array.\n    createHistorySize();\n    counter.x = 0;\n    counter.y = 0;\n    TweenMax.to(counter, time, {\n        x: 500, y: 500, onUpdateParams: [counter], onUpdate: updateTrail, onComplete: playTrail,\n    });\n}\n\nfunction updateTrail(param) {\n    // Update the mouse values to history\n    historyX.pop();\n    historyX.unshift(param.x);\n    historyY.pop();\n    historyY.unshift(param.y);\n    // Update the points to correspond with history.\n    for (let i = 0; i < ropeSize; i++) {\n        const p = points[i];\n\n        // Smooth the curve with cubic interpolation to prevent sharp edges.\n        const ix = cubicInterpolation(historyX, i / ropeSize * historySize);\n        const iy = cubicInterpolation(historyY, i / ropeSize * historySize);\n\n        p.x = ix;\n        p.y = iy;\n    }\n}\n\n/**\n * Cubic interpolation based on https://github.com/osuushi/Smooth.js\n */\nfunction clipInput(k, arr) {\n    if (k < 0) k = 0;\n    if (k > arr.length - 1) k = arr.length - 1;\n    return arr[k];\n}\n\nfunction getTangent(k, factor, array) {\n    return factor * (clipInput(k + 1, array) - clipInput(k - 1, array)) / 2;\n}\n\nfunction cubicInterpolation(array, t, tangentFactor) {\n    if (tangentFactor == null) tangentFactor = 1;\n\n    const k = Math.floor(t);\n    const m = [getTangent(k, tangentFactor, array), getTangent(k + 1, tangentFactor, array)];\n    const p = [clipInput(k, array), clipInput(k + 1, array)];\n    t -= k;\n    const t2 = t * t;\n    const t3 = t * t2;\n    return (2 * t3 - 3 * t2 + 1) * p[0] + (t3 - 2 * t2 + t) * m[0] + (-2 * t3 + 3 * t2) * p[1] + (t3 - t2) * m[1];\n}\n")))}u.isMDXComponent=!0}}]);