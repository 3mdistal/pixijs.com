"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[1730],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),d=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=d(a),k=n,c=p["".concat(o,".").concat(k)]||p[k]||m[k]||l;return a?r.createElement(c,i(i({ref:t},s),{},{components:a})):r.createElement(c,i({ref:t},s))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=k;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u[p]="string"==typeof e?e:n,i[1]=u;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},63223:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var r=a(87462),n=(a(67294),a(3905));const l={id:"PIXI.BatchGeometry.pixi_core",title:"Class: PIXI.BatchGeometry",sidebar_label:"PIXI.BatchGeometry",custom_edit_url:null},i=void 0,u={unversionedId:"api/classes/PIXI.BatchGeometry.pixi_core",id:"api/classes/PIXI.BatchGeometry.pixi_core",title:"Class: PIXI.BatchGeometry",description:"@pixi/core.BatchGeometry",source:"@site/docs/api/classes/PIXI.BatchGeometry.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.BatchGeometry.pixi_core",permalink:"/api/classes/PIXI.BatchGeometry.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.BatchGeometry.pixi_core",title:"Class: PIXI.BatchGeometry",sidebar_label:"PIXI.BatchGeometry",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.BatchDrawCall",permalink:"/api/classes/PIXI.BatchDrawCall.pixi_core"},next:{title:"PIXI.BatchRenderer",permalink:"/api/classes/PIXI.BatchRenderer.pixi_core"}},o={},d=[{value:"new PIXI.BatchGeometry: <span><code>(_static: boolean) </code></span>",id:"new-pixibatchgeometry-_static-boolean-",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Extends",id:"extends",level:2},{value:"Members",id:"members",level:2},{value:"glVertexArrayObjects: <span><code>object</code></span>",id:"glvertexarrayobjects-object",level:3},{value:"instanceCount: <span><code>number</code></span>",id:"instancecount-number",level:3},{value:"instanced: <span><code>boolean</code></span>",id:"instanced-boolean",level:3},{value:"refCount: <span><code>number</code></span>",id:"refcount-number",level:3},{value:"_buffer: <span><code>Buffer</code></span>",id:"_buffer-buffer",level:3},{value:"_indexBuffer: <span><code>Buffer</code></span>",id:"_indexbuffer-buffer",level:3},{value:"Methods",id:"methods",level:2},{value:"addAttribute: <span><code>(id: string, buffer: PIXI.Buffer | Array&lt;number&gt;, size: number, normalized: boolean, type: TYPES, stride: number, start: number, instance: boolean) -&gt; this</code></span>",id:"addattribute-id-string-buffer-pixibuffer--arraynumber-size-number-normalized-boolean-type-types-stride-number-start-number-instance-boolean---this",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns",level:4},{value:"addIndex: <span><code>(buffer: PIXI.Buffer | Array&lt;number&gt;) -&gt; Geometry</code></span>",id:"addindex-buffer-pixibuffer--arraynumber---geometry",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"clone: <span><code>() -&gt; Geometry</code></span>",id:"clone----geometry",level:3},{value:"Returns:",id:"returns-2",level:4},{value:"destroy: <span><code>() -&gt; void</code></span>",id:"destroy----void",level:3},{value:"dispose: <span><code>() -&gt; void</code></span>",id:"dispose----void",level:3},{value:"getAttribute: <span><code>(id: string) -&gt; Attribute</code></span>",id:"getattribute-id-string---attribute",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"getBuffer: <span><code>(id: string) -&gt; Buffer</code></span>",id:"getbuffer-id-string---buffer",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"getIndex: <span><code>() -&gt; Buffer</code></span>",id:"getindex----buffer",level:3},{value:"Returns:",id:"returns-5",level:4},{value:"getSize: <span><code>() -&gt; number</code></span>",id:"getsize----number",level:3},{value:"Returns:",id:"returns-6",level:4},{value:"interleave: <span><code>() -&gt; Geometry</code></span>",id:"interleave----geometry",level:3},{value:"Returns:",id:"returns-7",level:4}],s={toc:d};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".BatchGeometry"),(0,n.kt)("p",null,"Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects)."),(0,n.kt)("p",null,"// TODO: @see"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"new-pixibatchgeometry-_static-boolean-"},"new PIXI.BatchGeometry: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(_static",":"," boolean) "))),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"_static"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"false")),(0,n.kt)("td",{parentName:"tr",align:null},"Optimization flag, where ",(0,n.kt)("inlineCode",{parentName:"td"},"false"),"is updated every frame, ",(0,n.kt)("inlineCode",{parentName:"td"},"true")," doesn't change frame-to-frame."))))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"extends"},"Extends"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../classes/PIXI.Geometry.pixi_core"},"PIXI.Geometry"))),(0,n.kt)("h2",{id:"members"},"Members"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"glvertexarrayobjects-object"},"glVertexArrayObjects: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"object"))),(0,n.kt)("p",null,"A map of renderer IDs to webgl VAOs")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"instancecount-number"},"instanceCount: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"1"))),(0,n.kt)("p",null,"Number of instances in this geometry, pass it to ",(0,n.kt)("inlineCode",{parentName:"p"},"GeometrySystem.draw()"),".")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"instanced-boolean"},"instanced: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"boolean"))),(0,n.kt)("p",null,"Whether the geometry is instanced.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"refcount-number"},"refCount: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"Count of existing (not destroyed) meshes that reference this geometry.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_buffer-buffer"},"_buffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Buffer"))),(0,n.kt)("p",null,"Buffer used for position, color, texture IDs")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_indexbuffer-buffer"},"_indexBuffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Buffer"))),(0,n.kt)("p",null,"Index buffer data")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"addattribute-id-string-buffer-pixibuffer--arraynumber-size-number-normalized-boolean-type-types-stride-number-start-number-instance-boolean---this"},"addAttribute: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(id",":"," string, buffer",":"," PIXI.Buffer ","|"," Array","<","number",">",", size",":"," number, normalized",":"," boolean, type",":"," TYPES, stride",":"," number, start",":"," number, instance",":"," boolean) -",">"," this"))),(0,n.kt)("p",null,"Adds an attribute to the geometry Note",":"," ",(0,n.kt)("inlineCode",{parentName:"p"},"stride")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," should be ",(0,n.kt)("inlineCode",{parentName:"p"},"undefined")," if you dont know them, not 0!"),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"string")),(0,n.kt)("td",{parentName:"tr",align:null},"the name of the attribute (matching up to a shader)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"buffer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.Buffer ","|"," Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"size"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"normalized"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"should the data be normalized.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"type"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"TYPES")),(0,n.kt)("td",{parentName:"tr",align:null},"what type of number is the attribute. Check ",(0,n.kt)("a",{parentName:"td",href:"../enums/PIXI.TYPES.pixi_constants"},"PIXI.TYPES")," to see the ones available")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"stride"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"How far apart, in bytes, the start of each value is. (used for interleaving data)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"start"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"How far into the array to start reading values (used for interleaving data)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"instance"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Instancing flag")))),(0,n.kt)("h4",{id:"returns"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"this")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns self, useful for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"addindex-buffer-pixibuffer--arraynumber---geometry"},"addIndex: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(buffer",":"," PIXI.Buffer ","|"," Array","<","number",">",") -",">"," Geometry"))),(0,n.kt)("p",null,"Adds an index buffer to the geometry The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, \u2026). There is only ONE index buffer."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"buffer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.Buffer ","|"," Array","<","number",">")),(0,n.kt)("td",{parentName:"tr",align:null},"The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.")))),(0,n.kt)("h4",{id:"returns-1"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Geometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns self, useful for chaining."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"clone----geometry"},"clone: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Geometry"))),(0,n.kt)("p",null,"Returns a clone of the geometry."),(0,n.kt)("h4",{id:"returns-2"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Geometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* A new clone of this geometry."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"destroy----void"},"destroy: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Destroys the geometry.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"dispose----void"},"dispose: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Disposes WebGL resources that are connected to this geometry.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getattribute-id-string---attribute"},"getAttribute: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(id",":"," string) -",">"," Attribute"))),(0,n.kt)("p",null,"Returns the requested attribute."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"string")),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the attribute required")))),(0,n.kt)("h4",{id:"returns-3"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Attribute")),(0,n.kt)("td",{parentName:"tr",align:null},"* The attribute requested."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getbuffer-id-string---buffer"},"getBuffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(id",":"," string) -",">"," Buffer"))),(0,n.kt)("p",null,"Returns the requested buffer."),(0,n.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"string")),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the buffer required.")))),(0,n.kt)("h4",{id:"returns-4"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Buffer")),(0,n.kt)("td",{parentName:"tr",align:null},"* The buffer requested."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getindex----buffer"},"getIndex: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Buffer"))),(0,n.kt)("p",null,"Returns the index buffer"),(0,n.kt)("h4",{id:"returns-5"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Buffer")),(0,n.kt)("td",{parentName:"tr",align:null},"* The index buffer."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"getsize----number"},"getSize: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," number"))),(0,n.kt)("p",null,"Get the size of the geometries, in vertices."),(0,n.kt)("h4",{id:"returns-6"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"interleave----geometry"},"interleave: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Geometry"))),(0,n.kt)("p",null,"This function modifies the structure so that all current attributes become interleaved into a single buffer This can be useful if your model remains static as it offers a little performance boost"),(0,n.kt)("h4",{id:"returns-7"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Geometry")),(0,n.kt)("td",{parentName:"tr",align:null},"* Returns self, useful for chaining."))))),(0,n.kt)("hr",null))}p.isMDXComponent=!0}}]);