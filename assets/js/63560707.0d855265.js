"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[3322],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=c(t),m=a,h=l["".concat(p,".").concat(m)]||l[m]||u[m]||s;return t?r.createElement(h,i(i({ref:n},d),{},{components:t})):r.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[l]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const s={hide_table_of_contents:!0,sidebar_position:0},i="Textured Mesh Basic",o={unversionedId:"examples/mesh-and-shaders/textured-mesh-basic",id:"examples/mesh-and-shaders/textured-mesh-basic",title:"Textured Mesh Basic",description:"",source:"@site/docs/examples/mesh-and-shaders/textured-mesh-basic.md",sourceDirName:"examples/mesh-and-shaders",slug:"/examples/mesh-and-shaders/textured-mesh-basic",permalink:"/examples/mesh-and-shaders/textured-mesh-basic",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/mesh-and-shaders/textured-mesh-basic.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{hide_table_of_contents:!0,sidebar_position:0},sidebar:"examplesSidebar",previous:{title:"Shader Toy Filter Render Texture",permalink:"/examples/filters-advanced/shader-toy-filter-render-texture"},next:{title:"Textured Mesh Advanced",permalink:"/examples/mesh-and-shaders/textured-mesh-advanced"}},p={},c=[],d={toc:c};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"textured-mesh-basic"},"Textured Mesh Basic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application({ resizeTo: window });\n\ndocument.body.appendChild(app.view);\n\nlet count = 0;\n\n// build a rope!\nconst ropeLength = 918 / 20;\n\nconst points = [];\n\nfor (let i = 0; i < 20; i++)\n{\n    points.push(new PIXI.Point(i * ropeLength, 0));\n}\n\nconst strip = new PIXI.SimpleRope(PIXI.Texture.from('https://pixijs.com/assets/snake.png'), points);\n\nstrip.x = -459;\n\nconst snakeContainer = new PIXI.Container();\n\nsnakeContainer.x = 400;\nsnakeContainer.y = 300;\n\nsnakeContainer.scale.set(800 / 1100);\napp.stage.addChild(snakeContainer);\n\nsnakeContainer.addChild(strip);\n\napp.ticker.add(() =>\n{\n    count += 0.1;\n\n    // make the snake\n    for (let i = 0; i < points.length; i++)\n    {\n        points[i].y = Math.sin((i * 0.5) + count) * 30;\n        points[i].x = i * ropeLength + Math.cos((i * 0.3) + count) * 20;\n    }\n});\n")))}l.isMDXComponent=!0}}]);