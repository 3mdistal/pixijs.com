"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[18115],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(a),m=n,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?r.createElement(h,l(l({ref:t},p),{},{components:a})):r.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},98991:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=a(87462),n=(a(67294),a(3905));const i={},l="Performance Tips",o={unversionedId:"guides/production/performance-tips",id:"guides/production/performance-tips",title:"Performance Tips",description:"General",source:"@site/docs/guides/production/performance-tips.md",sourceDirName:"guides/production",slug:"/guides/production/performance-tips",permalink:"/guides/production/performance-tips",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/production/performance-tips.md",tags:[],version:"current",frontMatter:{},sidebar:"guidesSidebar",previous:{title:"Assets",permalink:"/guides/basics/assets"}},s={},u=[{value:"General",id:"general",level:3},{value:"Sprites",id:"sprites",level:3},{value:"Graphics",id:"graphics",level:3},{value:"Texture",id:"texture",level:3},{value:"Text",id:"text",level:3},{value:"Masks",id:"masks",level:3},{value:"Filters",id:"filters",level:3},{value:"BlendModes",id:"blendmodes",level:3},{value:"CacheAsBitmap",id:"cacheasbitmap",level:3},{value:"Events",id:"events",level:3}],p={toc:u};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"performance-tips"},"Performance Tips"),(0,n.kt)("h3",{id:"general"},"General"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Only optimize when you need to! PixiJS can handle a fair amount of content off the bat"),(0,n.kt)("li",{parentName:"ul"},"Be mindful of the complexity of your scene. The more objects you add the slower things will end up"),(0,n.kt)("li",{parentName:"ul"},"Order can help, for example sprite / graphic / sprite / graphic is slower than sprite / sprite / graphic / graphic"),(0,n.kt)("li",{parentName:"ul"},"Some older mobile devices run things a little slower. Passing in the option ",(0,n.kt)("inlineCode",{parentName:"li"},"useContextAlpha: false")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"antialias: false")," to the Renderer or Application can help with performance"),(0,n.kt)("li",{parentName:"ul"},"Culling is disabled by default as it's often better to do this at an application level or set objects to be ",(0,n.kt)("inlineCode",{parentName:"li"},"cullable = true"),". If you are GPU-bound it will improve performance; if you are CPU-bound it will degrade performance")),(0,n.kt)("h3",{id:"sprites"},"Sprites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use Spritesheets where possible to minimize total textures"),(0,n.kt)("li",{parentName:"ul"},"Sprites can be batched with up to 16 different textures (dependent on hardware)"),(0,n.kt)("li",{parentName:"ul"},"This is the fastest way to render content"),(0,n.kt)("li",{parentName:"ul"},"On older devices use smaller low resolution textures"),(0,n.kt)("li",{parentName:"ul"},"Add the extention ",(0,n.kt)("inlineCode",{parentName:"li"},"@0.5x.png")," to the 50% scale-down spritesheet so PixiJS will visually-double them automaticaly"),(0,n.kt)("li",{parentName:"ul"},"Draw order can be important")),(0,n.kt)("h3",{id:"graphics"},"Graphics"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Graphics fastest when they are not modified constantly (not including the transform, alpha or tint!)"),(0,n.kt)("li",{parentName:"ul"},"Graphics objects are batched when under a certain size (100 points or smaller)"),(0,n.kt)("li",{parentName:"ul"},"Small Graphics objects are as fast as Sprites (rectangles, triangles)"),(0,n.kt)("li",{parentName:"ul"},"Using 100s of graphics complex objects can be slow, in this instance use sprites (you can create a texture)")),(0,n.kt)("h3",{id:"texture"},"Texture"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Textures are automatically managed by a Texture Garbage Collector"),(0,n.kt)("li",{parentName:"ul"},"You can also manage them yourself by using ",(0,n.kt)("inlineCode",{parentName:"li"},"texture.destroy()")),(0,n.kt)("li",{parentName:"ul"},"If you plan to destroyed more than one at once add a random delay to their destruction to remove freezing"),(0,n.kt)("li",{parentName:"ul"},"Delay texture destroy if you plan to delete a lot of textures yourself")),(0,n.kt)("h3",{id:"text"},"Text"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Avoid changing it on everyframe as this can be expensive (each time it draws to a canvas and then uploads to GPU)"),(0,n.kt)("li",{parentName:"ul"},"Bitmap Text gives much better performance for dynamically changing text"),(0,n.kt)("li",{parentName:"ul"},"Text resolution matches the renderer resolution, to decreates resolution yourself by setting ",(0,n.kt)("inlineCode",{parentName:"li"},"resolution")," property, which can consume less memory")),(0,n.kt)("h3",{id:"masks"},"Masks"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Masks can be expensive if too many are used: e.g., 100s of masks will really slow things down"),(0,n.kt)("li",{parentName:"ul"},"Axis-aligned Rectangle masks are the fastest (as the use scissor rect)"),(0,n.kt)("li",{parentName:"ul"},"Graphics masks are second fastest (as they use the stencil buffer)"),(0,n.kt)("li",{parentName:"ul"},"Sprite masks are the third fastest (they uses filters). They are really expensive. Do not use too many in your scene!")),(0,n.kt)("h3",{id:"filters"},"Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Release memory: ",(0,n.kt)("inlineCode",{parentName:"li"},"displayObject.filters = null")),(0,n.kt)("li",{parentName:"ul"},"If you know the size of them: ",(0,n.kt)("inlineCode",{parentName:"li"},"displayObject.filterArea = new PIXI.Rectangle(x,y,w,h)"),". This can speeds things up as it means the object does not need to be measured"),(0,n.kt)("li",{parentName:"ul"},"Filters are expensive, using too many will start to slow things down!")),(0,n.kt)("h3",{id:"blendmodes"},"BlendModes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Different blend modes will cause batches to break (de-optimize)"),(0,n.kt)("li",{parentName:"ul"},"SceenSprite / NormalSprite / SceenSprite / NormalSprite would be 4 draw calls"),(0,n.kt)("li",{parentName:"ul"},"SceenSprite / SceenSprite / NormalSprite / NormalSprite would be 2 draw calls")),(0,n.kt)("h3",{id:"cacheasbitmap"},"CacheAsBitmap"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Setting to ",(0,n.kt)("inlineCode",{parentName:"li"},"true")," turns an object into a Sprite by caching it as a Texture"),(0,n.kt)("li",{parentName:"ul"},"It has a one time cost when it is activated as it draws the object to a Texture"),(0,n.kt)("li",{parentName:"ul"},"Avoid changing this on elements frequently"),(0,n.kt)("li",{parentName:"ul"},"If you have a complicated item that has lots of sprites / filters AND does not move then this will speed up rendering!"),(0,n.kt)("li",{parentName:"ul"},"Do not need apply to sprites as they are already Textures"),(0,n.kt)("li",{parentName:"ul"},"Do not use if the object where its children are constantly changing as this will slow things down")),(0,n.kt)("h3",{id:"events"},"Events"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If an object has no interactive children use ",(0,n.kt)("inlineCode",{parentName:"li"},"interactiveChildren = false"),". The event system will then be able to avoid crawling through the object"),(0,n.kt)("li",{parentName:"ul"},"Setting ",(0,n.kt)("inlineCode",{parentName:"li"},"hitArea = new PIXI.Rectangle(x,y,w,h)")," as above should stop the event system from crawling through the object")))}c.isMDXComponent=!0}}]);