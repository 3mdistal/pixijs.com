"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[2632],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||o;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[d]="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99522:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const o={hide_table_of_contents:!0},a="3D Runner",p={unversionedId:"examples/plugin-projection/runner",id:"examples/plugin-projection/runner",title:"3D Runner",description:"",source:"@site/docs/examples/plugin-projection/runner.md",sourceDirName:"examples/plugin-projection",slug:"/examples/plugin-projection/runner",permalink:"/examples/plugin-projection/runner",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-projection/runner.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"3D Cards",permalink:"/examples/plugin-projection/cards"},next:{title:"Bunnies Packer",permalink:"/examples/plugin-projection/bunny-pack"}},s={},c=[],u={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"3d-runner"},"3D Runner"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n// this example uses both pixi-spine and pixi-projection\n// it doesnt use projection-spine bridge because it uses only 2d version of spine object\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ autoStart: false, resizeTo: window });\ndocument.body.appendChild(app.view);\n\napp.stop();\n\nconst { loader } = app;\n\n// load spine data\nloader\n    .add('pixie', 'https://beta.pixijs.com/assets/pixi-spine/pixie.json')\n    .add('bg', 'https://beta.pixijs.com/assets/pixi-spine/iP4_BGtile.jpg')\n    .add('fg', 'https://beta.pixijs.com/assets/pixi-spine/iP4_ground.png')\n    .load(onAssetsLoaded);\n\nconst objs = []; let\n    pixie;\n\napp.stage.interactive = true;\n\n// 1 earth and 2 parallax layers\n\nconst camera = new PIXI.projection.Camera3d();\ncamera.setPlanes(300, 10, 1000, false);\ncamera.position.set(app.screen.width / 2, 0);\ncamera.position3d.y = -500; // camera is above the ground\napp.stage.addChild(camera);\n\nconst groundLayer = new PIXI.projection.Container3d();\ngroundLayer.euler.x = Math.PI / 2;\ncamera.addChild(groundLayer);\n\n// Those two layers can have 2d objects inside\n// because they return everything to affine space\n\nconst bgLayer = new PIXI.projection.Container3d();\nbgLayer.proj.affine = PIXI.projection.AFFINE.AXIS_X;\ncamera.addChild(bgLayer);\nbgLayer.position3d.z = 80;\n\nconst mainLayer = new PIXI.projection.Container3d();\nmainLayer.proj.affine = PIXI.projection.AFFINE.AXIS_X;\ncamera.addChild(mainLayer);\n\nconst repeats = 3;\n\nfunction onAssetsLoaded(loaderInstance, res) {\n    for (let i = 0; i < repeats; i++) {\n    // simple 2d sprite on back\n        const bg = new PIXI.Sprite(res.bg.texture);\n        bgLayer.addChild(bg);\n        bg.position.x = bg.texture.width * i;\n        bg.anchor.y = 1;\n        objs.push(bg);\n    }\n\n    for (let i = 0; i < repeats; i++) {\n    // 3d sprite on floor\n        const fg = new PIXI.projection.Sprite3d(res.fg.texture);\n        groundLayer.addChild(fg);\n        fg.anchor.set(0, 0.5);\n        // use position or position3d here, its not important,\n        // unless you need Z - then you need position3d\n        fg.position.x = fg.texture.width * i;\n        objs.push(fg);\n    }\n\n    pixie = new PIXI.spine.Spine(res.pixie.spineData);\n    pixie.position.set(300, 0);\n    pixie.scale.set(0.3);\n\n    mainLayer.addChild(pixie);\n\n    pixie.stateData.setMix('running', 'jump', 0.2);\n    pixie.stateData.setMix('jump', 'running', 0.4);\n\n    pixie.state.setAnimation(0, 'running', true);\n\n    app.stage.on('pointerdown', onTouchStart);\n\n    function onTouchStart() {\n        pixie.state.setAnimation(0, 'jump', false);\n        pixie.state.addAnimation(0, 'running', true, 0);\n    }\n\n    app.start();\n}\n\napp.ticker.add((delta) => {\n    pixie.position.x += 10 * delta;\n\n    // camera looks on pixi!\n    camera.position3d.x = pixie.position.x;\n\n    objs.forEach((obj) => {\n        if (obj.position.x + obj.texture.width < pixie.position.x - 500) {\n            obj.position.x += repeats * obj.texture.width;\n        }\n    });\n});\n")))}d.isMDXComponent=!0}}]);