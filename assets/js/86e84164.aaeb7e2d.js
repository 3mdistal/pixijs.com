"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[96816],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=r,u=d["".concat(p,".").concat(g)]||d[g]||m[g]||a;return t?i.createElement(u,o(o({ref:n},l),{},{components:t})):i.createElement(u,o({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},87112:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const a={hide_table_of_contents:!0},o="Backdrop displacement",s={unversionedId:"examples/plugin-picture/displacement",id:"examples/plugin-picture/displacement",title:"Backdrop displacement",description:"",source:"@site/docs/examples/plugin-picture/displacement.md",sourceDirName:"examples/plugin-picture",slug:"/examples/plugin-picture/displacement",permalink:"/examples/plugin-picture/displacement",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-picture/displacement.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"More blend modes",permalink:"/examples/plugin-picture/overlay"},next:{title:"Backdrop pixelate",permalink:"/examples/plugin-picture/pixelate"}},p={},c=[],l={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"backdrop-displacement"},"Backdrop displacement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n// This is demo of pixi-picture.js, https://github.com/pixijs/pixi-picture\n// This is pixijs DisplacementFilter improvement, using a backdrop\n\nconst shaderVert = `\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n`;\n\nconst shaderFrag = `\nvarying vec2 vTextureCoord;\n\nuniform vec2 scale;\n\nuniform sampler2D uSampler;\nuniform sampler2D backdropSampler;\nuniform vec2 backdropSampler_flipY;\n\nuniform highp vec4 inputSize;\nuniform vec4 inputClamp;\n\nvoid main(void)\n{\n  vec4 map =  texture2D(uSampler, vTextureCoord);\n\n  map -= 0.5;\n  map.xy *= scale * inputSize.zw;\n\n  vec2 dis = clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), inputClamp.xy, inputClamp.zw);\n  // required to take backdrop from screen without extra drawcall\n  dis.y = dis.y * backdropSampler_flipY.y + backdropSampler_flipY.x;\n\n  gl_FragColor = texture2D(backdropSampler, dis);\n}\n`;\n\nclass DisplacementFilter extends PIXI.Filter {\n    constructor(scale) {\n        super(\n            shaderVert,\n            shaderFrag,\n        );\n\n        this.uniforms.scale = { x: 1, y: 1 };\n\n        if (scale === null || scale === undefined) {\n            scale = 20;\n        }\n\n        this.scale = new PIXI.Point(scale, scale);\n\n        this.backdropUniformName = 'backdropSampler';\n    }\n\n    apply(filterManager, input, output, clearMode) {\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n\n        this.clearColor = [0.5, 0.5, 0.5, 1.0];\n    }\n}\n\nconst app = new PIXI.Application<HTMLCanvasElement>(800, 600);\ndocument.body.appendChild(app.view);\n\napp.stage.interactive = true;\n\nconst container = new PIXI.Container();\napp.stage.addChild(container);\n\nconst padding = 100;\nconst bounds = new PIXI.Rectangle(\n    -padding,\n    -padding,\n    app.screen.width + padding * 2,\n    app.screen.height + padding * 2,\n);\nconst maggots = [];\n\nfor (let i = 0; i < 20; i++) {\n    const maggot = PIXI.Sprite.from('https://pixijs.io/examples/https://v2-pixijs.com/assets/maggot.png');\n    maggot.anchor.set(0.5);\n    container.addChild(maggot);\n\n    maggot.direction = Math.random() * Math.PI * 2;\n    maggot.speed = 1;\n    maggot.turnSpeed = Math.random() - 0.8;\n\n    maggot.x = Math.random() * bounds.width;\n    maggot.y = Math.random() * bounds.height;\n\n    maggot.scale.set(1 + Math.random() * 0.3);\n    maggot.original = new PIXI.Point();\n    maggot.original.copyFrom(maggot.scale);\n    maggots.push(maggot);\n}\nconst displacementContainer = new PIXI.Container();\nconst displacementTexture = PIXI.Texture.from('https://pixijs.io/examples/https://v2-pixijs.com/assets/pixi-filters/displace.png');\nfor (let i = -1; i <= 1; i += 2) {\n    const sprite1 = new PIXI.Sprite(displacementTexture);\n    sprite1.position.set(100 * i, 0);\n    sprite1.anchor.set(0.5);\n    displacementContainer.addChild(sprite1);\n}\napp.stage.addChild(displacementContainer);\n\nconst displacementFilter = new DisplacementFilter();\ndisplacementContainer.filters = [displacementFilter];\ndisplacementFilter.scale.x = 110;\ndisplacementFilter.scale.y = 110;\n// displacementFilter.padding = 0;\n\nconst ringTexture = PIXI.Texture.from('https://pixijs.io/examples/https://v2-pixijs.com/assets/pixi-filters/ring.png');\nconst rings = new PIXI.Container();\nfor (let i = -1; i <= 1; i += 2) {\n    const sprite1 = new PIXI.Sprite(ringTexture);\n    sprite1.position.set(100 * i, 0);\n    sprite1.anchor.set(0.5);\n    rings.addChild(sprite1);\n}\nrings.visible = false;\n\napp.stage.addChild(rings);\n\nconst bg = PIXI.Sprite.from('https://pixijs.io/examples/https://v2-pixijs.com/assets/bg_grass.jpg');\nbg.width = app.screen.width;\nbg.height = app.screen.height;\n\nbg.alpha = 1;\n\napp.stage.addChildAt(bg, 0);\n\napp.stage\n    .on('mousemove', onPointerMove)\n    .on('touchmove', onPointerMove);\n\nfunction onPointerMove(eventData) {\n    rings.visible = true;\n\n    displacementContainer.position.set(eventData.data.global.x, eventData.data.global.y);\n    rings.position.copyFrom(displacementContainer.position);\n}\n\nlet count = 0;\n\napp.ticker.add(() => {\n    count += 0.05;\n\n    for (let i = 0; i < maggots.length; i++) {\n        const maggot = maggots[i];\n\n        maggot.direction += maggot.turnSpeed * 0.01;\n        maggot.x += Math.sin(maggot.direction) * maggot.speed;\n        maggot.y += Math.cos(maggot.direction) * maggot.speed;\n\n        maggot.rotation = -maggot.direction - Math.PI / 2;\n        maggot.scale.x = maggot.original.x + Math.sin(count) * 0.2;\n\n        // wrap the maggots around as the crawl\n        if (maggot.x < bounds.x) {\n            maggot.x += bounds.width;\n        } else if (maggot.x > bounds.x + bounds.width) {\n            maggot.x -= bounds.width;\n        }\n\n        if (maggot.y < bounds.y) {\n            maggot.y += bounds.height;\n        } else if (maggot.y > bounds.y + bounds.height) {\n            maggot.y -= bounds.height;\n        }\n    }\n});\n")))}d.isMDXComponent=!0}}]);