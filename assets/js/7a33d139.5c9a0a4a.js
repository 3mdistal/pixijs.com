"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[16577],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=c(t),m=a,h=l["".concat(p,".").concat(m)]||l[m]||u[m]||i;return t?r.createElement(h,s(s({ref:n},d),{},{components:t})):r.createElement(h,s({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[l]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},64126:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const i={hide_table_of_contents:!0},s="Textured Mesh - Advanced",o={unversionedId:"examples/mesh-and-shaders/textured-mesh-advanced",id:"examples/mesh-and-shaders/textured-mesh-advanced",title:"Textured Mesh - Advanced",description:"",source:"@site/docs/examples/mesh-and-shaders/textured-mesh-advanced.md",sourceDirName:"examples/mesh-and-shaders",slug:"/examples/mesh-and-shaders/textured-mesh-advanced",permalink:"/examples/mesh-and-shaders/textured-mesh-advanced",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/mesh-and-shaders/textured-mesh-advanced.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Textured Mesh - Basic",permalink:"/examples/mesh-and-shaders/textured-mesh-basic"},next:{title:"Triangle",permalink:"/examples/mesh-and-shaders/triangle"}},p={},c=[],d={toc:c};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"textured-mesh---advanced"},"Textured Mesh - Advanced"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\nlet count = 0;\n\n// build a rope!\nconst ropeLength = 45;\n\nconst points = [];\n\nfor (let i = 0; i < 25; i++) {\n    points.push(new PIXI.Point(i * ropeLength, 0));\n}\n\nconst strip = new PIXI.SimpleRope(PIXI.Texture.from('https://v2-pixijs.com/assets/snake.png'), points);\n\nstrip.x = -40;\nstrip.y = 300;\n\napp.stage.addChild(strip);\n\nconst g = new PIXI.Graphics();\ng.x = strip.x;\ng.y = strip.y;\napp.stage.addChild(g);\n\n// start animating\napp.ticker.add(() => {\n    count += 0.1;\n\n    // make the snake\n    for (let i = 0; i < points.length; i++) {\n        points[i].y = Math.sin((i * 0.5) + count) * 30;\n        points[i].x = i * ropeLength + Math.cos((i * 0.3) + count) * 20;\n    }\n    renderPoints();\n});\n\nfunction renderPoints() {\n    g.clear();\n\n    g.lineStyle(2, 0xffc2c2);\n    g.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n        g.lineTo(points[i].x, points[i].y);\n    }\n\n    for (let i = 1; i < points.length; i++) {\n        g.beginFill(0xff0022);\n        g.drawCircle(points[i].x, points[i].y, 10);\n        g.endFill();\n    }\n}\n")))}l.isMDXComponent=!0}}]);