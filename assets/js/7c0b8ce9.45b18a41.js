"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[4056],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),o=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},d=function(e){var t=o(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=o(a),k=n,m=p["".concat(s,".").concat(k)]||p[k]||c[k]||l;return a?r.createElement(m,u(u({ref:t},d),{},{components:a})):r.createElement(m,u({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,u=new Array(l);u[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:n,u[1]=i;for(var o=2;o<l;o++)u[o]=a[o];return r.createElement.apply(null,u)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},23132:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var r=a(87462),n=(a(67294),a(3905));const l={id:"PIXI.RenderTexture.pixi_core",title:"Class: PIXI.RenderTexture",sidebar_label:"PIXI.RenderTexture",custom_edit_url:null},u=void 0,i={unversionedId:"api/classes/PIXI.RenderTexture.pixi_core",id:"api/classes/PIXI.RenderTexture.pixi_core",title:"Class: PIXI.RenderTexture",description:"@pixi/core.RenderTexture",source:"@site/docs/api/classes/PIXI.RenderTexture.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.RenderTexture.pixi_core",permalink:"/api/classes/PIXI.RenderTexture.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.RenderTexture.pixi_core",title:"Class: PIXI.RenderTexture",sidebar_label:"PIXI.RenderTexture",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.Rectangle",permalink:"/api/classes/PIXI.Rectangle.pixi_math"},next:{title:"PIXI.RenderTexturePool",permalink:"/api/classes/PIXI.RenderTexturePool.pixi_core"}},s={},o=[{value:"new PIXI.RenderTexture: <span><code>(baseRenderTexture: BaseRenderTexture, frame: Rectangle) </code></span>",id:"new-pixirendertexture-baserendertexture-baserendertexture-frame-rectangle-",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Extends",id:"extends",level:2},{value:"Members",id:"members",level:2},{value:"_frame: <span><code>Rectangle</code></span>",id:"_frame-rectangle",level:3},{value:"baseTexture: <span><code>BaseTexture&lt;R&gt;</code></span>",id:"basetexture-basetexturer",level:3},{value:"defaultAnchor: <span><code>Point</code></span>",id:"defaultanchor-point",level:3},{value:"defaultBorders: <span><code>ITextureBorders</code></span>",id:"defaultborders-itextureborders",level:3},{value:"filterFrame: <span><code>Rectangle | null</code></span>",id:"filterframe-rectangle--null",level:3},{value:"filterPoolKey: <span><code>string | number | null</code></span>",id:"filterpoolkey-string--number--null",level:3},{value:"frame: <span><code>Rectangle</code></span>",id:"frame-rectangle",level:3},{value:"framebuffer: <span><code>Framebuffer</code></span>",id:"framebuffer-framebuffer",level:3},{value:"height: <span><code>number</code></span>",id:"height-number",level:3},{value:"multisample: <span><code>MSAA_QUALITY</code></span>",id:"multisample-msaa_quality",level:3},{value:"noFrame: <span><code>boolean</code></span>",id:"noframe-boolean",level:3},{value:"orig: <span><code>Rectangle</code></span>",id:"orig-rectangle",level:3},{value:"resolution: <span><code>number</code></span>",id:"resolution-number",level:3},{value:"rotate: <span><code>number</code></span>",id:"rotate-number",level:3},{value:"textureCacheIds: <span><code>Array&lt;string&gt;</code></span>",id:"texturecacheids-arraystring",level:3},{value:"trim: <span><code>Rectangle</code></span>",id:"trim-rectangle",level:3},{value:"uvMatrix: <span><code>TextureMatrix</code></span>",id:"uvmatrix-texturematrix",level:3},{value:"valid: <span><code>boolean</code></span>",id:"valid-boolean",level:3},{value:"width: <span><code>number</code></span>",id:"width-number",level:3},{value:"_updateID: <span><code>number</code></span>",id:"_updateid-number",level:3},{value:"_uvs: <span><code>TextureUvs</code></span>",id:"_uvs-textureuvs",level:3},{value:"Methods",id:"methods",level:2},{value:"create: <span><code>(options: IBaseTextureOptions) -&gt; RenderTexture</code></span>",id:"create-options-ibasetextureoptions---rendertexture",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns",level:4},{value:"castToBaseTexture: <span><code>() -&gt; BaseTexture</code></span>",id:"casttobasetexture----basetexture",level:3},{value:"Returns:",id:"returns-1",level:4},{value:"clone: <span><code>() -&gt; Texture</code></span>",id:"clone----texture",level:3},{value:"Returns:",id:"returns-2",level:4},{value:"destroy: <span><code>(destroyBase: boolean) -&gt; void</code></span>",id:"destroy-destroybase-boolean---void",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"resize: <span><code>(desiredWidth: number, desiredHeight: number, resizeBaseTexture: boolean) -&gt; void</code></span>",id:"resize-desiredwidth-number-desiredheight-number-resizebasetexture-boolean---void",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"setResolution: <span><code>(resolution: number) -&gt; void</code></span>",id:"setresolution-resolution-number---void",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"update: <span><code>() -&gt; void</code></span>",id:"update----void",level:3},{value:"updateUvs: <span><code>() -&gt; void</code></span>",id:"updateuvs----void",level:3},{value:"onBaseTextureUpdated: <span><code>(baseTexture: BaseTexture) -&gt; void</code></span>",id:"onbasetextureupdated-basetexture-basetexture---void",level:3},{value:"Parameters:",id:"parameters-5",level:4}],d={toc:o};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".RenderTexture"),(0,n.kt)("p",null,"A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n",(0,n.kt)("strong",{parentName:"p"},"Hint"),":"," All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded otherwise black rectangles will be drawn instead."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Hint-2"),":"," The actual memory allocation will happen on first render. You shouldn't create renderTextures each frame just to delete them after, try to reuse them."),(0,n.kt)("p",null,"A RenderTexture takes a snapshot of any Display Object given to its render method. For example",":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"}," import { autoDetectRenderer, RenderTexture, Sprite } from 'pixi.js';\n\n const renderer = autoDetectRenderer();\n const renderTexture = RenderTexture.create({ width: 800, height: 600 });\n const sprite = Sprite.from('spinObj_01.png');\n\n sprite.position.x = 800 / 2;\n sprite.position.y = 600 / 2;\n sprite.anchor.x = 0.5;\n sprite.anchor.y = 0.5;\n\n renderer.render(sprite, { renderTexture });\n\n // Note that you should not create a new renderer, but reuse the same one as the rest of the application.\n // The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n // you can clear the transform\n\n sprite.setTransform();\n\n const renderTexture = new RenderTexture.create({ width: 100, height: 100 });\n\n renderer.render(sprite, { renderTexture });  // Renders to center of RenderTexture\n")),(0,n.kt)("p",null,"// TODO: @see"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"new-pixirendertexture-baserendertexture-baserendertexture-frame-rectangle-"},"new PIXI.RenderTexture: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(baseRenderTexture",":"," BaseRenderTexture, frame",":"," Rectangle) "))),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"baseRenderTexture"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"BaseRenderTexture")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null)),(0,n.kt)("td",{parentName:"tr",align:null},"The base texture object that this texture uses.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"frame"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Rectangle")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null)),(0,n.kt)("td",{parentName:"tr",align:null},"The rectangle frame of the texture to show."))))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"extends"},"Extends"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../classes/PIXI.Texture.pixi_core"},"PIXI.Texture"))),(0,n.kt)("h2",{id:"members"},"Members"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_frame-rectangle"},"_frame: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Rectangle"))),(0,n.kt)("p",null,"This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering, irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"basetexture-basetexturer"},"baseTexture: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"BaseTexture","<","R",">"))),(0,n.kt)("p",null,"The base texture that this texture uses.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"defaultanchor-point"},"defaultAnchor: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Point"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"{","0,0","}"))),(0,n.kt)("p",null,"Anchor point that is used as default if sprite is created with this texture. Changing the ",(0,n.kt)("inlineCode",{parentName:"p"},"defaultAnchor")," at a later point of time will not update Sprite's anchor point.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"defaultborders-itextureborders"},"defaultBorders: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"ITextureBorders"))),(0,n.kt)("p",null,"Default width of the non-scalable border that is used if 9-slice plane is created with this texture. (See ",(0,n.kt)("a",{parentName:"p",href:"../classes/PIXI.NineSlicePlane.pixi_mesh_extras"},"PIXI.NineSlicePlane"),")")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"filterframe-rectangle--null"},"filterFrame: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Rectangle ","|"," null"))),(0,n.kt)("p",null,"Stores ",(0,n.kt)("inlineCode",{parentName:"p"},"sourceFrame")," when this texture is inside current filter stack.\nYou can read it inside filters.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"filterpoolkey-string--number--null"},"filterPoolKey: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"string ","|"," number ","|"," null"))),(0,n.kt)("p",null,"The key for pooled texture of FilterSystem.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"frame-rectangle"},"frame: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Rectangle"))),(0,n.kt)("p",null,"The frame specifies the region of the base texture that this texture uses. Please call ",(0,n.kt)("inlineCode",{parentName:"p"},"updateUvs()")," after you change coordinates of ",(0,n.kt)("inlineCode",{parentName:"p"},"frame")," manually.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"framebuffer-framebuffer"},"framebuffer: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Framebuffer"))),(0,n.kt)("p",null,"Shortcut to ",(0,n.kt)("inlineCode",{parentName:"p"},"this.baseTexture.framebuffer"),", saves baseTexture cast.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"height-number"},"height: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"The height of the Texture in pixels.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"multisample-msaa_quality"},"multisample: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"MSAA_QUALITY"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,n.kt)("code",null,"PIXI.MSAA_QUALITY.NONE"))),(0,n.kt)("p",null,"Shortcut to ",(0,n.kt)("inlineCode",{parentName:"p"},"this.framebuffer.multisample"),".")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"noframe-boolean"},"noFrame: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"boolean"))),(0,n.kt)("p",null,"Does this Texture have any frame data assigned to it?\nThis mode is enabled automatically if no frame was passed inside constructor."),(0,n.kt)("p",null,"In this mode texture is subscribed to baseTexture events, and fires ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," on any change."),(0,n.kt)("p",null,"Beware, after loading or resize of baseTexture event can fired two times! If you want more control, subscribe on baseTexture itself."),(0,n.kt)("p",null,"Any assignment of ",(0,n.kt)("inlineCode",{parentName:"p"},"frame")," switches off ",(0,n.kt)("inlineCode",{parentName:"p"},"noFrame")," mode."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"texture.on('update', () => {});\n"))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"orig-rectangle"},"orig: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Rectangle"))),(0,n.kt)("p",null,"This is the area of original texture, before it was put in atlas.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"resolution-number"},"resolution: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"Returns resolution of baseTexture")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"rotate-number"},"rotate: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"Indicates whether the texture is rotated inside the atlas set to 2 to compensate for texture packer rotation set to 6 to compensate for spine packer rotation can be used to rotate or mirror sprites See ",(0,n.kt)("a",{parentName:"p",href:"../namespaces/PIXI.groupD8.pixi_math"},"PIXI.groupD8")," for explanation")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"texturecacheids-arraystring"},"textureCacheIds: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Array","<","string",">"))),(0,n.kt)("p",null,"The ids under which this Texture has been added to the texture cache. This is automatically set as long as Texture.addToCache is used, but may not be set if a Texture is added directly to the TextureCache array.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"trim-rectangle"},"trim: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"Rectangle"))),(0,n.kt)("p",null,"This is the trimmed area of original texture, before it was put in atlas Please call ",(0,n.kt)("inlineCode",{parentName:"p"},"updateUvs()")," after you change coordinates of ",(0,n.kt)("inlineCode",{parentName:"p"},"trim")," manually.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"uvmatrix-texturematrix"},"uvMatrix: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"TextureMatrix"))),(0,n.kt)("p",null,"Default TextureMatrix instance for this texture. By default, that object is not created because its heavy.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"valid-boolean"},"valid: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"boolean"))),(0,n.kt)("p",null,"This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"width-number"},"width: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"The width of the Texture in pixels.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_updateid-number"},"_updateID: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"number"))),(0,n.kt)("p",null,"Update ID is observed by sprites and TextureMatrix instances. Call updateUvs() to increment it.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"_uvs-textureuvs"},"_uvs: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"TextureUvs"))),(0,n.kt)("p",null,"The WebGL UV data cache. Can be used as quad UV.")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"create-options-ibasetextureoptions---rendertexture"},"create: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(options",":"," IBaseTextureOptions) -",">"," RenderTexture"))),(0,n.kt)("p",null,"A short hand way of creating a render texture."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"options"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"IBaseTextureOptions")),(0,n.kt)("td",{parentName:"tr",align:null},"Options")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"options.width"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The width of the render texture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"options.height"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The height of the render texture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"options.scaleMode"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.SCALE_MODES")),(0,n.kt)("td",{parentName:"tr",align:null},"See ",(0,n.kt)("a",{parentName:"td",href:"../enums/PIXI.SCALE_MODES.pixi_constants"},"PIXI.SCALE_MODES")," for possible values")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"options.resolution"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The resolution / device pixel ratio of the texture being generated")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"options.multisample"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.MSAA_QUALITY")),(0,n.kt)("td",{parentName:"tr",align:null},"The number of samples of the frame buffer")))),(0,n.kt)("h4",{id:"returns"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"RenderTexture")),(0,n.kt)("td",{parentName:"tr",align:null},"The new render texture"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"casttobasetexture----basetexture"},"castToBaseTexture: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," BaseTexture"))),(0,n.kt)("p",null,"Utility function for BaseTexture","|","Texture cast."),(0,n.kt)("h4",{id:"returns-1"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"BaseTexture")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"clone----texture"},"clone: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," Texture"))),(0,n.kt)("p",null,"Creates a new texture object that acts the same as this one."),(0,n.kt)("h4",{id:"returns-2"},"Returns:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Texture")),(0,n.kt)("td",{parentName:"tr",align:null},"* The new texture"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"destroy-destroybase-boolean---void"},"destroy: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(destroyBase",":"," boolean) -",">"," void"))),(0,n.kt)("p",null,"Destroys this texture"),(0,n.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"destroyBase"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Whether to destroy the base texture as well"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"resize-desiredwidth-number-desiredheight-number-resizebasetexture-boolean---void"},"resize: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(desiredWidth",":"," number, desiredHeight",":"," number, resizeBaseTexture",":"," boolean) -",">"," void"))),(0,n.kt)("p",null,"Resizes the RenderTexture."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"desiredWidth"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The desired width to resize to.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"desiredHeight"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The desired height to resize to.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resizeBaseTexture"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Should the baseTexture.width and height values be resized as well?"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"setresolution-resolution-number---void"},"setResolution: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(resolution",":"," number) -",">"," void"))),(0,n.kt)("p",null,"Changes the resolution of baseTexture, but does not change framebuffer size."),(0,n.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resolution"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"number")),(0,n.kt)("td",{parentName:"tr",align:null},"The new resolution to apply to RenderTexture"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"update----void"},"update: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Updates this texture on the gpu.\nCalls the TextureResource update."),(0,n.kt)("p",null,"If you adjusted ",(0,n.kt)("inlineCode",{parentName:"p"},"frame")," manually, please call ",(0,n.kt)("inlineCode",{parentName:"p"},"updateUvs()")," instead.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"updateuvs----void"},"updateUvs: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"() -",">"," void"))),(0,n.kt)("p",null,"Updates the internal WebGL UV cache. Use it after you change ",(0,n.kt)("inlineCode",{parentName:"p"},"frame")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"trim")," of the texture. Call it after changing the frame")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"onbasetextureupdated-basetexture-basetexture---void"},"onBaseTextureUpdated: ",(0,n.kt)("span",null,(0,n.kt)("code",null,"(baseTexture",":"," BaseTexture) -",">"," void"))),(0,n.kt)("p",null,"Called when the base texture is updated"),(0,n.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"baseTexture"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"BaseTexture")),(0,n.kt)("td",{parentName:"tr",align:null},"The base texture."))))),(0,n.kt)("hr",null))}p.isMDXComponent=!0}}]);