"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[1278],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65297:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const i={hide_table_of_contents:!0},o="3D Camera Spine Layers",s={unversionedId:"examples/plugin-projection/camera-spine-layers",id:"examples/plugin-projection/camera-spine-layers",title:"3D Camera Spine Layers",description:"",source:"@site/docs/examples/plugin-projection/camera-spine-layers.md",sourceDirName:"examples/plugin-projection",slug:"/examples/plugin-projection/camera-spine-layers",permalink:"/examples/plugin-projection/camera-spine-layers",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-projection/camera-spine-layers.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Isometry basics",permalink:"/examples/plugin-projection/iso-basic"},next:{title:"3D Cards",permalink:"/examples/plugin-projection/cards"}},p={},l=[],c={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"3d-camera-spine-layers"},"3D Camera Spine Layers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n// This examples is hard\n// To understand it, you have to carefully read all readme`s and other examples of respective plugins\n// Be ready to study the plugins code. Please use latest version of those libs\n// Used plugins: pixi-spine, pixi-projection (+spine), pixi-display\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ autoStart: false, resizeTo: window });\ndocument.body.appendChild(app.view);\napp.stage = new PIXI.display.Stage();\n\n// apply mixin to spine class, otherwise objects might not be projected\nPIXI.projection.applySpine3dMixin(PIXI.spine.Spine.prototype);\n\nconst { loader } = app;\n\n// create a new loader\nloader.add('spritesheet', 'https://v2-pixijs.com/assets/pixi-projection/dudes.json');\nloader.add('back', 'https://v2-pixijs.com/assets/pixi-projection/back.png');\nloader.add('pixie', 'https://v2-pixijs.com/assets/pixi-spine/pixie.json');\n// begin load\nloader.load(onAssetsLoaded);\n\n// holder to store aliens\nconst alienFrames = ['eggHead.png', 'flowerTop.png', 'helmlok.png', 'skully.png'];\n\n// create an empty container\nconst camera = new PIXI.projection.Camera3d();\ncamera.position.set(app.screen.width / 2, app.screen.height / 2);\ncamera.setPlanes(1000, 10, 10000, true);\napp.stage.addChild(camera);\n\nconst alienContainer = new PIXI.projection.Container3d();\nconst earthContainer = new PIXI.projection.Container3d();\ncamera.addChild(earthContainer);\ncamera.addChild(alienContainer);\n\nconst sortGroup = new PIXI.display.Group(1, ((plane) => {\n    plane.zOrder = -plane.getDepth();\n}));\napp.stage.addChild(new PIXI.display.Layer(sortGroup));\nconst debugGraphics = new PIXI.Graphics();\napp.stage.addChild(debugGraphics);\n\nfunction spawnAlien(d) {\n    let sprite1;\n    if (d < 4) {\n        const frameName = alienFrames[d];\n        // if you want to use 3d transform for object, either create Sprite3d/Container3d\n        sprite1 = new PIXI.projection.Sprite3d(PIXI.Texture.from(frameName));\n        sprite1.anchor.set(0.5, 1.0);\n        sprite1.scale3d.set(0.5);\n    } else {\n        sprite1 = new PIXI.spine.Spine(loader.resources.pixie.spineData);\n        sprite1.scale3d.set(0.1);\n        sprite1.state.setAnimation(0, 'running', true);\n    }\n\n    // Sprite belongs to plane, and plane is vertical in world coordinates.\n    const spritePlane = new PIXI.projection.Container3d();\n    spritePlane.alwaysFront = true;\n    spritePlane.addChild(sprite1);\n    spritePlane.interactive = true;\n    spritePlane.parentGroup = sortGroup;\n\n    return spritePlane;\n}\n\nconst filter = new PIXI.filters.BlurFilter();\nfilter.blur = 2;\n\nfunction onAssetsLoaded() {\n    const earth = new PIXI.projection.Sprite3d(loader.resources.back.texture);\n    // because earth is Sprite3d, we can access its euler angles\n    earth.euler.x = Math.PI / 2;\n    earth.anchor.x = earth.anchor.y = 0.5;\n    earthContainer.addChild(earth);\n\n    for (let i = 0; i < 30; i++) {\n        const d = Math.random() * 6 | 0;\n\n        const spritePlane = spawnAlien(d);\n        spritePlane.position3d.x = (Math.random() * 2 - 1) * 500.0;\n        spritePlane.position3d.z = (Math.random() * 2 - 1) * 500.0;\n\n        alienContainer.addChild(spritePlane);\n    }\n\n    earthContainer.interactive = true;\n    earthContainer.on('click', (event) => {\n        const p = new PIXI.Point();\n        event.data.getLocalPosition(earth, p, event.data.global);\n\n        const sp = spawnAlien(4);\n        sp.position3d.x = p.x;\n        sp.position3d.z = p.y;\n        alienContainer.addChild(sp);\n    });\n\n    // start animating\n    app.start();\n}\n\nlet ang = 0;\n\napp.ticker.add(() => {\n    debugGraphics.clear();\n    debugGraphics.lineStyle(2, 0xffffff, 1.0);\n    alienContainer.children.forEach((alien) => {\n        const rect = alien.getBounds();\n        if (rect !== PIXI.Rectangle.EMPTY) debugGraphics.drawShape(rect);\n        if (alien.trackedPointers[1] && alien.trackedPointers[1].over) {\n            if (!alien.filters) {\n                alien.filters = [filter];\n            }\n        } else {\n            alien.filters = null;\n        }\n    });\n\n    ang += 0.01;\n    camera.euler.y = ang;\n    camera.euler.x = -Math.PI / 6;\n\n    alienContainer.children.forEach((plane) => {\n        if (plane.alwaysFront) {\n            // 1. rotate sprite plane to the camera\n            plane.children[0].euler.x = -Math.PI / 6;\n            // 2. rotate sprite to the camera\n            plane.euler.y = ang;\n        }\n    });\n    // We are gonna sort and show correct side of card,\n    // so we need updateTransform BEFORE the sorting will be called.\n    // otherwise this part will be tardy by one frame\n    camera.updateTransform();\n});\n")))}d.isMDXComponent=!0}}]);