"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[94992],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},k="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),k=o(a),u=r,h=k["".concat(p,".").concat(u)]||k[u]||m[u]||s;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[k]="string"==typeof e?e:r,l[1]=i;for(var o=2;o<s;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},81519:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var n=a(87462),r=(a(67294),a(3905));const s={id:"pixi_assets.Resolver",title:"Class: Resolver",sidebar_label:"Resolver",custom_edit_url:null},l=void 0,i={unversionedId:"api/classes/pixi_assets.Resolver",id:"api/classes/pixi_assets.Resolver",title:"Class: Resolver",description:"@pixi/assets.Resolver",source:"@site/docs/api/classes/pixi_assets.Resolver.md",sourceDirName:"api/classes",slug:"/api/classes/pixi_assets.Resolver",permalink:"/api/classes/pixi_assets.Resolver",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"pixi_assets.Resolver",title:"Class: Resolver",sidebar_label:"Resolver",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Loader",permalink:"/api/classes/pixi_assets.Loader"},next:{title:"BasisParser",permalink:"/api/classes/pixi_basis.BasisParser"}},p={},o=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Accessors",id:"accessors",level:2},{value:"basePath",id:"basepath",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"parsers",id:"parsers",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"rootPath",id:"rootpath",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"Methods",id:"methods",level:2},{value:"add",id:"add",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"addBundle",id:"addbundle",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"addManifest",id:"addmanifest",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"prefer",id:"prefer",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"reset",id:"reset",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"resolve",id:"resolve",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"resolveBundle",id:"resolvebundle",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"resolveUrl",id:"resolveurl",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"setBundleIdentifier",id:"setbundleidentifier",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"setDefaultSearchParams",id:"setdefaultsearchparams",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-14",level:4}],d={toc:o};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/modules/pixi_assets"},"@pixi/assets"),".Resolver"),(0,r.kt)("p",null,"A class that is responsible for resolving mapping asset URLs to keys.\nAt its most basic it can be used for Aliases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"resolver.add('foo', 'bar');\nresolver.resolveUrl('foo') // => 'bar'\n")),(0,r.kt)("p",null,"It can also be used to resolve the most appropriate asset for a given URL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"resolver.prefer({\n    params: {\n        format: 'webp',\n        resolution: 2,\n    }\n});\n\nresolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n\nresolver.resolveUrl('foo') // => 'bar@2x.webp'\n")),(0,r.kt)("p",null,"Other features include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ability to process a manifest file to get the correct understanding of how to resolve all assets"),(0,r.kt)("li",{parentName:"ul"},"Ability to add custom parsers for specific file types"),(0,r.kt)("li",{parentName:"ul"},"Ability to add custom prefer rules")),(0,r.kt)("p",null,"This class only cares about the URL, not the loading of the asset itself."),(0,r.kt)("p",null,"It is not intended that this class is created by developers - its part of the Asset class\nThis is the third major system of PixiJS' main Assets class"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Memberof"))),(0,r.kt)("p",null,"PIXI"),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new Resolver"),"()"),(0,r.kt)("h2",{id:"accessors"},"Accessors"),(0,r.kt)("h3",{id:"basepath"},"basePath"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"basePath"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L165"},"pixijs/packages/assets/src/resolver/Resolver.ts:165")),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," ",(0,r.kt)("strong",{parentName:"p"},"basePath"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"basePath"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Set the base path to prepend to all urls when resolving"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"resolver.basePath = 'https://home.com/';\nresolver.add('foo', 'bar.ong');\nresolver.resolveUrl('foo', 'bar.png'); // => 'https://home.com/bar.png'\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"basePath")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the base path to use")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L160"},"pixijs/packages/assets/src/resolver/Resolver.ts:160")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"parsers"},"parsers"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"parsers"),"(): ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveURLParser"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveURLParser")),"[]"),(0,r.kt)("p",null,"All the active URL parsers that help the parser to extract information and create\nan asset object-based on parsing the URL itself."),(0,r.kt)("p",null,"Can be added using the extensions API"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"resolver.add('foo', [\n    {\n        resolution: 2,\n        format: 'png',\n        src: 'image@2x.png',\n    },\n    {\n        resolution:1,\n        format:'png',\n        src: 'image.png',\n    },\n]);\n\n// With a url parser the information such as resolution and file format could extracted from the url itself:\nextensions.add({\n    extension: ExtensionType.ResolveParser,\n    test: loadTextures.test, // test if url ends in an image\n    parse: (value: string) =>\n    ({\n        resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n        format: value.split('.').pop(),\n        src: value,\n    }),\n});\n\n// Now resolution and format can be extracted from the url\nresolver.add('foo', [\n    'image@2x.png',\n    'image.png',\n]);\n")),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveURLParser"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveURLParser")),"[]"),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L228"},"pixijs/packages/assets/src/resolver/Resolver.ts:228")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"rootpath"},"rootPath"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"rootPath"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L186"},"pixijs/packages/assets/src/resolver/Resolver.ts:186")),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," ",(0,r.kt)("strong",{parentName:"p"},"rootPath"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"rootPath"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Set the root path for root-relative URLs. By default the ",(0,r.kt)("inlineCode",{parentName:"p"},"basePath"),"'s root is used. If no ",(0,r.kt)("inlineCode",{parentName:"p"},"basePath")," is set, then the\ndefault value for browsers is ",(0,r.kt)("inlineCode",{parentName:"p"},"window.location.origin")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Application hosted on https://home.com/some-path/index.html\nresolver.basePath = 'https://home.com/some-path/';\nresolver.rootPath = 'https://home.com/';\nresolver.add('foo', '/bar.png');\nresolver.resolveUrl('foo', '/bar.png'); // => 'https://home.com/bar.png'\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rootPath")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the root path to use")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L181"},"pixijs/packages/assets/src/resolver/Resolver.ts:181")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"add"},"add"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"add"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"keysIn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"assetsIn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"data?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Tells the resolver what keys are associated with witch asset.\nThe most important thing the resolver does"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Single key, single asset:\nresolver.add('foo', 'bar.png');\nresolver.resolveUrl('foo') // => 'bar.png'\n\n// Multiple keys, single asset:\nresolver.add(['foo', 'boo'], 'bar.png');\nresolver.resolveUrl('foo') // => 'bar.png'\nresolver.resolveUrl('boo') // => 'bar.png'\n\n// Multiple keys, multiple assets:\nresolver.add(['foo', 'boo'], ['bar.png', 'bar.webp']);\nresolver.resolveUrl('foo') // => 'bar.png'\n\n// Add custom data attached to the resolver\nResolver.add(\n    'bunnyBooBooSmooth',\n    'bunny{png,webp}',\n    { scaleMode:SCALE_MODES.NEAREST }, // Base texture options\n);\n\nresolver.resolve('bunnyBooBooSmooth') // => { src: 'bunny.png', data: { scaleMode: SCALE_MODES.NEAREST } }\n")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keysIn")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The keys to map, can be an array or a single key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"assetsIn")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset"))," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),")[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The assets to associate with the key(s)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"data?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data that will be attached to the object that resolved object.")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L374"},"pixijs/packages/assets/src/resolver/Resolver.ts:374")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"addbundle"},"addBundle"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"addBundle"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"bundleId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"assets"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"This adds a bundle of assets in one go so that you can resolve them as a group.\nFor example you could add a bundle for each screen in you pixi app"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"resolver.addBundle('animals', {\n    bunny: 'bunny.png',\n    chicken: 'chicken.png',\n    thumper: 'thumper.png',\n});\n\nconst resolvedAssets = await resolver.resolveBundle('animals');\n")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bundleId")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The id of the bundle to add")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"assets")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#resolverassetsobject"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolverAssetsObject"))," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#resolverassetsarray"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolverAssetsArray"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A record of the asset or assets that will be chosen from when loading via the specified key")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L301"},"pixijs/packages/assets/src/resolver/Resolver.ts:301")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"addmanifest"},"addManifest"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"addManifest"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"manifest"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Add a manifest to the asset resolver. This is a nice way to add all the asset information in one go.\ngenerally a manifest would be built using a tool."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"manifest")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#resolvermanifest"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolverManifest"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"the manifest to add to the resolver")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L270"},"pixijs/packages/assets/src/resolver/Resolver.ts:270")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"prefer"},"prefer"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"prefer"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"...preferOrders"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Let the resolver know which assets you prefer to use when resolving assets.\nMultiple prefer user defined rules can be added."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"resolver.prefer({\n    // first look for something with the correct format, and then then correct resolution\n    priority: ['format', 'resolution'],\n    params:{\n        format:'webp', // prefer webp images\n        resolution: 2, // prefer a resolution of 2\n    }\n})\nresolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\nresolver.resolveUrl('foo') // => 'bar@2x.webp'\n")),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"...preferOrders")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.PreferOrder"},(0,r.kt)("inlineCode",{parentName:"a"},"PreferOrder")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"the prefer options")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L136"},"pixijs/packages/assets/src/resolver/Resolver.ts:136")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"reset"},"reset"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"reset"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Used for testing, this resets the resolver to its initial state"),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L234"},"pixijs/packages/assets/src/resolver/Resolver.ts:234")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"resolve"},"resolve"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"resolve"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"keys"),"): ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),">"),(0,r.kt)("p",null,"Resolves each key in the list to an asset object.\nAnother key function of the resolver! After adding all the various key/asset pairs. this will run the logic\nof finding which asset to return based on any preferences set using the ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer")," function\nby default the same key passed in will be returned if nothing is matched by the resolver."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"resolver.add('boo', 'bunny.png');\n\nresolver.resolve('boo') // => { src: 'bunny.png' }\n\n// Will return the same string as no key was added for this value..\nresolver.resolve('another-thing.png') // => { src: 'another-thing.png' }\n")),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keys")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"key or keys to resolve")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),">"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the resolve asset or a hash of resolve assets for each key specified")),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L572"},"pixijs/packages/assets/src/resolver/Resolver.ts:572")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"resolvebundle"},"resolveBundle"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"resolveBundle"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"bundleIds"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),">"," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),">",">"),(0,r.kt)("p",null,"If the resolver has had a manifest set via setManifest, this will return the assets urls for\na given bundleId or bundleIds."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Manifest Example\nconst manifest = {\n    bundles: [\n        {\n            name: 'load-screen',\n            assets: [\n                {\n                    name: 'background',\n                    srcs: 'sunset.png',\n                },\n                {\n                    name: 'bar',\n                    srcs: 'load-bar.{png,webp}',\n                },\n            ],\n        },\n        {\n            name: 'game-screen',\n            assets: [\n                {\n                    name: 'character',\n                    srcs: 'robot.png',\n                },\n                {\n                    name: 'enemy',\n                    srcs: 'bad-guy.png',\n                },\n            ],\n        },\n    ]\n};\n\nresolver.setManifest(manifest);\nconst resolved = resolver.resolveBundle('load-screen');\n")),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bundleIds")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The bundle ids to resolve")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),">"," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,r.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),">",">"),(0,r.kt)("p",null,"All the bundles assets or a hash of assets for each bundle specified"),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L500"},"pixijs/packages/assets/src/resolver/Resolver.ts:500")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"resolveurl"},"resolveUrl"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"resolveUrl"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"key"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),">"),(0,r.kt)("p",null,"Does exactly what resolve does, but returns just the URL rather than the whole asset object"),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The key or keys to resolve")))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),">"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The URLs associated with the key(s)")),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L538"},"pixijs/packages/assets/src/resolver/Resolver.ts:538")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"setbundleidentifier"},"setBundleIdentifier"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"setBundleIdentifier"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"bundleIdentifier"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Override how the resolver deals with generating bundle ids.\nmust be called before any bundles are added"),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bundleIdentifier")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"BundleIdentifierOptions")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the bundle identifier options")))),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L107"},"pixijs/packages/assets/src/resolver/Resolver.ts:107")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"setdefaultsearchparams"},"setDefaultSearchParams"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"setDefaultSearchParams"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"searchParams"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Sets the default URL search parameters for the URL resolver. The urls can be specified as a string or an object."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"searchParams")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"the default url parameters to append when resolving urls")))),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/resolver/Resolver.ts#L249"},"pixijs/packages/assets/src/resolver/Resolver.ts:249")))}k.isMDXComponent=!0}}]);