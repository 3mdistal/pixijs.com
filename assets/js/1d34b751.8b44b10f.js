"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[858],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||l[m]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={hide_table_of_contents:!0},i="Render Texture Advanced",o={unversionedId:"examples/textures/render-texture-advanced",id:"examples/textures/render-texture-advanced",title:"Render Texture Advanced",description:"",source:"@site/docs/examples/textures/render-texture-advanced.md",sourceDirName:"examples/textures",slug:"/examples/textures/render-texture-advanced",permalink:"/examples/textures/render-texture-advanced",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/textures/render-texture-advanced.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Render Texture Basic",permalink:"/examples/textures/render-texture-basic"},next:{title:"Gradient Basic",permalink:"/examples/textures/gradient-basic"}},p={},c=[],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"render-texture-advanced"},"Render Texture Advanced"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\nconst stageSize = {\n    width: app.screen.width,\n    height: app.screen.height,\n};\n\n// create two render textures... these dynamic textures will be used to draw the scene into itself\nlet renderTexture = PIXI.RenderTexture.create(stageSize);\nlet renderTexture2 = PIXI.RenderTexture.create(stageSize);\nconst currentTexture = renderTexture;\n\n// create a new sprite that uses the render texture we created above\nconst outputSprite = new PIXI.Sprite(currentTexture);\n\n// align the sprite\noutputSprite.x = 400;\noutputSprite.y = 300;\noutputSprite.anchor.set(0.5);\n\n// add to stage\napp.stage.addChild(outputSprite);\n\nconst stuffContainer = new PIXI.Container();\n\nstuffContainer.x = 400;\nstuffContainer.y = 300;\n\napp.stage.addChild(stuffContainer);\n\n// create an array of image ids..\nconst fruits = [\n    'https://beta.pixijs.com/assets/rt_object_01.png',\n    'https://beta.pixijs.com/assets/rt_object_02.png',\n    'https://beta.pixijs.com/assets/rt_object_03.png',\n    'https://beta.pixijs.com/assets/rt_object_04.png',\n    'https://beta.pixijs.com/assets/rt_object_05.png',\n    'https://beta.pixijs.com/assets/rt_object_06.png',\n    'https://beta.pixijs.com/assets/rt_object_07.png',\n    'https://beta.pixijs.com/assets/rt_object_08.png',\n];\n\n// create an array of items\nconst items = [];\n\n// now create some items and randomly position them in the stuff container\nfor (let i = 0; i < 20; i++) {\n    const item = PIXI.Sprite.from(fruits[i % fruits.length]);\n    item.x = Math.random() * 400 - 200;\n    item.y = Math.random() * 400 - 200;\n    item.anchor.set(0.5);\n    stuffContainer.addChild(item);\n    items.push(item);\n}\n\n// used for spinning!\nlet count = 0;\n\napp.ticker.add(() => {\n    for (let i = 0; i < items.length; i++) {\n    // rotate each item\n        const item = items[i];\n        item.rotation += 0.1;\n    }\n\n    count += 0.01;\n\n    // swap the buffers ...\n    const temp = renderTexture;\n    renderTexture = renderTexture2;\n    renderTexture2 = temp;\n\n    // set the new texture\n    outputSprite.texture = renderTexture;\n\n    // twist this up!\n    stuffContainer.rotation -= 0.01;\n    outputSprite.scale.set(1 + Math.sin(count) * 0.2);\n\n    // render the stage to the texture\n    // the 'true' clears the texture before the content is rendered\n    app.renderer.render(app.stage, {\n        renderTexture: renderTexture2,\n        clear: false,\n    });\n});\n")))}d.isMDXComponent=!0}}]);