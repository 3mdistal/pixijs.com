"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[7876],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),b=o,d=u["".concat(s,".").concat(b)]||u[b]||f[b]||a;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},55636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={hide_table_of_contents:!0},i="Web Worker",c={unversionedId:"examples/offscreen-canvas/web-worker",id:"examples/offscreen-canvas/web-worker",title:"Web Worker",description:"",source:"@site/docs/examples/offscreen-canvas/web-worker.md",sourceDirName:"examples/offscreen-canvas",slug:"/examples/offscreen-canvas/web-worker",permalink:"/examples/offscreen-canvas/web-worker",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/offscreen-canvas/web-worker.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Basic",permalink:"/examples/offscreen-canvas/basic"},next:{title:"Blur",permalink:"/examples/filters-basic/blur"}},s={},l=[],p={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"web-worker"},"Web Worker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n// This example is the based on demos-basic/container, but running in Web Worker.\n\nfunction workerSource(self) {\n    self.onmessage = async ({\n        data: { baseUrl, pixiWebWorkerUrl, options },\n    }) => {\n        self.importScripts(new URL(pixiWebWorkerUrl, baseUrl));\n\n        const app = new PIXI.Application<HTMLCanvasElement>(options);\ndocument.body.appendChild(app.view);\n\n        const container = new PIXI.Container();\n\n        app.stage.addChild(container);\n\n        // Create a new texture\n        const textureUrl = new URL('https://beta.pixijs.com/assets/bunny.png', baseUrl).toString();\n        const texture = PIXI.Texture.from(textureUrl);\n\n        // Create a 5x5 grid of bunnies\n        for (let i = 0; i < 25; i++) {\n            const bunny = new PIXI.Sprite(texture);\n            bunny.anchor.set(0.5);\n            bunny.x = (i % 5) * 40;\n            bunny.y = Math.floor(i / 5) * 40;\n            container.addChild(bunny);\n        }\n\n        // Move container to the center\n        container.x = app.screen.width / 2;\n        container.y = app.screen.height / 2;\n\n        // Center bunny sprite in local container coordinates\n        container.pivot.x = container.width / 2;\n        container.pivot.y = container.height / 2;\n\n        // Listen for animate update\n        app.ticker.add((delta) => {\n            // rotate the container!\n            // use delta to create frame-independent transform\n            container.rotation -= 0.01 * delta;\n        });\n    };\n}\nconst blob = new Blob(['(', workerSource, ')(self);'], { type: 'application/javascript' });\nconst url = URL.createObjectURL(blob);\nconst worker = new Worker(url);\nURL.revokeObjectURL(url);\n\nconst width = 800;\nconst height = 600;\nconst resolution = window.devicePixelRatio;\nconst canvas = document.createElement('canvas');\ncanvas.style.width = `${width}px`;\ncanvas.style.height = `${height}px`;\nconst view = canvas.transferControlToOffscreen();\n\nconst baseUrl = window.location.href;\nconst pixiWebWorkerUrl = window.PIXI_WEBWORKER_URL;\nworker.postMessage({\n    baseUrl,\n    pixiWebWorkerUrl,\n    options: {\n        width, height, resolution, view, background: 0x1099bb,\n    },\n}, [view]);\n")))}u.isMDXComponent=!0}}]);