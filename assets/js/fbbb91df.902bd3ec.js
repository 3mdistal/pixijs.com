"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[8451],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),u=a,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6007:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={hide_table_of_contents:!0},i="Instanced Geometry",s={unversionedId:"examples/mesh-and-shaders/instanced-geometry",id:"examples/mesh-and-shaders/instanced-geometry",title:"Instanced Geometry",description:"",source:"@site/docs/examples/mesh-and-shaders/instanced-geometry.md",sourceDirName:"examples/mesh-and-shaders",slug:"/examples/mesh-and-shaders/instanced-geometry",permalink:"/examples/mesh-and-shaders/instanced-geometry",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/mesh-and-shaders/instanced-geometry.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Interleaving Geometry",permalink:"/examples/mesh-and-shaders/interleaving-geometry"},next:{title:"Shadertoy",permalink:"/examples/mesh-and-shaders/shadertoy-mesh"}},c={},l=[],p={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"instanced-geometry"},"Instanced Geometry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\n\nconst geometry = new PIXI.Geometry()\n    .addAttribute('aVPos', [-100, 0, 100, 0, 0, -150]);\n\ngeometry.instanced = true;\ngeometry.instanceCount = 5;\n\nconst positionSize = 2;\nconst colorSize = 3;\nconst buffer = new PIXI.Buffer(new Float32Array(geometry.instanceCount * (positionSize + colorSize)));\n\ngeometry.addAttribute('aIPos', buffer, positionSize, false, PIXI.TYPES.FLOAT, 4 * (positionSize + colorSize), 0, true);\ngeometry.addAttribute('aICol', buffer, colorSize, false, PIXI.TYPES.FLOAT, 4 * (positionSize + colorSize), 4 * positionSize, true);\n\nfor (let i = 0; i < geometry.instanceCount; i++) {\n    const instanceOffset = i * (positionSize + colorSize);\n\n    buffer.data[instanceOffset + 0] = i * 80;\n    buffer.data[instanceOffset + 2] = Math.random();\n    buffer.data[instanceOffset + 3] = Math.random();\n    buffer.data[instanceOffset + 4] = Math.random();\n}\n\nconst shader = PIXI.Shader.from(`\n    precision mediump float;\n    attribute vec2 aVPos;\n    attribute vec2 aIPos;\n    attribute vec3 aICol;\n\n    uniform mat3 translationMatrix;\n    uniform mat3 projectionMatrix;\n\n    varying vec3 vCol;\n\n    void main() {\n        vCol = aICol;\n\n        gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVPos + aIPos, 1.0)).xy, 0.0, 1.0);\n    }`,\n\n`precision mediump float;\n\n    varying vec3 vCol;\n\n    void main() {\n        gl_FragColor = vec4(vCol, 1.0);\n    }\n\n`);\n\nconst triangles = new PIXI.Mesh(geometry, shader);\n\ntriangles.position.set(400, 300);\n\napp.stage.addChild(triangles);\n\napp.ticker.add((delta) => {\n    triangles.rotation += 0.01;\n});\n")))}d.isMDXComponent=!0}}]);