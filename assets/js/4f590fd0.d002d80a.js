"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[89240],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),d=r,y=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return t?o.createElement(y,i(i({ref:n},c),{},{components:t})):o.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},64764:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var o=t(87462),r=(t(67294),t(3905));const a={hide_table_of_contents:!0},i="Spine support",p={unversionedId:"examples/plugin-heaven/spineboy-pro",id:"examples/plugin-heaven/spineboy-pro",title:"Spine support",description:"",source:"@site/docs/examples/plugin-heaven/spineboy-pro.md",sourceDirName:"examples/plugin-heaven",slug:"/examples/plugin-heaven/spineboy-pro",permalink:"/examples/plugin-heaven/spineboy-pro",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-heaven/spineboy-pro.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Batching ADD",permalink:"/examples/plugin-heaven/unity-add-blend"},next:{title:"2D Basics",permalink:"/examples/plugin-projection/basic"}},s={},l=[],c={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spine-support"},"Spine support"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n// the plugin is here: https://github.com/gameofbombs/pixi-heaven/tree/master\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\nPIXI.heaven.applySpineMixin(PIXI.spine.Spine.prototype);\n\n// load spine data\napp.loader\n    .add('spineboypro', 'https://beta.pixijs.com/assets/pixi-spine/spineboy-pro.json')\n    .load(onAssetsLoaded);\n\napp.stage.interactive = true;\n\nfunction onAssetsLoaded(loader, res) {\n    // create a spine boy\n    const spineBoyPro = new PIXI.spine.Spine(res.spineboypro.spineData);\n\n    // set the position\n    spineBoyPro.x = app.screen.width / 2;\n    spineBoyPro.y = app.screen.height;\n\n    spineBoyPro.scale.set(0.5);\n\n    app.stage.addChild(spineBoyPro);\n\n    const singleAnimations = ['aim', 'death', 'jump', 'portal'];\n    const loopAnimations = ['hoverboard', 'idle', 'run', 'shoot', 'walk'];\n    const allAnimations = [].concat(singleAnimations, loopAnimations);\n\n    let lastAnimation = '';\n\n    // Press the screen to play a random animation\n    app.stage.on('pointerdown', () => {\n        let animation = '';\n        do {\n            animation = allAnimations[Math.floor(Math.random() * allAnimations.length)];\n        } while (animation === lastAnimation);\n\n        spineBoyPro.state.setAnimation(0, animation, loopAnimations.includes(animation));\n\n        lastAnimation = animation;\n    });\n\n    let phase = 0;\n    app.ticker.add(() => {\n        phase += 0.1;\n        const x = Math.sin(phase) * 0.25 + 0.25;\n        spineBoyPro.color.setDark(x, x, x);\n    });\n}\n")))}u.isMDXComponent=!0}}]);