"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[8585],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(t),u=r,m=c["".concat(p,".").concat(u)]||c[u]||g[u]||o;return t?a.createElement(m,i(i({ref:n},l),{},{components:t})):a.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6344:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));const o={hide_table_of_contents:!0},i="Dragon",s={unversionedId:"examples/plugin-spine/dragon",id:"examples/plugin-spine/dragon",title:"Dragon",description:"",source:"@site/docs/examples/plugin-spine/dragon.md",sourceDirName:"examples/plugin-spine",slug:"/examples/plugin-spine/dragon",permalink:"/examples/plugin-spine/dragon",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-spine/dragon.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Multipass Shader Mesh",permalink:"/examples/mesh-and-shaders/multipass-shader-generated-mesh"},next:{title:"Goblin",permalink:"/examples/plugin-spine/goblins"}},p={},d=[],l={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dragon"},"Dragon"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\napp.stop();\n\n// load spine data\napp.loader\n    .add('dragon', 'https://beta.pixijs.com/assets/pixi-spine/dragon.json')\n    .load(onAssetsLoaded);\n\nlet dragon = null;\n\nfunction onAssetsLoaded(loader, res) {\n    // instantiate the spine animation\n    dragon = new PIXI.spine.Spine(res.dragon.spineData);\n    dragon.skeleton.setToSetupPose();\n    dragon.update(0);\n    dragon.autoUpdate = false;\n\n    // create a container for the spine animation and add the animation to it\n    const dragonCage = new PIXI.Container();\n    dragonCage.addChild(dragon);\n\n    // measure the spine animation and position it inside its container to align it to the origin\n    const localRect = dragon.getLocalBounds();\n    dragon.position.set(-localRect.x, -localRect.y);\n\n    // now we can scale, position and rotate the container as any other display object\n    const scale = Math.min(\n        (app.screen.width * 0.7) / dragonCage.width,\n        (app.screen.height * 0.7) / dragonCage.height,\n    );\n    dragonCage.scale.set(scale, scale);\n    dragonCage.position.set(\n        (app.screen.width - dragonCage.width) * 0.5,\n        (app.screen.height - dragonCage.height) * 0.5,\n    );\n\n    // add the container to the stage\n    app.stage.addChild(dragonCage);\n\n    // once position and scaled, set the animation to play\n    dragon.state.setAnimation(0, 'flying', true);\n\n    app.start();\n}\n\napp.ticker.add(() => {\n    // update the spine animation, only needed if dragon.autoupdate is set to false\n    dragon.update(0.01666666666667); // HARDCODED FRAMERATE!\n});\n")))}c.isMDXComponent=!0}}]);