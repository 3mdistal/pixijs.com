"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[7757],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),k=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},o=function(e){var t=k(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),m=k(a),d=n,c=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return a?r.createElement(c,s(s({ref:t},o),{},{components:a})):r.createElement(c,s({ref:t},o))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:n,s[1]=p;for(var k=2;k<l;k++)s[k]=a[k];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5248:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>k});var r=a(87462),n=(a(67294),a(3905));const l={id:"PIXI.MaskSystem.pixi_core",title:"Class: PIXI.MaskSystem",sidebar_label:"PIXI.MaskSystem",custom_edit_url:null},s=void 0,p={unversionedId:"api/classes/PIXI.MaskSystem.pixi_core",id:"api/classes/PIXI.MaskSystem.pixi_core",title:"Class: PIXI.MaskSystem",description:"@pixi/core.MaskSystem",source:"@site/docs/api/classes/PIXI.MaskSystem.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.MaskSystem.pixi_core",permalink:"/api/classes/PIXI.MaskSystem.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.MaskSystem.pixi_core",title:"Class: PIXI.MaskSystem",sidebar_label:"PIXI.MaskSystem",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.MaskData",permalink:"/api/classes/PIXI.MaskData.pixi_core"},next:{title:"PIXI.Matrix",permalink:"/api/classes/PIXI.Matrix.pixi_math"}},i={},k=[{value:"Mask Stacks",id:"mask-stacks",level:2},{value:"Constructor:",id:"constructor",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Members",id:"members",level:2},{value:"enableScissor",id:"enablescissor",level:3},{value:"alphaMaskIndex",id:"alphamaskindex",level:3},{value:"alphaMaskPool",id:"alphamaskpool",level:3},{value:"Methods",id:"methods",level:2},{value:"detect",id:"detect",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"pop",id:"pop",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"popColorMask",id:"popcolormask",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"popSpriteMask",id:"popspritemask",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"push",id:"push",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"pushColorMask",id:"pushcolormask",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"pushSpriteMask",id:"pushspritemask",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"setMaskStack",id:"setmaskstack",level:3},{value:"Parameters:",id:"parameters-8",level:4}],o={toc:k};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{class:"package-name"},(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".MaskSystem")),(0,n.kt)("p",null,"System plugin to the renderer to manage masks.\nThere are three built-in types of masking",":",(0,n.kt)("strong",{parentName:"p"},"Scissor Masking"),":"," Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.",(0,n.kt)("strong",{parentName:"p"},"Stencil Masking"),":"," Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does cause the mask to be rendered ",(0,n.kt)("strong",{parentName:"p"},"twice")," for each masking operation; hence, minimize the rendering cost of your masks.",(0,n.kt)("strong",{parentName:"p"},"Sprite Mask Filtering"),":"," Sprite mask filtering discards pixels based on the red channel of the sprite-mask's texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins."),(0,n.kt)("p",null,"The best type of masking is auto-detected when you ",(0,n.kt)("inlineCode",{parentName:"p"},"push")," one. To use scissor masking, you must pass in a ",(0,n.kt)("inlineCode",{parentName:"p"},"Graphics"),"object with just a rectangle drawn."),(0,n.kt)("h2",{id:"mask-stacks"},"Mask Stacks"),(0,n.kt)("p",null,"In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask stack stores the currently applied masks in order. Each ",(0,n.kt)("a",{parentName:"p",href:"../classes/PIXI.BaseRenderTexture.pixi_core"},"PIXI.BaseRenderTexture")," holds its own mask stack, i.e. when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target."),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"constructor"},"Constructor:"),(0,n.kt)("h4",null,(0,n.kt)("code",null,"new PIXI.MaskSystem(renderer: Renderer) ")),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"renderer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Renderer")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null)),(0,n.kt)("td",{parentName:"tr",align:null},"The renderer this System works for."))))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"members"},"Members"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"enablescissor"},"enableScissor"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"boolean")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,n.kt)("code",null,"true")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Flag to enable scissor masking.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"alphamaskindex"},"alphaMaskIndex"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"number")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,n.kt)("code",null,"0")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Current index of alpha mask pool.")),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"alphamaskpool"},"alphaMaskPool"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"Array","<","SpriteMaskFilter[]",">")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Pool of used sprite mask filters.")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"detect"},"detect"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(maskData",":"," MaskData) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Sets type of MaskData based on its maskObject."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskData"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"MaskData")),(0,n.kt)("td",{parentName:"tr",align:null}))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"pop"},"pop"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(target",":"," PIXI.IMaskTarget) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Removes the last mask from the mask stack and doesn't return it.\nNOTE",":"," The batch renderer should be flushed beforehand to render the masked contents before the mask is removed."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"target"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.IMaskTarget")),(0,n.kt)("td",{parentName:"tr",align:null},"Display Object to pop the mask from"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"popcolormask"},"popColorMask"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(maskData",":"," MaskData) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Pops the color mask."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskData"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"MaskData")),(0,n.kt)("td",{parentName:"tr",align:null},"The mask data"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"popspritemask"},"popSpriteMask"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(maskData",":"," MaskData) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Removes the last filter from the filter stack and doesn't return it."),(0,n.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskData"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"MaskData")),(0,n.kt)("td",{parentName:"tr",align:null},"Sprite to be used as the mask."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"push"},"push"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(target",":"," PIXI.DisplayObject, maskDataOrTarget",":"," PIXI.MaskData ","|"," PIXI.Sprite ","|"," PIXI.Graphics ","|"," PIXI.DisplayObject) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Enables the mask and appends it to the current mask stack.\nNOTE",":"," The batch renderer should be flushed beforehand to prevent pending renders from being masked."),(0,n.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"target"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.DisplayObject")),(0,n.kt)("td",{parentName:"tr",align:null},"Display Object to push the mask to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskDataOrTarget"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"PIXI.MaskData ","|"," PIXI.Sprite ","|"," PIXI.Graphics ","|"," PIXI.DisplayObject")),(0,n.kt)("td",{parentName:"tr",align:null},"The masking data."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"pushcolormask"},"pushColorMask"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(maskData",":"," MaskData) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Pushes the color mask."),(0,n.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskData"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"MaskData")),(0,n.kt)("td",{parentName:"tr",align:null},"The mask data"))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"pushspritemask"},"pushSpriteMask"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(maskData",":"," MaskData) -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Applies the Mask and adds it to the current filter stack."),(0,n.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskData"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"MaskData")),(0,n.kt)("td",{parentName:"tr",align:null},"Sprite to be used as the mask."))))),(0,n.kt)("hr",null),(0,n.kt)("article",null,(0,n.kt)("h3",{id:"setmaskstack"},"setMaskStack"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Type:")," ",(0,n.kt)("code",null,"(maskStack",":"," Array","<","MaskData",">",") -",">"," void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Changes the mask stack that is used by this System."),(0,n.kt)("h4",{id:"parameters-8"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maskStack"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"Array","<","MaskData",">")),(0,n.kt)("td",{parentName:"tr",align:null},"The mask stack"))))),(0,n.kt)("hr",null))}m.isMDXComponent=!0}}]);