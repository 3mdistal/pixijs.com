"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[54698],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),f=c(t),m=a,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||o;return t?r.createElement(d,i(i({ref:n},l),{},{components:t})):r.createElement(d,i({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[f]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99350:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={hide_table_of_contents:!0},i="Joins and caps",p={unversionedId:"examples/plugin-graphics-smooth/join-cap",id:"examples/plugin-graphics-smooth/join-cap",title:"Joins and caps",description:"",source:"@site/docs/examples/plugin-graphics-smooth/join-cap.md",sourceDirName:"examples/plugin-graphics-smooth",slug:"/examples/plugin-graphics-smooth/join-cap",permalink:"/examples/plugin-graphics-smooth/join-cap",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-graphics-smooth/join-cap.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"Simple",permalink:"/examples/plugin-graphics-smooth/simple"},next:{title:"Very thin line",permalink:"/examples/plugin-graphics-smooth/thin-square"}},s={},c=[],l={toc:c};function f(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"joins-and-caps"},"Joins and caps"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\n// Top - smoothed graphics\n// Bottom - usual pixi graphics\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ resizeTo: window });\ndocument.body.appendChild(app.view);\n\nconst graphics = new PIXI.smooth.SmoothGraphics();\napp.stage.addChild(graphics);\n\nconst graphics2 = new PIXI.Graphics();\ngraphics2.y = 300;\napp.stage.addChild(graphics2);\n\nlet phase = 0;\n\nfunction addLine(gfx, y, len, rad, cap) {\n    gfx.lineStyle({\n        width: 30, color: 0xffffff, alpha: 1, join: PIXI.LINE_JOIN.MITER, cap,\n    });\n    gfx.moveTo(150 - len, y);\n    gfx.lineTo(150, y);\n    gfx.lineTo(150 + Math.cos(phase) * rad, y + Math.sin(phase) * rad);\n\n    gfx.lineStyle({\n        width: 30, color: 0xffffff, alpha: 1, join: PIXI.LINE_JOIN.BEVEL, cap,\n    });\n    gfx.moveTo(350 + Math.cos(phase) * rad, y + Math.sin(phase) * rad);\n    gfx.lineTo(350, y);\n    gfx.lineTo(350 - len, y);\n\n    gfx.lineStyle({\n        width: 30, color: 0xffffff, alpha: 1, join: PIXI.LINE_JOIN.ROUND, cap,\n    });\n    gfx.moveTo(550 - len, y);\n    gfx.lineTo(550, y);\n    gfx.lineTo(550 + Math.cos(phase) * rad, y + Math.sin(phase) * rad);\n}\n\nfunction makeFigures(gfx) {\n    gfx.clear();\n\n    addLine(gfx, 100, 50, 60, PIXI.LINE_CAP.BUTT);\n    addLine(gfx, 200, 50, 60, PIXI.LINE_CAP.ROUND);\n}\n\n// graphics.rotation = Math.PI * 3 / 2 - 0.0001;\napp.ticker.add((delta) => {\n    phase -= 0.008 * delta;\n    makeFigures(graphics);\n    makeFigures(graphics2);\n});\n")))}f.isMDXComponent=!0}}]);