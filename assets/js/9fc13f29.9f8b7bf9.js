"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[99152],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=o(a),u=s,h=m["".concat(p,".").concat(u)]||m[u]||k[u]||r;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,l=new Array(r);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:s,l[1]=i;for(var o=2;o<r;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},38715:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var n=a(87462),s=(a(67294),a(3905));const r={id:"pixi_assets.AssetsClass",title:"Class: AssetsClass",sidebar_label:"AssetsClass",custom_edit_url:null},l=void 0,i={unversionedId:"api/classes/pixi_assets.AssetsClass",id:"api/classes/pixi_assets.AssetsClass",title:"Class: AssetsClass",description:"@pixi/assets.AssetsClass",source:"@site/docs/api/classes/pixi_assets.AssetsClass.md",sourceDirName:"api/classes",slug:"/api/classes/pixi_assets.AssetsClass",permalink:"/api/classes/pixi_assets.AssetsClass",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"pixi_assets.AssetsClass",title:"Class: AssetsClass",sidebar_label:"AssetsClass",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Application",permalink:"/api/classes/pixi_app.Application"},next:{title:"Loader",permalink:"/api/classes/pixi_assets.Loader"}},p={},o=[{value:"Assets Loading",id:"assets-loading",level:3},{value:"Textures",id:"textures",level:3},{value:"Sprite sheets",id:"sprite-sheets",level:4},{value:"Fonts",id:"fonts",level:3},{value:"Background Loading",id:"background-loading",level:3},{value:"Manifest and Bundles",id:"manifest-and-bundles",level:3},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"cache",id:"cache",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"loader",id:"loader",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"resolver",id:"resolver",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"Accessors",id:"accessors",level:2},{value:"detections",id:"detections",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"preferWorkers",id:"preferworkers",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"Methods",id:"methods",level:2},{value:"add",id:"add",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"addBundle",id:"addbundle",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"backgroundLoad",id:"backgroundload",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"backgroundLoadBundle",id:"backgroundloadbundle",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"get",id:"get",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"init",id:"init",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"load",id:"load",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"loadBundle",id:"loadbundle",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"reset",id:"reset",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"unload",id:"unload",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"unloadBundle",id:"unloadbundle",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-19",level:4}],d={toc:o};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/api/modules/pixi_assets"},"@pixi/assets"),".AssetsClass"),(0,s.kt)("p",null,"A one stop shop for all Pixi resource management!\nSuper modern and easy to use, with enough flexibility to customize and do what you need!"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Memberof"))),(0,s.kt)("p",null,"PIXI"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Namespace"))),(0,s.kt)("p",null,"Assets"),(0,s.kt)("p",null,"Only one Asset Class exists accessed via the Global Asset object."),(0,s.kt)("p",null,"It has four main responsibilities:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Allows users to map URLs to keys and resolve them according to the user's browser capabilities"),(0,s.kt)("li",{parentName:"ol"},"Loads the resources and transforms them into assets that developers understand."),(0,s.kt)("li",{parentName:"ol"},"Caches the assets and provides a way to access them."),(0,s.kt)("li",{parentName:"ol"},"Allow developers to unload assets and clear the cache.")),(0,s.kt)("p",null,"It also has a few advanced features:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Allows developers to provide a manifest upfront of all assets and help manage them via 'bundles'."),(0,s.kt)("li",{parentName:"ol"},"Allows users to background load assets. Shortening (or eliminating) load times and improving UX. With this feature,\nin-game loading bars can be a thing of the past!")),(0,s.kt)("h3",{id:"assets-loading"},"Assets Loading"),(0,s.kt)("p",null,"Do not be afraid to load things multiple times - under the hood, it will NEVER load anything more than once."),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Assets } from 'pixi.js';\n\npromise1 = Assets.load('bunny.png')\npromise2 = Assets.load('bunny.png')\n\n// promise1 === promise2\n")),(0,s.kt)("p",null,"Here both promises will be the same. Once resolved... Forever resolved! It makes for really easy resource management!"),(0,s.kt)("p",null,"Out of the box it supports the following files:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"textures (avif, webp, png, jpg, gif)"),(0,s.kt)("li",{parentName:"ul"},"sprite sheets (json)"),(0,s.kt)("li",{parentName:"ul"},"bitmap fonts (xml, fnt, txt)"),(0,s.kt)("li",{parentName:"ul"},"web fonts (ttf, woff, woff2)"),(0,s.kt)("li",{parentName:"ul"},"json files (json)"),(0,s.kt)("li",{parentName:"ul"},"text files (txt)")),(0,s.kt)("p",null,"More types can be added fairly easily by creating additional loader parsers."),(0,s.kt)("h3",{id:"textures"},"Textures"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Textures are loaded as ImageBitmap on a worker thread where possible.\nLeading to much less janky load + parse times."),(0,s.kt)("li",{parentName:"ul"},"By default, we will prefer to load AVIF and WebP image files if you specify them.\nBut if the browser doesn't support AVIF or WebP we will fall back to png and jpg."),(0,s.kt)("li",{parentName:"ul"},"Textures can also be accessed via Texture.from(...) and now use this asset manager under the hood!"),(0,s.kt)("li",{parentName:"ul"},"Don't worry if you set preferences for textures that don't exist (for example you prefer 2x resolutions images\nbut only 1x is available for that texture, the Asset manager will pick that up as a fallback automatically)")),(0,s.kt)("h4",{id:"sprite-sheets"},"Sprite sheets"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It's hard to know what resolution a sprite sheet is without loading it first, to address this\nthere is a naming convention we have added that will let Pixi understand the image format and resolution\nof the spritesheet via its file name:")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"my-spritesheet{resolution}.{imageFormat}.json")),(0,s.kt)("p",null,"For example:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"my-spritesheet@2x.webp.json")," // 2x resolution, WebP sprite sheet\n",(0,s.kt)("inlineCode",{parentName:"p"},"my-spritesheet@0.5x.png.json")," // 0.5x resolution, png sprite sheet"),(0,s.kt)("p",null,"This is optional! You can just load a sprite sheet as normal.\nThis is only useful if you have a bunch of different res / formatted spritesheets."),(0,s.kt)("h3",{id:"fonts"},"Fonts"),(0,s.kt)("p",null,"Web fonts will be loaded with all weights.\nIt is possible to load only specific weights by doing the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Assets } from 'pixi.js';\n\n// Load specific weights..\nawait Assets.load({\n    data: {\n        weights: ['normal'], // Only loads the weight\n    },\n    src: `outfit.woff2`,\n});\n\n// Load everything...\nawait Assets.load(`outfit.woff2`);\n")),(0,s.kt)("h3",{id:"background-loading"},"Background Loading"),(0,s.kt)("p",null,"Background loading will load stuff for you passively behind the scenes. To minimize jank,\nit will only load one asset at a time. As soon as a developer calls ",(0,s.kt)("inlineCode",{parentName:"p"},"Assets.load(...)")," the\nbackground loader is paused and requested assets are loaded as a priority.\nDon't worry if something is in there that's already loaded, it will just get skipped!"),(0,s.kt)("p",null,"You still need to call ",(0,s.kt)("inlineCode",{parentName:"p"},"Assets.load(...)")," to get an asset that has been loaded in the background.\nIt's just that this promise will resolve instantly if the asset\nhas already been loaded."),(0,s.kt)("h3",{id:"manifest-and-bundles"},"Manifest and Bundles"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Manifest is a JSON file that contains a list of all assets and their properties."),(0,s.kt)("li",{parentName:"ul"},"Bundles are a way to group assets together.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Assets } from 'pixi.js';\n\n// Manifest Example\nconst manifest = {\n    bundles: [\n        {\n            name: 'load-screen',\n            assets: [\n                {\n                    name: 'background',\n                    srcs: 'sunset.png',\n                },\n                {\n                    name: 'bar',\n                    srcs: 'load-bar.{png,webp}',\n                },\n            ],\n        },\n        {\n            name: 'game-screen',\n            assets: [\n                {\n                    name: 'character',\n                    srcs: 'robot.png',\n                },\n                {\n                    name: 'enemy',\n                    srcs: 'bad-guy.png',\n                },\n            ],\n        },\n    ]\n};\n\nawait Asset.init({ manifest });\n\n// Load a bundle...\nloadScreenAssets = await Assets.loadBundle('load-screen');\n// Load another bundle...\ngameScreenAssets = await Assets.loadBundle('game-screen');\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\nconst bunny = await Assets.load('bunny.png');\n")),(0,s.kt)("h2",{id:"constructors"},"Constructors"),(0,s.kt)("h3",{id:"constructor"},"constructor"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("strong",{parentName:"p"},"new AssetsClass"),"()"),(0,s.kt)("h4",{id:"defined-in"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L223"},"pixijs/packages/assets/src/Assets.ts:223")),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("h3",{id:"cache"},"cache"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("strong",{parentName:"p"},"cache"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"CacheClass")),(0,s.kt)("p",null,"The global cache of all assets within PixiJS"),(0,s.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L214"},"pixijs/packages/assets/src/Assets.ts:214")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"loader"},"loader"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("strong",{parentName:"p"},"loader"),": ",(0,s.kt)("a",{parentName:"p",href:"/api/classes/pixi_assets.Loader"},(0,s.kt)("inlineCode",{parentName:"a"},"Loader"))),(0,s.kt)("p",null,"The loader, loads stuff!"),(0,s.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L209"},"pixijs/packages/assets/src/Assets.ts:209")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"resolver"},"resolver"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("strong",{parentName:"p"},"resolver"),": ",(0,s.kt)("a",{parentName:"p",href:"/api/classes/pixi_assets.Resolver"},(0,s.kt)("inlineCode",{parentName:"a"},"Resolver"))),(0,s.kt)("p",null,"the resolver to map various urls"),(0,s.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L204"},"pixijs/packages/assets/src/Assets.ts:204")),(0,s.kt)("h2",{id:"accessors"},"Accessors"),(0,s.kt)("h3",{id:"detections"},"detections"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("inlineCode",{parentName:"p"},"get")," ",(0,s.kt)("strong",{parentName:"p"},"detections"),"(): ",(0,s.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.FormatDetectionParser"},(0,s.kt)("inlineCode",{parentName:"a"},"FormatDetectionParser")),"[]"),(0,s.kt)("p",null,"All the detection parsers currently added to the Assets class."),(0,s.kt)("h4",{id:"returns"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/api/interfaces/pixi_assets.FormatDetectionParser"},(0,s.kt)("inlineCode",{parentName:"a"},"FormatDetectionParser")),"[]"),(0,s.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L815"},"pixijs/packages/assets/src/Assets.ts:815")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"preferworkers"},"preferWorkers"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("inlineCode",{parentName:"p"},"get")," ",(0,s.kt)("strong",{parentName:"p"},"preferWorkers"),"(): ",(0,s.kt)("inlineCode",{parentName:"p"},"boolean")),(0,s.kt)("p",null,"When set to ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),", loading and decoding images will happen with Worker thread,\nif available on the browser. This is much more performant as network requests\nand decoding can be expensive on the CPU. However, not all environments support\nWorkers, in some cases it can be helpful to disable by setting to ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Default"))),(0,s.kt)("p",null,"true"),(0,s.kt)("h4",{id:"returns-1"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"boolean")),(0,s.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L827"},"pixijs/packages/assets/src/Assets.ts:827")),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("inlineCode",{parentName:"p"},"set")," ",(0,s.kt)("strong",{parentName:"p"},"preferWorkers"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"value"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("h4",{id:"parameters"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"value")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,s.kt)("h4",{id:"returns-2"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L831"},"pixijs/packages/assets/src/Assets.ts:831")),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"add"},"add"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"add"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"keysIn"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"assetsIn"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"data?"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("p",null,"Allows you to specify how to resolve any assets load requests.\nThere are a few ways to add things here as shown below:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\n// Simple\nAssets.add('bunnyBooBoo', 'bunny.png');\nconst bunny = await Assets.load('bunnyBooBoo');\n\n// Multiple keys:\nAssets.add(['burger', 'chicken'], 'bunny.png');\n\nconst bunny = await Assets.load('burger');\nconst bunny2 = await Assets.load('chicken');\n\n// passing options to to the object\nAssets.add(\n    'bunnyBooBooSmooth',\n    'bunny{png,webp}',\n    { scaleMode: SCALE_MODES.NEAREST }, // Base texture options\n);\n\n// Multiple assets\n\n// The following all do the same thing:\n\nAssets.add('bunnyBooBoo', 'bunny{png,webp}');\n\nAssets.add('bunnyBooBoo', [\n    'bunny.png',\n    'bunny.webp',\n]);\n\nAssets.add('bunnyBooBoo', [\n    {\n        format: 'png',\n        src: 'bunny.png',\n    },\n    {\n        format: 'webp',\n        src: 'bunny.webp',\n    },\n]);\n\nconst bunny = await Assets.load('bunnyBooBoo'); // Will try to load WebP if available\n")),(0,s.kt)("h4",{id:"parameters-1"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"keysIn")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the key or keys that you will reference when loading this asset")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"assetsIn")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," (",(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.ResolveAsset"},(0,s.kt)("inlineCode",{parentName:"a"},"ResolveAsset")),")[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the asset or assets that will be chosen from when loading via the specified key")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"data?")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"unknown")),(0,s.kt)("td",{parentName:"tr",align:"left"},"asset-specific data that will be passed to the loaders - Useful if you want to initiate loaded objects with specific data")))),(0,s.kt)("h4",{id:"returns-3"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L373"},"pixijs/packages/assets/src/Assets.ts:373")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"addbundle"},"addBundle"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"addBundle"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"bundleId"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"assets"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("p",null,"This adds a bundle of assets in one go so that you can load them as a group.\nFor example you could add a bundle for each screen in you pixi app"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\nAssets.addBundle('animals', {\n    bunny: 'bunny.png',\n    chicken: 'chicken.png',\n    thumper: 'thumper.png',\n});\n\nconst assets = await Assets.loadBundle('animals');\n")),(0,s.kt)("h4",{id:"parameters-2"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"bundleId")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")),(0,s.kt)("td",{parentName:"tr",align:"left"},"the id of the bundle to add")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"assets")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#resolverassetsobject"},(0,s.kt)("inlineCode",{parentName:"a"},"ResolverAssetsObject"))," ","|"," ",(0,s.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#resolverassetsarray"},(0,s.kt)("inlineCode",{parentName:"a"},"ResolverAssetsArray"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"a record of the asset or assets that will be chosen from when loading via the specified key")))),(0,s.kt)("h4",{id:"returns-4"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L460"},"pixijs/packages/assets/src/Assets.ts:460")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"backgroundload"},"backgroundLoad"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"backgroundLoad"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"urls"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("p",null,"Initiate a background load of some assets. It will passively begin to load these assets in the background.\nSo when you actually come to loading them you will get a promise that resolves to the loaded assets immediately"),(0,s.kt)("p",null,"An example of this might be that you would background load game assets after your inital load.\nthen when you got to actually load your game screen assets when a player goes to the game - the loading\nwould already have stared or may even be complete, saving you having to show an interim load bar."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\nAssets.backgroundLoad('bunny.png');\n\n// later on in your app...\nawait Assets.loadBundle('bunny.png'); // Will resolve quicker as loading may have completed!\n")),(0,s.kt)("h4",{id:"parameters-3"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"urls")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the url / urls you want to background load")))),(0,s.kt)("h4",{id:"returns-5"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L577"},"pixijs/packages/assets/src/Assets.ts:577")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"backgroundloadbundle"},"backgroundLoadBundle"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"backgroundLoadBundle"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"bundleIds"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("p",null,"Initiate a background of a bundle, works exactly like backgroundLoad but for bundles.\nthis can only be used if the loader has been initiated with a manifest"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\nawait Assets.init({\n    manifest: {\n        bundles: [\n            {\n                name: 'load-screen',\n                assets: [...],\n            },\n            ...\n        ],\n    },\n});\n\nAssets.backgroundLoadBundle('load-screen');\n\n// Later on in your app...\nawait Assets.loadBundle('load-screen'); // Will resolve quicker as loading may have completed!\n")),(0,s.kt)("h4",{id:"parameters-4"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"bundleIds")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the bundleId / bundleIds you want to background load")))),(0,s.kt)("h4",{id:"returns-6"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L618"},"pixijs/packages/assets/src/Assets.ts:618")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"get"},"get"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"get"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,s.kt)("inlineCode",{parentName:"p"},"keys"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"T")),(0,s.kt)("p",null,"Instantly gets an asset already loaded from the cache. If the asset has not yet been loaded,\nit will return undefined. So it's on you! When in doubt just use ",(0,s.kt)("inlineCode",{parentName:"p"},"Assets.load")," instead.\n(Remember, the loader will never load things more than once!)"),(0,s.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"T")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"any"))))),(0,s.kt)("h4",{id:"parameters-5"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"keys")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")),(0,s.kt)("td",{parentName:"tr",align:"left"},"The key or keys for the assets that you want to access")))),(0,s.kt)("h4",{id:"returns-7"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"T")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The assets or hash of assets requested")),(0,s.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L659"},"pixijs/packages/assets/src/Assets.ts:659")),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"get"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,s.kt)("inlineCode",{parentName:"p"},"keys"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,s.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"T")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"any"))))),(0,s.kt)("h4",{id:"parameters-6"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"keys")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[]")))),(0,s.kt)("h4",{id:"returns-8"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,s.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L660"},"pixijs/packages/assets/src/Assets.ts:660")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"init"},"init"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"init"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"options?"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("p",null,"Best practice is to call this function before any loading commences\nInitiating is the best time to add any customization to the way things are loaded."),(0,s.kt)("p",null,"you do not need to call this for the Asset class to work, only if you want to set any initial properties"),(0,s.kt)("h4",{id:"parameters-7"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"options")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.AssetInitOptions"},(0,s.kt)("inlineCode",{parentName:"a"},"AssetInitOptions"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"options to initialize the Asset manager with")))),(0,s.kt)("h4",{id:"returns-9"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L242"},"pixijs/packages/assets/src/Assets.ts:242")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"load"},"load"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"load"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,s.kt)("inlineCode",{parentName:"p"},"urls"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"onProgress?"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,s.kt)("p",null,"Loads your assets! You pass in a key or URL and it will return a promise that\nresolves to the loaded asset. If multiple assets a requested, it will return a hash of assets."),(0,s.kt)("p",null,"Don't worry about loading things multiple times, behind the scenes assets are only ever loaded\nonce and the same promise reused behind the scenes so you can safely call this function multiple\ntimes with the same key and it will always return the same asset."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\n// Load a URL:\nconst myImageTexture = await Assets.load('http://some.url.com/image.png'); // => returns a texture\n\nAssets.add('thumper', 'bunny.png');\nAssets.add('chicko', 'chicken.png');\n\n// Load multiple assets:\nconst textures = await Assets.load(['thumper', 'chicko']); // => {thumper: Texture, chicko: Texture}\n")),(0,s.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"T")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"any"))))),(0,s.kt)("h4",{id:"parameters-8"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"urls")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.LoadAsset"},(0,s.kt)("inlineCode",{parentName:"a"},"LoadAsset")),"<",(0,s.kt)("inlineCode",{parentName:"td"},"any"),">"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the urls to load")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"onProgress?")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#progresscallback"},(0,s.kt)("inlineCode",{parentName:"a"},"ProgressCallback"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"optional function that is called when progress on asset loading is made. The function is passed a single parameter, ",(0,s.kt)("inlineCode",{parentName:"td"},"progress"),", which represents the percentage (0.0 - 1.0) of the assets loaded.")))),(0,s.kt)("h4",{id:"returns-10"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the assets that were loaded, either a single asset or a hash of assets")),(0,s.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L402"},"pixijs/packages/assets/src/Assets.ts:402")),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"load"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,s.kt)("inlineCode",{parentName:"p"},"urls"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"onProgress?"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">",">"),(0,s.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"T")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"any"))))),(0,s.kt)("h4",{id:"parameters-9"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"urls")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[] ","|"," ",(0,s.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.LoadAsset"},(0,s.kt)("inlineCode",{parentName:"a"},"LoadAsset")),"<",(0,s.kt)("inlineCode",{parentName:"td"},"any"),">","[]")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"onProgress?")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#progresscallback"},(0,s.kt)("inlineCode",{parentName:"a"},"ProgressCallback")))))),(0,s.kt)("h4",{id:"returns-11"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"T"),">",">"),(0,s.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L406"},"pixijs/packages/assets/src/Assets.ts:406")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"loadbundle"},"loadBundle"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"loadBundle"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"bundleIds"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"onProgress?"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,s.kt)("p",null,"Bundles are a way to load multiple assets at once.\nIf a manifest has been provided to the init function then you can load a bundle, or bundles.\nyou can also add bundles via ",(0,s.kt)("inlineCode",{parentName:"p"},"addBundle")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\n// Manifest Example\nconst manifest = {\n    bundles: [\n        {\n            name: 'load-screen',\n            assets: [\n                {\n                    name: 'background',\n                    srcs: 'sunset.png',\n                },\n                {\n                    name: 'bar',\n                    srcs: 'load-bar.{png,webp}',\n                },\n            ],\n        },\n        {\n            name: 'game-screen',\n            assets: [\n                {\n                    name: 'character',\n                    srcs: 'robot.png',\n                },\n                {\n                    name: 'enemy',\n                    srcs: 'bad-guy.png',\n                },\n            ],\n        },\n    ]\n};\n\nawait Asset.init({ manifest });\n\n// Load a bundle...\nloadScreenAssets = await Assets.loadBundle('load-screen');\n// Load another bundle...\ngameScreenAssets = await Assets.loadBundle('game-screen');\n")),(0,s.kt)("h4",{id:"parameters-10"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"bundleIds")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the bundle id or ids to load")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"onProgress?")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"td",href:"/api/modules/pixi_assets#progresscallback"},(0,s.kt)("inlineCode",{parentName:"a"},"ProgressCallback"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Optional function that is called when progress on asset loading is made. The function is passed a single parameter, ",(0,s.kt)("inlineCode",{parentName:"td"},"progress"),", which represents the percentage (0.0 - 1.0) of the assets loaded. Do not use this function to detect when assets are complete and available, instead use the Promise returned by this function.")))),(0,s.kt)("h4",{id:"returns-12"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,s.kt)("p",null,"all the bundles assets or a hash of assets for each bundle specified"),(0,s.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L517"},"pixijs/packages/assets/src/Assets.ts:517")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"reset"},"reset"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"reset"),"(): ",(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("p",null,"Only intended for development purposes.\nThis will wipe the resolver and caches.\nYou will need to reinitialize the Asset"),(0,s.kt)("h4",{id:"returns-13"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"void")),(0,s.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L643"},"pixijs/packages/assets/src/Assets.ts:643")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"unload"},"unload"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"unload"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"urls"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("p",null,"Unload an asset or assets. As the Assets class is responsible for creating the assets via the ",(0,s.kt)("inlineCode",{parentName:"p"},"load")," function\nthis will make sure to destroy any assets and release them from memory.\nOnce unloaded, you will need to load the asset again."),(0,s.kt)("p",null,"Use this to help manage assets if you find that you have a large app and you want to free up memory."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"it's up to you as the developer to make sure that textures are not actively being used when you unload them,\nPixi won't break but you will end up with missing assets. Not a good look for the user!")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\n// Load a URL:\nconst myImageTexture = await Assets.load('http://some.url.com/image.png'); // => returns a texture\n\nawait Assets.unload('http://some.url.com/image.png')\n\n// myImageTexture will be destroyed now.\n\n// Unload multiple assets:\nconst textures = await Assets.unload(['thumper', 'chicko']);\n")),(0,s.kt)("h4",{id:"parameters-11"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"urls")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[] ","|"," ",(0,s.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.LoadAsset"},(0,s.kt)("inlineCode",{parentName:"a"},"LoadAsset")),"<",(0,s.kt)("inlineCode",{parentName:"td"},"any"),">"," ","|"," ",(0,s.kt)("a",{parentName:"td",href:"/api/interfaces/pixi_assets.LoadAsset"},(0,s.kt)("inlineCode",{parentName:"a"},"LoadAsset")),"<",(0,s.kt)("inlineCode",{parentName:"td"},"any"),">","[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the urls to unload")))),(0,s.kt)("h4",{id:"returns-14"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L745"},"pixijs/packages/assets/src/Assets.ts:745")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"unloadbundle"},"unloadBundle"),(0,s.kt)("p",null,"\u25b8 ",(0,s.kt)("strong",{parentName:"p"},"unloadBundle"),"(",(0,s.kt)("inlineCode",{parentName:"p"},"bundleIds"),"): ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("p",null,"Bundles are a way to manage multiple assets at once.\nthis will unload all files in a bundle."),(0,s.kt)("p",null,"once a bundle has been unloaded, you need to load it again to have access to the assets."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Assets } from 'pixi.js';\n\nAssets.addBundle({\n    'thumper': 'http://some.url.com/thumper.png',\n})\n\nconst assets = await Assets.loadBundle('thumper');\n\n// Now to unload...\n\nawait Assets.unloadBundle('thumper');\n\n// All assets in the assets object will now have been destroyed and purged from the cache\n")),(0,s.kt)("h4",{id:"parameters-12"},"Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"bundleIds")),(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,s.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,s.kt)("td",{parentName:"tr",align:"left"},"the bundle id or ids to unload")))),(0,s.kt)("h4",{id:"returns-15"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,s.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/pixijs/pixijs/blob/2194fe5c5/packages/assets/src/Assets.ts#L785"},"pixijs/packages/assets/src/Assets.ts:785")))}m.isMDXComponent=!0}}]);