"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[8557],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>b});var o=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=o.createContext({}),c=function(n){var e=o.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},l=function(n){var e=c(n.components);return o.createElement(s.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},g=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,l=p(n,["components","mdxType","originalType","parentName"]),d=c(t),g=r,b=d["".concat(s,".").concat(g)]||d[g]||u[g]||a;return t?o.createElement(b,i(i({ref:e},l),{},{components:t})):o.createElement(b,i({ref:e},l))}));function b(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,i=new Array(a);i[0]=g;var p={};for(var s in e)hasOwnProperty.call(e,s)&&(p[s]=e[s]);p.originalType=n,p[d]="string"==typeof n?n:r,i[1]=p;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},61282:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const a={hide_table_of_contents:!0},i="2D Plane Tiling",p={unversionedId:"examples/plugin-projection/plane-tiling",id:"examples/plugin-projection/plane-tiling",title:"2D Plane Tiling",description:"",source:"@site/docs/examples/plugin-projection/plane-tiling.md",sourceDirName:"examples/plugin-projection",slug:"/examples/plugin-projection/plane-tiling",permalink:"/examples/plugin-projection/plane-tiling",draft:!1,editUrl:"https://github.com/pixijs/pixijs.com/tree/main/docs/examples/plugin-projection/plane-tiling.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"examplesSidebar",previous:{title:"2D Plane",permalink:"/examples/plugin-projection/plane"},next:{title:"2D Quad projective",permalink:"/examples/plugin-projection/quad-homo"}},s={},c=[],l={toc:c};function d(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2d-plane-tiling"},"2D Plane Tiling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"playground",playground:!0},"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application<HTMLCanvasElement>({ backgroundColor: 0x103322, resizeTo: window });\ndocument.body.appendChild(app.view);\n\nconst squareFar = new PIXI.Sprite(PIXI.Texture.WHITE);\nsquareFar.tint = 0xff0000;\nsquareFar.factor = 1;\nsquareFar.anchor.set(0.5);\nsquareFar.position.set(app.screen.width / 2, 50);\n\n// create a new Sprite from an image path\nconst container = new PIXI.projection.Container2d();\ncontainer.position.set(app.screen.width / 2, app.screen.height);\n\n// tiling - takes whole screen, anchor and position are the same as of sprite surface\n// different tint, to see the black part\nconst tiling = new PIXI.projection.TilingSprite2d(PIXI.Texture.from('https://beta.pixijs.com/assets/bg_plane.jpg'), app.screen.width, app.screen.height);\ntiling.position.set(app.screen.width / 2, app.screen.height);\ntiling.anchor.set(0.5, 1.0);\ntiling.tint = 0x808080;\n\nconst surface = new PIXI.projection.Sprite2d(PIXI.Texture.from('https://beta.pixijs.com/assets/bg_plane.jpg'));\nsurface.anchor.set(0.5, 1.0);\n// surface.scale.y = -1; //sorry, have to do that to make a correct projection\nsurface.width = app.screen.width;\nsurface.height = app.screen.height;\n// var squarePlane = new PIXI.projection.Sprite2d(PIXI.Texture.from('https://beta.pixijs.com/assets/flowerTop.png'));\nconst squarePlane = new PIXI.projection.Sprite2d(PIXI.Texture.WHITE);\nsquarePlane.tint = 0xff0000;\nsquarePlane.factor = 1;\nsquarePlane.proj.affine = PIXI.projection.AFFINE.AXIS_X;\nsquarePlane.anchor.set(0.5, 0.0);\nsquarePlane.position.set(-app.screen.width / 4, -app.screen.height / 2);\n\nconst bunny = new PIXI.projection.Sprite2d(PIXI.Texture.from('https://beta.pixijs.com/assets/flowerTop.png'));\nbunny.anchor.set(0.5, 1.0);\n\napp.stage.addChild(tiling);\napp.stage.addChild(container);\napp.stage.addChild(squareFar);\ncontainer.addChild(surface);\ncontainer.addChild(squarePlane);\nsquarePlane.addChild(bunny);\n\n// Listen for animate update\napp.ticker.add((delta) => {\n    // now we can get local coords for points of perspective\n    const pos = container.toLocal(squareFar.position, undefined, undefined, undefined, PIXI.projection.TRANSFORM_STEP.BEFORE_PROJ);\n    // need to invert this thing, otherwise we'll have to use scale.y=-1 which is not good\n    pos.y = -pos.y;\n    pos.x = -pos.x;\n    container.proj.setAxisY(pos, -squareFar.factor);\n\n    tiling.tileScale.copyFrom(surface.scale);\n    // dont overflow tilePosition, shaders will have less precision\n    tiling.tilePosition.x = (tiling.tilePosition.x + delta) % tiling.texture.width;\n    // sync container proj and tiling inside proj\n    tiling.tileProj.setAxisY(pos, -squareFar.factor);\n\n    squarePlane.proj.affine = squarePlane.factor\n        ? PIXI.projection.AFFINE.AXIS_X : PIXI.projection.AFFINE.NONE;\n});\n\naddInteraction(squareFar);\naddInteraction(squarePlane);\n// move the bunny too!\naddInteraction(bunny);\n\n// === CLICKS AND SNAP ===\n\n// changes axis factor\nfunction toggle(obj) {\n    if (obj !== bunny) {\n        obj.factor = 1.0 - obj.factor;\n        obj.tint = obj.factor ? 0xff0033 : 0x00ff00;\n    }\n}\n\nfunction snap(obj) {\n    if (obj === bunny) {\n        obj.position.set(0);\n    } else if (obj === squarePlane) {\n    // plane bounds\n        obj.position.x = Math.min(Math.max(obj.position.x, -app.screen.width / 2 + 10), app.screen.width / 2 - 10);\n        obj.position.y = Math.min(Math.max(obj.position.y, -app.screen.height + 10), 10);\n    } else {\n    // far\n        obj.position.x = Math.min(Math.max(obj.position.x, 0), app.screen.width);\n        obj.position.y = Math.min(Math.max(obj.position.y, 0), app.screen.height);\n    }\n}\n\n// === INTERACTION CODE  ===\n\nfunction addInteraction(obj) {\n    obj.interactive = true;\n    obj\n        .on('pointerdown', onDragStart)\n        .on('pointerup', onDragEnd)\n        .on('pointerupoutside', onDragEnd)\n        .on('pointermove', onDragMove);\n}\n\nfunction onDragStart(event) {\n    const obj = event.currentTarget;\n    obj.dragData = event.data;\n    obj.dragging = 1;\n    obj.dragPointerStart = event.data.getLocalPosition(obj.parent);\n    obj.dragObjStart = new PIXI.Point();\n    obj.dragObjStart.copyFrom(obj.position);\n    obj.dragGlobalStart = new PIXI.Point();\n    obj.dragGlobalStart.copyFrom(event.data.global);\n    event.stopPropagation();\n}\n\nfunction onDragEnd(event) {\n    const obj = event.currentTarget;\n    if (!obj.dragging) return;\n    if (obj.dragging === 1) {\n        toggle(obj);\n    } else {\n        snap(obj);\n    }\n\n    obj.dragging = 0;\n    obj.dragData = null;\n\n    event.stopPropagation();\n    // set the interaction data to null\n}\n\nfunction onDragMove(event) {\n    const obj = event.currentTarget;\n    if (!obj.dragging) return;\n    event.stopPropagation();\n    const data = obj.dragData; // it can be different pointer!\n    if (obj.dragging === 1) {\n    // click or drag?\n        if (Math.abs(data.global.x - obj.dragGlobalStart.x)\n            + Math.abs(data.global.y - obj.dragGlobalStart.y) >= 3) {\n            // DRAG\n            obj.dragging = 2;\n        }\n    }\n    if (obj.dragging === 2) {\n        const dragPointerEnd = data.getLocalPosition(obj.parent);\n        // DRAG\n        obj.position.set(\n            obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x),\n            obj.dragObjStart.y + (dragPointerEnd.y - obj.dragPointerStart.y),\n        );\n    }\n}\n")))}d.isMDXComponent=!0}}]);