"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[9116],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,g=u["".concat(i,".").concat(m)]||u[m]||k[m]||l;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var d=2;d<l;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},13140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const l={id:"PIXI.Resolver.pixi_assets",title:"Class: PIXI.Resolver",sidebar_label:"PIXI.Resolver",custom_edit_url:null},s=void 0,o={unversionedId:"api/classes/PIXI.Resolver.pixi_assets",id:"api/classes/PIXI.Resolver.pixi_assets",title:"Class: PIXI.Resolver",description:"@pixi/assets.Resolver",source:"@site/docs/api/classes/PIXI.Resolver.pixi_assets.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.Resolver.pixi_assets",permalink:"/api/classes/PIXI.Resolver.pixi_assets",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.Resolver.pixi_assets",title:"Class: PIXI.Resolver",sidebar_label:"PIXI.Resolver",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.Renderer",permalink:"/api/classes/PIXI.Renderer.pixi_core"},next:{title:"PIXI.Resource",permalink:"/api/classes/PIXI.Resource.pixi_core"}},i={},d=[{value:"new PIXI.Resolver: <span><code>() </code></span>",id:"new-pixiresolver--",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Members",id:"members",level:2},{value:"basePath: <span><code>string</code></span>",id:"basepath-string",level:3},{value:"parsers: <span><code>ResolveURLParser[]</code></span>",id:"parsers-resolveurlparser",level:3},{value:"rootPath: <span><code>string</code></span>",id:"rootpath-string",level:3},{value:"Methods",id:"methods",level:2},{value:"add: <span><code>(keysIn: string | string[], assetsIn: string | ResolveAsset | (string | ResolveAsset)[], data: unknown) -&gt; void</code></span>",id:"add-keysin-string--string-assetsin-string--resolveasset--string--resolveasset-data-unknown---void",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:'addBundle: <span><code>(bundleId: string, assets: ResolverBundle"assets") -&gt; void</code></span>',id:"addbundle-bundleid-string-assets-resolverbundleassets---void",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"addManifest: <span><code>(manifest: ResolverManifest) -&gt; void</code></span>",id:"addmanifest-manifest-resolvermanifest---void",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"hasBundle: <span><code>(key: string) -&gt; boolean</code></span>",id:"hasbundle-key-string---boolean",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Returns:",id:"returns",level:4},{value:"hasKey: <span><code>(key: string) -&gt; boolean</code></span>",id:"haskey-key-string---boolean",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"prefer: <span><code>(preferOrders: PreferOrder[]) -&gt; void</code></span>",id:"prefer-preferorders-preferorder---void",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"reset: <span><code>() -&gt; void</code></span>",id:"reset----void",level:3},{value:"resolve: <span><code>(keys: string | string[]) -&gt; ResolveAsset | Record&lt;string, ResolveAsset&gt;</code></span>",id:"resolve-keys-string--string---resolveasset--recordstring-resolveasset",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"resolveBundle: <span><code>(bundleIds: string | string[]) -&gt; Record&lt;string, ResolveAsset&gt; | Record&lt;string, Record&lt;string, ResolveAsset&gt;&gt;</code></span>",id:"resolvebundle-bundleids-string--string---recordstring-resolveasset--recordstring-recordstring-resolveasset",level:3},{value:"Parameters:",id:"parameters-8",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"resolveUrl: <span><code>(key: string | string[]) -&gt; string | Record&lt;string, string&gt;</code></span>",id:"resolveurl-key-string--string---string--recordstring-string",level:3},{value:"Parameters:",id:"parameters-9",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"setBundleIdentifier: <span><code>(bundleIdentifier: BundleIdentifierOptions) -&gt; void</code></span>",id:"setbundleidentifier-bundleidentifier-bundleidentifieroptions---void",level:3},{value:"Parameters:",id:"parameters-10",level:4},{value:"setDefaultSearchParams: <span><code>(searchParams: string | Record&lt;string, unknown&gt;) -&gt; void</code></span>",id:"setdefaultsearchparams-searchparams-string--recordstring-unknown---void",level:3},{value:"Parameters:",id:"parameters-11",level:4}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"../modules/pixi_assets"},"@pixi/assets"),".Resolver"),(0,a.kt)("p",null,"A class that is responsible for resolving mapping asset URLs to keys. At its most basic it can be used for Aliases",":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"resolver.add('foo', 'bar');\nresolver.resolveUrl('foo') // => 'bar'\n\n")),(0,a.kt)("p",null,"It can also be used to resolve the most appropriate asset for a given URL",":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"resolver.prefer({\n    params: {\n        format: 'webp',\n        resolution: 2,\n    }\n});\n\nresolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n\nresolver.resolveUrl('foo') // => 'bar@2x.webp'\n\n")),(0,a.kt)("p",null,"Other features include",":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ability to process a manifest file to get the correct understanding of how to resolve all assets"),(0,a.kt)("li",{parentName:"ul"},"Ability to add custom parsers for specific file types"),(0,a.kt)("li",{parentName:"ul"},"Ability to add custom prefer rules")),(0,a.kt)("p",null,"This class only cares about the URL, not the loading of the asset itself."),(0,a.kt)("p",null,"It is not intended that this class is created by developers - its part of the Asset class This is the third major system of PixiJS' main Assets class"),(0,a.kt)("p",null,"// TODO: @see"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"new-pixiresolver--"},"new PIXI.Resolver: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"() "))),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"basepath-string"},"basePath: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"string"))),(0,a.kt)("p",null,"Set the base path to prepend to all urls when resolving"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"resolver.basePath = 'https://home.com/';\nresolver.add('foo', 'bar.ong');\nresolver.resolveUrl('foo', 'bar.png'); // => 'https://home.com/bar.png'\n"))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"parsers-resolveurlparser"},"parsers: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"ResolveURLParser[]"))),(0,a.kt)("p",null,"All the active URL parsers that help the parser to extract information and create an asset object-based on parsing the URL itself."),(0,a.kt)("p",null,"Can be added using the extensions API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"}," resolver.add('foo', [\n     {\n         resolution: 2,\n         format: 'png',\n         src: 'image@2x.png',\n     },\n     {\n         resolution:1,\n         format:'png',\n         src: 'image.png',\n     },\n ]);\n\n // With a url parser the information such as resolution and file format could extracted from the url itself:\n extensions.add({\n     extension: ExtensionType.ResolveParser,\n     test: loadTextures.test, // test if url ends in an image\n     parse: (value: string) =>\n     ({\n         resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n         format: value.split('.').pop(),\n         src: value,\n     }),\n });\n\n // Now resolution and format can be extracted from the url\n resolver.add('foo', [\n     'image@2x.png',\n     'image.png',\n ]);\n"))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"rootpath-string"},"rootPath: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"string"))),(0,a.kt)("p",null,"Set the root path for root-relative URLs. By default the ",(0,a.kt)("inlineCode",{parentName:"p"},"basePath"),"'s root is used. If no ",(0,a.kt)("inlineCode",{parentName:"p"},"basePath")," is set, then the default value for browsers is ",(0,a.kt)("inlineCode",{parentName:"p"},"window.location.origin")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Application hosted on https://home.com/some-path/index.html\nresolver.basePath = 'https://home.com/some-path/';\nresolver.rootPath = 'https://home.com/';\nresolver.add('foo', '/bar.png');\nresolver.resolveUrl('foo', '/bar.png'); // => 'https://home.com/bar.png'\n"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"add-keysin-string--string-assetsin-string--resolveasset--string--resolveasset-data-unknown---void"},"add: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(keysIn",":"," string ","|"," string[], assetsIn",":"," string ","|"," ResolveAsset ","|"," (string ","|"," ResolveAsset)[], data",":"," unknown) -",">"," void"))),(0,a.kt)("p",null,"Tells the resolver what keys are associated with witch asset. The most important thing the resolver does"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"}," // Single key, single asset:\n resolver.add('foo', 'bar.png');\n resolver.resolveUrl('foo') // => 'bar.png'\n\n // Multiple keys, single asset:\n resolver.add(['foo', 'boo'], 'bar.png');\n resolver.resolveUrl('foo') // => 'bar.png'\n resolver.resolveUrl('boo') // => 'bar.png'\n\n // Multiple keys, multiple assets:\n resolver.add(['foo', 'boo'], ['bar.png', 'bar.webp']);\n resolver.resolveUrl('foo') // => 'bar.png'\n\n // Add custom data attached to the resolver\n Resolver.add(\n     'bunnyBooBooSmooth',\n     'bunny{png,webp}',\n     { scaleMode:SCALE_MODES.NEAREST }, // Base texture options\n );\n\n resolver.resolve('bunnyBooBooSmooth') // => { src: 'bunny.png', data: { scaleMode: SCALE_MODES.NEAREST } }\n")),(0,a.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"keysIn"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," string[]")),(0,a.kt)("td",{parentName:"tr",align:null},"The keys to map, can be an array or a single key")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"assetsIn"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," ResolveAsset ","|"," (string ","|"," ResolveAsset)[]")),(0,a.kt)("td",{parentName:"tr",align:null},"The assets to associate with the key(s)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"data"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"unknown")),(0,a.kt)("td",{parentName:"tr",align:null},"The data that will be attached to the object that resolved object."))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"addbundle-bundleid-string-assets-resolverbundleassets---void"},"addBundle: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(bundleId",":"," string, assets",":"," ResolverBundle",'["assets"]',") -",">"," void"))),(0,a.kt)("p",null,"This adds a bundle of assets in one go so that you can resolve them as a group. For example you could add a bundle for each screen in you pixi app"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"}," resolver.addBundle('animals', {\n     bunny: 'bunny.png',\n     chicken: 'chicken.png',\n     thumper: 'thumper.png',\n });\n\n const resolvedAssets = await resolver.resolveBundle('animals');\n")),(0,a.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"bundleId"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The id of the bundle to add")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"assets"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"ResolverBundle",'["assets"]')),(0,a.kt)("td",{parentName:"tr",align:null},"A record of the asset or assets that will be chosen from when loading via the specified key"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"addmanifest-manifest-resolvermanifest---void"},"addManifest: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(manifest",":"," ResolverManifest) -",">"," void"))),(0,a.kt)("p",null,"Add a manifest to the asset resolver. This is a nice way to add all the asset information in one go. generally a manifest would be built using a tool."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"manifest"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"ResolverManifest")),(0,a.kt)("td",{parentName:"tr",align:null},"the manifest to add to the resolver"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"hasbundle-key-string---boolean"},"hasBundle: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(key",":"," string) -",">"," boolean"))),(0,a.kt)("p",null,"Checks if a bundle with the given key exists in the resolver"),(0,a.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The key of the bundle")))),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"boolean")),(0,a.kt)("td",{parentName:"tr",align:null}))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"haskey-key-string---boolean"},"hasKey: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(key",":"," string) -",">"," boolean"))),(0,a.kt)("p",null,"Checks if an asset with a given key exists in the resolver"),(0,a.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The key of the asset")))),(0,a.kt)("h4",{id:"returns-1"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"boolean")),(0,a.kt)("td",{parentName:"tr",align:null}))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"prefer-preferorders-preferorder---void"},"prefer: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(preferOrders",":"," PreferOrder[]) -",">"," void"))),(0,a.kt)("p",null,"Let the resolver know which assets you prefer to use when resolving assets. Multiple prefer user defined rules can be added."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"resolver.prefer({\n    // first look for something with the correct format, and then then correct resolution\n    priority: ['format', 'resolution'],\n    params:{\n        format:'webp', // prefer webp images\n        resolution: 2, // prefer a resolution of 2\n    }\n})\nresolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\nresolver.resolveUrl('foo') // => 'bar@2x.webp'\n")),(0,a.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"preferOrders"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PreferOrder[]")),(0,a.kt)("td",{parentName:"tr",align:null},"the prefer options"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"reset----void"},"reset: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"() -",">"," void"))),(0,a.kt)("p",null,"Used for testing, this resets the resolver to its initial state")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"resolve-keys-string--string---resolveasset--recordstring-resolveasset"},"resolve: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(keys",":"," string ","|"," string[]) -",">"," ResolveAsset ","|"," Record","<","string, ResolveAsset",">"))),(0,a.kt)("p",null,"Resolves each key in the list to an asset object. Another key function of the resolver! After adding all the various key/asset pairs. this will run the logic of finding which asset to return based on any preferences set using the ",(0,a.kt)("inlineCode",{parentName:"p"},"prefer")," function by default the same key passed in will be returned if nothing is matched by the resolver."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"}," resolver.add('boo', 'bunny.png');\n\n resolver.resolve('boo') // => { src: 'bunny.png' }\n\n // Will return the same string as no key was added for this value..\n resolver.resolve('another-thing.png') // => { src: 'another-thing.png' }\n")),(0,a.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"keys"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," string[]")),(0,a.kt)("td",{parentName:"tr",align:null},"key or keys to resolve")))),(0,a.kt)("h4",{id:"returns-2"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"ResolveAsset ","|"," Record","<","string, ResolveAsset",">")),(0,a.kt)("td",{parentName:"tr",align:null},"* the resolve asset or a hash of resolve assets for each key specified"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"resolvebundle-bundleids-string--string---recordstring-resolveasset--recordstring-recordstring-resolveasset"},"resolveBundle: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(bundleIds",":"," string ","|"," string[]) -",">"," Record","<","string, ResolveAsset",">"," ","|"," Record","<","string, Record","<","string, ResolveAsset",">",">"))),(0,a.kt)("p",null,"If the resolver has had a manifest set via setManifest, this will return the assets urls for a given bundleId or bundleIds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"}," // Manifest Example\n const manifest = {\n     bundles: [\n         {\n             name: 'load-screen',\n             assets: [\n                 {\n                     name: 'background',\n                     srcs: 'sunset.png',\n                 },\n                 {\n                     name: 'bar',\n                     srcs: 'load-bar.{png,webp}',\n                 },\n             ],\n         },\n         {\n             name: 'game-screen',\n             assets: [\n                 {\n                     name: 'character',\n                     srcs: 'robot.png',\n                 },\n                 {\n                     name: 'enemy',\n                     srcs: 'bad-guy.png',\n                 },\n             ],\n         },\n     ]\n };\n\n resolver.setManifest(manifest);\n const resolved = resolver.resolveBundle('load-screen');\n")),(0,a.kt)("h4",{id:"parameters-8"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"bundleIds"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," string[]")),(0,a.kt)("td",{parentName:"tr",align:null},"The bundle ids to resolve")))),(0,a.kt)("h4",{id:"returns-3"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"Record","<","string, ResolveAsset",">"," ","|"," Record","<","string, Record","<","string, ResolveAsset",">",">")),(0,a.kt)("td",{parentName:"tr",align:null},"All the bundles assets or a hash of assets for each bundle specified"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"resolveurl-key-string--string---string--recordstring-string"},"resolveUrl: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(key",":"," string ","|"," string[]) -",">"," string ","|"," Record","<","string, string",">"))),(0,a.kt)("p",null,"Does exactly what resolve does, but returns just the URL rather than the whole asset object"),(0,a.kt)("h4",{id:"parameters-9"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," string[]")),(0,a.kt)("td",{parentName:"tr",align:null},"The key or keys to resolve")))),(0,a.kt)("h4",{id:"returns-4"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," Record","<","string, string",">")),(0,a.kt)("td",{parentName:"tr",align:null},"* The URLs associated with the key(s)"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setbundleidentifier-bundleidentifier-bundleidentifieroptions---void"},"setBundleIdentifier: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(bundleIdentifier",":"," BundleIdentifierOptions) -",">"," void"))),(0,a.kt)("p",null,"Override how the resolver deals with generating bundle ids. must be called before any bundles are added"),(0,a.kt)("h4",{id:"parameters-10"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"bundleIdentifier"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"BundleIdentifierOptions")),(0,a.kt)("td",{parentName:"tr",align:null},"the bundle identifier options"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setdefaultsearchparams-searchparams-string--recordstring-unknown---void"},"setDefaultSearchParams: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"(searchParams",":"," string ","|"," Record","<","string, unknown",">",") -",">"," void"))),(0,a.kt)("p",null,"Sets the default URL search parameters for the URL resolver. The urls can be specified as a string or an object."),(0,a.kt)("h4",{id:"parameters-11"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"searchParams"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string ","|"," Record","<","string, unknown",">")),(0,a.kt)("td",{parentName:"tr",align:null},"the default url parameters to append when resolving urls"))))),(0,a.kt)("hr",null))}u.isMDXComponent=!0}}]);