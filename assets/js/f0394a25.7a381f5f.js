"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[4271],{3905:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>f});var n=l(67294);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function i(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(l),k=a,f=c["".concat(s,".").concat(k)]||c[k]||d[k]||o;return l?n.createElement(f,r(r({ref:t},p),{},{components:l})):n.createElement(f,r({ref:t},p))}));function f(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=l.length,r=new Array(o);r[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,r[1]=i;for(var u=2;u<o;u++)r[u]=l[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}k.displayName="MDXCreateElement"},71466:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=l(87462),a=(l(67294),l(3905));const o={id:"PIXI.State.pixi_core",title:"Class: PIXI.State",sidebar_label:"PIXI.State",custom_edit_url:null},r=void 0,i={unversionedId:"api/classes/PIXI.State.pixi_core",id:"api/classes/PIXI.State.pixi_core",title:"Class: PIXI.State",description:"@pixi/core.State",source:"@site/docs/api/classes/PIXI.State.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.State.pixi_core",permalink:"/api/classes/PIXI.State.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.State.pixi_core",title:"Class: PIXI.State",sidebar_label:"PIXI.State",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.StartupSystem",permalink:"/api/classes/PIXI.StartupSystem.pixi_core"},next:{title:"PIXI.StateSystem",permalink:"/api/classes/PIXI.StateSystem.pixi_core"}},s={},u=[{value:"new PIXI()",id:"new-pixi",level:3},{value:"Members",id:"members",level:2},{value:"blend: <span><code>boolean</code></span>",id:"blend-boolean",level:3},{value:"blendMode: <span><code>BLEND_MODES</code></span>",id:"blendmode-blend_modes",level:3},{value:"clockwiseFrontFace: <span><code>boolean</code></span>",id:"clockwisefrontface-boolean",level:3},{value:"culling: <span><code>boolean</code></span>",id:"culling-boolean",level:3},{value:"depthMask: <span><code>boolean</code></span>",id:"depthmask-boolean",level:3},{value:"depthTest: <span><code>boolean</code></span>",id:"depthtest-boolean",level:3},{value:"offsets: <span><code>boolean</code></span>",id:"offsets-boolean",level:3},{value:"polygonOffset: <span><code>number</code></span>",id:"polygonoffset-number",level:3}],p={toc:u};function c(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".State"),(0,a.kt)("p",null,"This is a WebGL state, and is is passed to ",(0,a.kt)("a",{parentName:"p",href:"../classes/PIXI.StateSystem.pixi_core"},"PIXI.StateSystem"),".\nEach mesh rendered may require WebGL to be in a different state. For example you may want different blend mode or to enable polygon offsets"),(0,a.kt)("p",null,"// TODO: @see"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"new-pixi"},"new PIXI()")),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"blend-boolean"},"blend: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"boolean"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"true"))),(0,a.kt)("p",null,"Activates blending of the computed fragment color values.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"blendmode-blend_modes"},"blendMode: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"BLEND_MODES"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.BLEND_MODES.NORMAL"))),(0,a.kt)("p",null,"The blend mode to be applied when this state is set. Apply a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"PIXI.BLEND_MODES.NORMAL")," to reset the blend mode. Setting this mode to anything other than NO_BLEND will automatically switch blending on.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"clockwisefrontface-boolean"},"clockwiseFrontFace: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"boolean"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"false"))),(0,a.kt)("p",null,"Specifies whether or not front or back-facing polygons can be culled.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"culling-boolean"},"culling: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"boolean"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"false"))),(0,a.kt)("p",null,"Activates culling of polygons.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"depthmask-boolean"},"depthMask: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"boolean"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"true"))),(0,a.kt)("p",null,"Enables or disables writing to the depth buffer.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"depthtest-boolean"},"depthTest: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"boolean"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"false"))),(0,a.kt)("p",null,"Activates depth comparisons and updates to the depth buffer.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"offsets-boolean"},"offsets: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"boolean"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"false"))),(0,a.kt)("p",null,"Activates adding an offset to depth values of polygon's fragments")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"polygonoffset-number"},"polygonOffset: ",(0,a.kt)("span",null,(0,a.kt)("code",null,"number"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Default Value"),": ",(0,a.kt)("code",null,"0"))),(0,a.kt)("p",null,"The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.")),(0,a.kt)("hr",null))}c.isMDXComponent=!0}}]);