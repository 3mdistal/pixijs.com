"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([[3804],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>c});var l=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,l,a=function(e,t){if(null==e)return{};var r,l,a={},n=Object.keys(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=l.createContext({}),o=function(e){var t=l.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=o(e.components);return l.createElement(p.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=o(r),m=a,c=d["".concat(p,".").concat(m)]||d[m]||k[m]||n;return r?l.createElement(c,i(i({ref:t},s),{},{components:r})):l.createElement(c,i({ref:t},s))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=m;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u[d]="string"==typeof e?e:a,i[1]=u;for(var o=2;o<n;o++)i[o]=r[o];return l.createElement.apply(null,i)}return l.createElement.apply(null,r)}m.displayName="MDXCreateElement"},38469:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>u,toc:()=>o});var l=r(87462),a=(r(67294),r(3905));const n={id:"PIXI.BaseRenderTexture.pixi_core",title:"Class: PIXI.BaseRenderTexture",sidebar_label:"PIXI.BaseRenderTexture",custom_edit_url:null},i=void 0,u={unversionedId:"api/classes/PIXI.BaseRenderTexture.pixi_core",id:"api/classes/PIXI.BaseRenderTexture.pixi_core",title:"Class: PIXI.BaseRenderTexture",description:"@pixi/core.BaseRenderTexture",source:"@site/docs/api/classes/PIXI.BaseRenderTexture.pixi_core.mdx",sourceDirName:"api/classes",slug:"/api/classes/PIXI.BaseRenderTexture.pixi_core",permalink:"/api/classes/PIXI.BaseRenderTexture.pixi_core",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"PIXI.BaseRenderTexture.pixi_core",title:"Class: PIXI.BaseRenderTexture",sidebar_label:"PIXI.BaseRenderTexture",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"PIXI.BasePrepare",permalink:"/api/classes/PIXI.BasePrepare.pixi_prepare"},next:{title:"PIXI.BaseTexture",permalink:"/api/classes/PIXI.BaseTexture.pixi_core"}},p={},o=[{value:"Constructor:",id:"constructor",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Extends",id:"extends",level:2},{value:"Members",id:"members",level:2},{value:"_batchEnabled",id:"_batchenabled",level:3},{value:"_batchLocation",id:"_batchlocation",level:3},{value:"alphaMode",id:"alphamode",level:3},{value:"anisotropicLevel",id:"anisotropiclevel",level:3},{value:"cacheId",id:"cacheid",level:3},{value:"clear",id:"clear",level:3},{value:"clearColor",id:"clearcolor",level:3},{value:"destroyed",id:"destroyed",level:3},{value:"dirtyId",id:"dirtyid",level:3},{value:"filterStack",id:"filterstack",level:3},{value:"format",id:"format",level:3},{value:"height",id:"height",level:3},{value:"isPowerOfTwo",id:"ispoweroftwo",level:3},{value:"maskStack",id:"maskstack",level:3},{value:"mipmap",id:"mipmap",level:3},{value:"parentTextureArray",id:"parenttexturearray",level:3},{value:"realHeight",id:"realheight",level:3},{value:"realWidth",id:"realwidth",level:3},{value:"resolution",id:"resolution",level:3},{value:"resource",id:"resource",level:3},{value:"scaleMode",id:"scalemode",level:3},{value:"target",id:"target",level:3},{value:"textureCacheIds",id:"texturecacheids",level:3},{value:"type",id:"type",level:3},{value:"valid",id:"valid",level:3},{value:"width",id:"width",level:3},{value:"wrapMode",id:"wrapmode",level:3},{value:"_canvasRenderTarget",id:"_canvasrendertarget",level:3},{value:"dirtyStyleId",id:"dirtystyleid",level:3},{value:"touched",id:"touched",level:3},{value:"uid",id:"uid",level:3},{value:"Methods",id:"methods",level:2},{value:"castToBaseTexture",id:"casttobasetexture",level:3},{value:"Returns:",id:"returns",level:4},{value:"destroy",id:"destroy",level:3},{value:"dispose",id:"dispose",level:3},{value:"getDrawableSource",id:"getdrawablesource",level:3},{value:"Returns:",id:"returns-1",level:4},{value:"resize",id:"resize",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"setRealSize",id:"setrealsize",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"setResolution",id:"setresolution",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"setResource",id:"setresource",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"setSize",id:"setsize",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Returns:",id:"returns-5",level:4},{value:"setStyle",id:"setstyle",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"Returns:",id:"returns-6",level:4},{value:"update",id:"update",level:3}],s={toc:o};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,l.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{class:"package-name"},(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"../modules/pixi_core"},"@pixi/core"),".BaseRenderTexture")),(0,a.kt)("p",null,"A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n",(0,a.kt)("strong",{parentName:"p"},"Hint"),":"," All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded otherwise black rectangles will be drawn instead."),(0,a.kt)("p",null,"A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position and rotation of the given Display Objects is ignored. For example",":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"}," import { autoDetectRenderer, BaseRenderTexture, RenderTexture, Sprite } from 'pixi.js';\n\n const renderer = autoDetectRenderer();\n const baseRenderTexture = new BaseRenderTexture({ width: 800, height: 600 });\n const renderTexture = new RenderTexture(baseRenderTexture);\n const sprite = Sprite.from('spinObj_01.png');\n\n sprite.position.x = 800 / 2;\n sprite.position.y = 600 / 2;\n sprite.anchor.x = 0.5;\n sprite.anchor.y = 0.5;\n\n renderer.render(sprite, { renderTexture });\n\n // The Sprite in this case will be rendered using its local transform.\n // To render this sprite at 0,0 you can clear the transform\n sprite.setTransform();\n\n const baseRenderTexture = new BaseRenderTexture({ width: 100, height: 100 });\n const renderTexture = new RenderTexture(baseRenderTexture);\n\n renderer.render(sprite, { renderTexture }); // Renders to center of RenderTexture\n")),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"constructor"},"Constructor:"),(0,a.kt)("h4",null,(0,a.kt)("code",null,"new PIXI.BaseRenderTexture(options: IBaseTextureOptions) ")),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"IBaseTextureOptions")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null)),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options.width"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"100")),(0,a.kt)("td",{parentName:"tr",align:null},"The width of the base render texture.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options.height"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"100")),(0,a.kt)("td",{parentName:"tr",align:null},"The height of the base render texture.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options.scaleMode"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PIXI.SCALE_MODES")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PIXI.BaseTexture.defaultOptions.scaleMode")),(0,a.kt)("td",{parentName:"tr",align:null},"See ",(0,a.kt)("a",{parentName:"td",href:"../enums/PIXI.SCALE_MODES.pixi_constants"},"PIXI.SCALE_MODES")," for possible values.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options.resolution"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PIXI.settings.RESOLUTION")),(0,a.kt)("td",{parentName:"tr",align:null},"The resolution / device pixel ratio of the texture being generated.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options.multisample"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PIXI.MSAA_QUALITY")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PIXI.MSAA_QUALITY.NONE")),(0,a.kt)("td",{parentName:"tr",align:null},"The number of samples of the frame buffer."))))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"extends"},"Extends"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../classes/PIXI.BaseTexture.pixi_core"},"PIXI.BaseTexture"))),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"_batchenabled"},"_batchEnabled"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Number of the texture batch, used by multi-texture renderers")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"_batchlocation"},"_batchLocation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Location inside texture batch, used by multi-texture renderers")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"alphamode"},"alphaMode"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"PIXI.ALPHA_MODES")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.ALPHA_MODES.UNPACK")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," How to treat premultiplied alpha, see ",(0,a.kt)("a",{parentName:"p",href:"../enums/PIXI.ALPHA_MODES.pixi_constants"},"PIXI.ALPHA_MODES"),".")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"anisotropiclevel"},"anisotropicLevel"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"0")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Anisotropic filtering level of texture")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"cacheid"},"cacheId"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"string")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Currently default cache ID.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"clear"},"clear"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"Color")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Color object when clearning the texture.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"clearcolor"},"clearColor"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"ColorSource")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Color when clearning the texture.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"destroyed"},"destroyed"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"boolean")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Flag if BaseTexture has been destroyed.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"dirtyid"},"dirtyId"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Used by TextureSystem to only update texture to the GPU when needed. Please call ",(0,a.kt)("inlineCode",{parentName:"p"},"update()")," to increment it.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"filterstack"},"filterStack"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"Array","<","any",">")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The data structure for the filters.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"format"},"format"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"FORMATS")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.FORMATS.RGBA")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The pixel format of the texture")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"height"},"height"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The height of the base texture set when the image has loaded")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"ispoweroftwo"},"isPowerOfTwo"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"boolean")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"false")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Whether or not the texture is a power of two, try to use power of two textures as much as you can")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"maskstack"},"maskStack"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"Array","<","MaskData",">")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The data structure for the stencil masks.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"mipmap"},"mipmap"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"MIPMAP_MODES")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.MIPMAP_MODES.POW2")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Mipmap mode of the texture, affects downscaled images")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"parenttexturearray"},"parentTextureArray"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"PIXI.BaseTexture")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Whether its a part of another texture, handled by ArrayResource or CubeResource")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"realheight"},"realHeight"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Pixel height of the source of this texture")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"realwidth"},"realWidth"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Pixel width of the source of this texture")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"resolution"},"resolution"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.settings.RESOLUTION")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The resolution / device pixel ratio of the texture")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"resource"},"resource"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"PIXI.Resource")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The resource used by this BaseTexture, there can only be one resource per BaseTexture, but textures can share resources.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"scalemode"},"scaleMode"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"SCALE_MODES")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.SCALE_MODES.LINEAR")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The scale mode to apply when scaling this texture")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"target"},"target"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"TARGETS")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.TARGETS.TEXTURE_2D")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The target type")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"texturecacheids"},"textureCacheIds"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"Array","<","string",">")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The collection of alternative cache ids, since some BaseTextures can have more than one ID, short name and longer full URL")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"type"},"type"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"TYPES")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.TYPES.UNSIGNED_BYTE")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The type of resource data")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"valid"},"valid"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"boolean")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Generally speaking means when resource is loaded.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"width"},"width"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," The width of the base texture set when the image has loaded")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"wrapmode"},"wrapMode"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"WRAP_MODES")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"PIXI.WRAP_MODES.CLAMP")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," How the texture wraps")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"_canvasrendertarget"},"_canvasRenderTarget"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"PIXI.utils.CanvasRenderTarget")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,a.kt)("code",null,"undefined")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," A reference to the canvas render target (we only need one as this can be shared across renderers)")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"dirtystyleid"},"dirtyStyleId"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Used by TextureSystem to only update texture style when needed.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"touched"},"touched"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Used by automatic texture Garbage Collection, stores last GC tick when it was bound")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"uid"},"uid"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Global unique identifier for this BaseTexture")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"casttobasetexture"},"castToBaseTexture"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"() -",">"," BaseTexture")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Utility function for BaseTexture","|","Texture cast."),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"BaseTexture")),(0,a.kt)("td",{parentName:"tr",align:null}))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"destroy"},"destroy"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"() -",">"," void")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Destroys this texture.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"dispose"},"dispose"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"() -",">"," void")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Frees the texture and framebuffer from WebGL memory without destroying this texture object. This means you can still use the texture later which will upload it to GPU memory again.")),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"getdrawablesource"},"getDrawableSource"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"() -",">"," PIXI.ICanvasImageSource")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable for rendering with CanvasRenderer. Provided by ",(0,a.kt)("strong",{parentName:"p"},"@","pixi/canvas-renderer")," package."),(0,a.kt)("h4",{id:"returns-1"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"PIXI.ICanvasImageSource")),(0,a.kt)("td",{parentName:"tr",align:null},"Source to render with CanvasRenderer"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"resize"},"resize"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(desiredWidth",":"," number, desiredHeight",":"," number) -",">"," void")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Resizes the BaseRenderTexture."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"desiredWidth"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The desired width to resize to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"desiredHeight"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The desired height to resize to."))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setrealsize"},"setRealSize"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(realWidth",":"," number, realHeight",":"," number, resolution",":"," number) -",">"," this")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Sets real size of baseTexture, preserves current resolution."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"realWidth"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Full rendered width")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"realHeight"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Full rendered height")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resolution"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Optionally set resolution")))),(0,a.kt)("h4",{id:"returns-2"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"this")),(0,a.kt)("td",{parentName:"tr",align:null},"* this"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setresolution"},"setResolution"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(resolution",":"," number) -",">"," this")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Changes resolution"),(0,a.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resolution"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"res")))),(0,a.kt)("h4",{id:"returns-3"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"this")),(0,a.kt)("td",{parentName:"tr",align:null},"* this"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setresource"},"setResource"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(resource",":"," R) -",">"," this")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Sets the resource if it wasn't set. Throws error if resource already present"),(0,a.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"R")),(0,a.kt)("td",{parentName:"tr",align:null},"that is managing this BaseTexture")))),(0,a.kt)("h4",{id:"returns-4"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"this")),(0,a.kt)("td",{parentName:"tr",align:null},"* this"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setsize"},"setSize"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(desiredWidth",":"," number, desiredHeight",":"," number, resolution",":"," number) -",">"," this")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Changes w/h/resolution. Texture becomes valid if width and height are greater than zero."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"desiredWidth"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Desired visual width")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"desiredHeight"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Desired visual height")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resolution"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Optionally set resolution")))),(0,a.kt)("h4",{id:"returns-5"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"this")),(0,a.kt)("td",{parentName:"tr",align:null},"* this"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"setstyle"},"setStyle"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"(scaleMode",":"," SCALE_MODES, mipmap",":"," MIPMAP_MODES) -",">"," this")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Changes style options of BaseTexture"),(0,a.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"scaleMode"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"SCALE_MODES")),(0,a.kt)("td",{parentName:"tr",align:null},"Pixi scalemode")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mipmap"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"MIPMAP_MODES")),(0,a.kt)("td",{parentName:"tr",align:null},"enable mipmaps")))),(0,a.kt)("h4",{id:"returns-6"},"Returns:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"this")),(0,a.kt)("td",{parentName:"tr",align:null},"* this"))))),(0,a.kt)("hr",null),(0,a.kt)("article",null,(0,a.kt)("h3",{id:"update"},"update"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("code",null,"() -",">"," void")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Invalidates the object. Texture becomes valid if width and height are greater than zero.")),(0,a.kt)("hr",null))}d.isMDXComponent=!0}}]);